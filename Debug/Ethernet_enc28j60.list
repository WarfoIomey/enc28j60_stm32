
Ethernet_enc28j60.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008390  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be0  08008be0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008be8  08008be8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08008bf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200000f0  08008ce0  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000052c  08008ce0  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118ee  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327b  00000000  00000000  00031a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00035d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af31  00000000  00000000  00036cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014802  00000000  00000000  00051c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9c5  00000000  00000000  00066403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4dc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  000f4e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008484 	.word	0x08008484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08008484 	.word	0x08008484

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_ldivmod>:
 8000170:	b97b      	cbnz	r3, 8000192 <__aeabi_ldivmod+0x22>
 8000172:	b972      	cbnz	r2, 8000192 <__aeabi_ldivmod+0x22>
 8000174:	2900      	cmp	r1, #0
 8000176:	bfbe      	ittt	lt
 8000178:	2000      	movlt	r0, #0
 800017a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800017e:	e006      	blt.n	800018e <__aeabi_ldivmod+0x1e>
 8000180:	bf08      	it	eq
 8000182:	2800      	cmpeq	r0, #0
 8000184:	bf1c      	itt	ne
 8000186:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800018a:	f04f 30ff 	movne.w	r0, #4294967295
 800018e:	f000 b9a9 	b.w	80004e4 <__aeabi_idiv0>
 8000192:	f1ad 0c08 	sub.w	ip, sp, #8
 8000196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019a:	2900      	cmp	r1, #0
 800019c:	db09      	blt.n	80001b2 <__aeabi_ldivmod+0x42>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db1a      	blt.n	80001d8 <__aeabi_ldivmod+0x68>
 80001a2:	f000 f835 	bl	8000210 <__udivmoddi4>
 80001a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ae:	b004      	add	sp, #16
 80001b0:	4770      	bx	lr
 80001b2:	4240      	negs	r0, r0
 80001b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db1b      	blt.n	80001f4 <__aeabi_ldivmod+0x84>
 80001bc:	f000 f828 	bl	8000210 <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4240      	negs	r0, r0
 80001cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	4770      	bx	lr
 80001d8:	4252      	negs	r2, r2
 80001da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001de:	f000 f817 	bl	8000210 <__udivmoddi4>
 80001e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ea:	b004      	add	sp, #16
 80001ec:	4240      	negs	r0, r0
 80001ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f2:	4770      	bx	lr
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	f000 f809 	bl	8000210 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4252      	negs	r2, r2
 800020a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14d      	bne.n	80002bc <__udivmoddi4+0xac>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d968      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b152      	cbz	r2, 8000242 <__udivmoddi4+0x32>
 800022c:	fa01 f302 	lsl.w	r3, r1, r2
 8000230:	f1c2 0120 	rsb	r1, r2, #32
 8000234:	fa20 f101 	lsr.w	r1, r0, r1
 8000238:	fa0c fc02 	lsl.w	ip, ip, r2
 800023c:	ea41 0803 	orr.w	r8, r1, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000246:	fbb8 f7f1 	udiv	r7, r8, r1
 800024a:	fa1f fe8c 	uxth.w	lr, ip
 800024e:	fb01 8817 	mls	r8, r1, r7, r8
 8000252:	fb07 f00e 	mul.w	r0, r7, lr
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	4298      	cmp	r0, r3
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x66>
 8000260:	eb1c 0303 	adds.w	r3, ip, r3
 8000264:	f107 35ff 	add.w	r5, r7, #4294967295
 8000268:	f080 811e 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026c:	4298      	cmp	r0, r3
 800026e:	f240 811b 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000272:	3f02      	subs	r7, #2
 8000274:	4463      	add	r3, ip
 8000276:	1a1b      	subs	r3, r3, r0
 8000278:	fbb3 f0f1 	udiv	r0, r3, r1
 800027c:	fb01 3310 	mls	r3, r1, r0, r3
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	b2a4      	uxth	r4, r4
 8000286:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028a:	45a6      	cmp	lr, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8109 	bcs.w	80004ac <__udivmoddi4+0x29c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8106 	bls.w	80004ac <__udivmoddi4+0x29c>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	2100      	movs	r1, #0
 80002a6:	eba4 040e 	sub.w	r4, r4, lr
 80002aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa8>
 80002b0:	2300      	movs	r3, #0
 80002b2:	40d4      	lsrs	r4, r2
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	f000 80ee 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c6:	2100      	movs	r1, #0
 80002c8:	e9c6 0500 	strd	r0, r5, [r6]
 80002cc:	4608      	mov	r0, r1
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fc 	bhi.w	80004dc <__udivmoddi4+0x2cc>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0303 	sbc.w	r3, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e2      	beq.n	80002b8 <__udivmoddi4+0xa8>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7df      	b.n	80002b8 <__udivmoddi4+0xa8>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8091 	bne.w	8000428 <__udivmoddi4+0x218>
 8000306:	eba1 000c 	sub.w	r0, r1, ip
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000310:	fa1f fe8c 	uxth.w	lr, ip
 8000314:	fbb0 f3f7 	udiv	r3, r0, r7
 8000318:	fb07 0013 	mls	r0, r7, r3, r0
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	42a8      	cmp	r0, r5
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0505 	adds.w	r5, ip, r5
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	42a8      	cmp	r0, r5
 8000336:	f200 80ce 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 800033a:	4643      	mov	r3, r8
 800033c:	1a2d      	subs	r5, r5, r0
 800033e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000342:	fb07 5510 	mls	r5, r7, r0, r5
 8000346:	fb0e fe00 	mul.w	lr, lr, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 35ff 	add.w	r5, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80b6 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 8000364:	4628      	mov	r0, r5
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79e      	b.n	80002ae <__udivmoddi4+0x9e>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fbba f8f9 	udiv	r8, sl, r9
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000392:	408d      	lsls	r5, r1
 8000394:	fa1f fe8c 	uxth.w	lr, ip
 8000398:	431d      	orrs	r5, r3
 800039a:	fa00 f301 	lsl.w	r3, r0, r1
 800039e:	fb08 f00e 	mul.w	r0, r8, lr
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003a8:	42a0      	cmp	r0, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	42a0      	cmp	r0, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1a24      	subs	r4, r4, r0
 80003ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80003ce:	fb09 4410 	mls	r4, r9, r0, r4
 80003d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9502 	umull	r9, r5, r0, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2d0>
 800040c:	ebb3 0208 	subs.w	r2, r3, r8
 8000410:	eb64 040e 	sbc.w	r4, r4, lr
 8000414:	fa22 f301 	lsr.w	r3, r2, r1
 8000418:	fa04 f707 	lsl.w	r7, r4, r7
 800041c:	431f      	orrs	r7, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	2100      	movs	r1, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa8>
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	f1c2 0120 	rsb	r1, r2, #32
 8000430:	fa25 f301 	lsr.w	r3, r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa20 f101 	lsr.w	r1, r0, r1
 800043c:	4095      	lsls	r5, r2
 800043e:	430d      	orrs	r5, r1
 8000440:	fbb3 f1f7 	udiv	r1, r3, r7
 8000444:	fb07 3311 	mls	r3, r7, r1, r3
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	0c28      	lsrs	r0, r5, #16
 800044e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000452:	fb01 f30e 	mul.w	r3, r1, lr
 8000456:	4283      	cmp	r3, r0
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0000 	adds.w	r0, ip, r0
 8000462:	f101 38ff 	add.w	r8, r1, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	4283      	cmp	r3, r0
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3902      	subs	r1, #2
 800046e:	4460      	add	r0, ip
 8000470:	1ac0      	subs	r0, r0, r3
 8000472:	fbb0 f3f7 	udiv	r3, r0, r7
 8000476:	fb07 0013 	mls	r0, r7, r3, r0
 800047a:	b2ad      	uxth	r5, r5
 800047c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000480:	fb03 f00e 	mul.w	r0, r3, lr
 8000484:	42a8      	cmp	r0, r5
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0505 	adds.w	r5, ip, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	42a8      	cmp	r0, r5
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3b02      	subs	r3, #2
 8000498:	4465      	add	r5, ip
 800049a:	1a28      	subs	r0, r5, r0
 800049c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e707      	b.n	80002b8 <__udivmoddi4+0xa8>
 80004a8:	462f      	mov	r7, r5
 80004aa:	e6e4      	b.n	8000276 <__udivmoddi4+0x66>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f9      	b.n	80002a4 <__udivmoddi4+0x94>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4643      	mov	r3, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4628      	mov	r0, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4641      	mov	r1, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	4464      	add	r4, ip
 80004d2:	3802      	subs	r0, #2
 80004d4:	e747      	b.n	8000366 <__udivmoddi4+0x156>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x12c>
 80004dc:	4608      	mov	r0, r1
 80004de:	e706      	b.n	80002ee <__udivmoddi4+0xde>
 80004e0:	4631      	mov	r1, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa8>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <arp_read>:
arp_record_ptr arp_rec[5];
uint8_t current_arp_index=0;
extern USART_prop_ptr usartprop;
//--------------------------------------------------
uint8_t arp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 80004e8:	b5b0      	push	{r4, r5, r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af04      	add	r7, sp, #16
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	807b      	strh	r3, [r7, #2]
	uint8_t res=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
	arp_msg_ptr *msg=(void*)(frame->data);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	330e      	adds	r3, #14
 80004fc:	60bb      	str	r3, [r7, #8]
	if(len>sizeof(arp_msg_ptr))
 80004fe:	887b      	ldrh	r3, [r7, #2]
 8000500:	2b1c      	cmp	r3, #28
 8000502:	f240 80ae 	bls.w	8000662 <arp_read+0x17a>
	{
		//обработка ответа ПК
		if((msg->net_tp==ARP_ETH)&&(msg->proto_tp==ARP_IP))
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800050e:	f040 80a8 	bne.w	8000662 <arp_read+0x17a>
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	885b      	ldrh	r3, [r3, #2]
 8000516:	2b08      	cmp	r3, #8
 8000518:	f040 80a3 	bne.w	8000662 <arp_read+0x17a>
		{
			if(!memcmp(msg->ipaddr_dst,ipaddr,4))
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	3318      	adds	r3, #24
 8000520:	2204      	movs	r2, #4
 8000522:	4952      	ldr	r1, [pc, #328]	; (800066c <arp_read+0x184>)
 8000524:	4618      	mov	r0, r3
 8000526:	f005 fd3b 	bl	8005fa0 <memcmp>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	f040 8098 	bne.w	8000662 <arp_read+0x17a>
			{
				if(msg->op==ARP_REQUEST)
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	88db      	ldrh	r3, [r3, #6]
 8000536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800053a:	d102      	bne.n	8000542 <arp_read+0x5a>
				{
					res=1;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	e08f      	b.n	8000662 <arp_read+0x17a>
				}
				//условие наличия ARP-ответа
				else if(msg->op==ARP_REPLY)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	88db      	ldrh	r3, [r3, #6]
 8000546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800054a:	f040 808a 	bne.w	8000662 <arp_read+0x17a>
				{
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
					msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	7a1b      	ldrb	r3, [r3, #8]
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000552:	461c      	mov	r4, r3
					msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	7a5b      	ldrb	r3, [r3, #9]
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000558:	461d      	mov	r5, r3
					msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	7a9b      	ldrb	r3, [r3, #10]
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800055e:	461a      	mov	r2, r3
					msg->macaddr_src[3],msg->macaddr_src[4],msg->macaddr_src[5]);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	7adb      	ldrb	r3, [r3, #11]
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000564:	4619      	mov	r1, r3
					msg->macaddr_src[3],msg->macaddr_src[4],msg->macaddr_src[5]);
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	7b1b      	ldrb	r3, [r3, #12]
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800056a:	4618      	mov	r0, r3
					msg->macaddr_src[3],msg->macaddr_src[4],msg->macaddr_src[5]);
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	7b5b      	ldrb	r3, [r3, #13]
					sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000570:	9303      	str	r3, [sp, #12]
 8000572:	9002      	str	r0, [sp, #8]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	462b      	mov	r3, r5
 800057a:	4622      	mov	r2, r4
 800057c:	493c      	ldr	r1, [pc, #240]	; (8000670 <arp_read+0x188>)
 800057e:	483d      	ldr	r0, [pc, #244]	; (8000674 <arp_read+0x18c>)
 8000580:	f005 fe5e 	bl	8006240 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000584:	483b      	ldr	r0, [pc, #236]	; (8000674 <arp_read+0x18c>)
 8000586:	f7ff fdeb 	bl	8000160 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000592:	4938      	ldr	r1, [pc, #224]	; (8000674 <arp_read+0x18c>)
 8000594:	4838      	ldr	r0, [pc, #224]	; (8000678 <arp_read+0x190>)
 8000596:	f004 feca 	bl	800532e <HAL_UART_Transmit>
					sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
					msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	7b9b      	ldrb	r3, [r3, #14]
					sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
 800059e:	4619      	mov	r1, r3
					msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	7bdb      	ldrb	r3, [r3, #15]
					sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
 80005a4:	4618      	mov	r0, r3
					msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	7c1b      	ldrb	r3, [r3, #16]
					sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
 80005aa:	461a      	mov	r2, r3
					msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	7c5b      	ldrb	r3, [r3, #17]
					sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	4603      	mov	r3, r0
 80005b6:	460a      	mov	r2, r1
 80005b8:	4930      	ldr	r1, [pc, #192]	; (800067c <arp_read+0x194>)
 80005ba:	482e      	ldr	r0, [pc, #184]	; (8000674 <arp_read+0x18c>)
 80005bc:	f005 fe40 	bl	8006240 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80005c0:	482c      	ldr	r0, [pc, #176]	; (8000674 <arp_read+0x18c>)
 80005c2:	f7ff fdcd 	bl	8000160 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	4929      	ldr	r1, [pc, #164]	; (8000674 <arp_read+0x18c>)
 80005d0:	4829      	ldr	r0, [pc, #164]	; (8000678 <arp_read+0x190>)
 80005d2:	f004 feac 	bl	800532e <HAL_UART_Transmit>
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
					msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	7c9b      	ldrb	r3, [r3, #18]
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80005da:	461c      	mov	r4, r3
					msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	7cdb      	ldrb	r3, [r3, #19]
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80005e0:	461d      	mov	r5, r3
					msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	7d1b      	ldrb	r3, [r3, #20]
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80005e6:	461a      	mov	r2, r3
					msg->macaddr_dst[3],msg->macaddr_dst[4],msg->macaddr_dst[5]);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	7d5b      	ldrb	r3, [r3, #21]
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80005ec:	4619      	mov	r1, r3
					msg->macaddr_dst[3],msg->macaddr_dst[4],msg->macaddr_dst[5]);
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	7d9b      	ldrb	r3, [r3, #22]
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80005f2:	4618      	mov	r0, r3
					msg->macaddr_dst[3],msg->macaddr_dst[4],msg->macaddr_dst[5]);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	7ddb      	ldrb	r3, [r3, #23]
					sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80005f8:	9303      	str	r3, [sp, #12]
 80005fa:	9002      	str	r0, [sp, #8]
 80005fc:	9101      	str	r1, [sp, #4]
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	462b      	mov	r3, r5
 8000602:	4622      	mov	r2, r4
 8000604:	491e      	ldr	r1, [pc, #120]	; (8000680 <arp_read+0x198>)
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <arp_read+0x18c>)
 8000608:	f005 fe1a 	bl	8006240 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <arp_read+0x18c>)
 800060e:	f7ff fda7 	bl	8000160 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	4916      	ldr	r1, [pc, #88]	; (8000674 <arp_read+0x18c>)
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <arp_read+0x190>)
 800061e:	f004 fe86 	bl	800532e <HAL_UART_Transmit>
					sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
					msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	7e1b      	ldrb	r3, [r3, #24]
					sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
 8000626:	4619      	mov	r1, r3
					msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	7e5b      	ldrb	r3, [r3, #25]
					sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
 800062c:	4618      	mov	r0, r3
					msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	7e9b      	ldrb	r3, [r3, #26]
					sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
 8000632:	461a      	mov	r2, r3
					msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	7edb      	ldrb	r3, [r3, #27]
					sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	4603      	mov	r3, r0
 800063e:	460a      	mov	r2, r1
 8000640:	4910      	ldr	r1, [pc, #64]	; (8000684 <arp_read+0x19c>)
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <arp_read+0x18c>)
 8000644:	f005 fdfc 	bl	8006240 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <arp_read+0x18c>)
 800064a:	f7ff fd89 	bl	8000160 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	4907      	ldr	r1, [pc, #28]	; (8000674 <arp_read+0x18c>)
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <arp_read+0x190>)
 800065a:	f004 fe68 	bl	800532e <HAL_UART_Transmit>
					res=2;
 800065e:	2302      	movs	r3, #2
 8000660:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}
	return res;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	20000010 	.word	0x20000010
 8000670:	0800849c 	.word	0x0800849c
 8000674:	20000384 	.word	0x20000384
 8000678:	200004ac 	.word	0x200004ac
 800067c:	080084d0 	.word	0x080084d0
 8000680:	080084e8 	.word	0x080084e8
 8000684:	08008510 	.word	0x08008510

08000688 <arp_send>:
//------------------функцию отправки ответного пакета ARP-----------------------------
void arp_send(enc28j60_frame_ptr *frame)
{
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068a:	b08d      	sub	sp, #52	; 0x34
 800068c:	af08      	add	r7, sp, #32
 800068e:	6078      	str	r0, [r7, #4]
	arp_msg_ptr *msg=(void*)(frame->data);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	330e      	adds	r3, #14
 8000694:	60fb      	str	r3, [r7, #12]
	msg->op = ARP_REPLY;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	80da      	strh	r2, [r3, #6]
	//Занесём также в заголовок физические адреса
	memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f103 0012 	add.w	r0, r3, #18
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3308      	adds	r3, #8
 80006a8:	2206      	movs	r2, #6
 80006aa:	4619      	mov	r1, r3
 80006ac:	f005 fc88 	bl	8005fc0 <memcpy>
	memcpy(msg->macaddr_src,macaddr,6);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3308      	adds	r3, #8
 80006b4:	4a46      	ldr	r2, [pc, #280]	; (80007d0 <arp_send+0x148>)
 80006b6:	6811      	ldr	r1, [r2, #0]
 80006b8:	6019      	str	r1, [r3, #0]
 80006ba:	8892      	ldrh	r2, [r2, #4]
 80006bc:	809a      	strh	r2, [r3, #4]
	//Затем занесём IP-адреса
	memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3318      	adds	r3, #24
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	320e      	adds	r2, #14
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	601a      	str	r2, [r3, #0]
	memcpy(msg->ipaddr_src,ipaddr,4);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	330e      	adds	r3, #14
 80006ce:	4a41      	ldr	r2, [pc, #260]	; (80007d4 <arp_send+0x14c>)
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	601a      	str	r2, [r3, #0]
	memcpy(frame->addr_dest,frame->addr_src,6);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3306      	adds	r3, #6
 80006da:	2206      	movs	r2, #6
 80006dc:	4619      	mov	r1, r3
 80006de:	f005 fc6f 	bl	8005fc0 <memcpy>
	//И в завершении функции отправим пакет
	eth_send(frame,sizeof(arp_msg_ptr));
 80006e2:	211c      	movs	r1, #28
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fec7 	bl	8001478 <eth_send>
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
    frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 80006ee:	469c      	mov	ip, r3
    frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 80006f4:	469e      	mov	lr, r3
    frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	789b      	ldrb	r3, [r3, #2]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 80006fa:	461a      	mov	r2, r3
    frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	78db      	ldrb	r3, [r3, #3]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 8000700:	4619      	mov	r1, r3
    frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	791b      	ldrb	r3, [r3, #4]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 8000706:	4618      	mov	r0, r3
    frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 800070c:	461c      	mov	r4, r3
    msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	7e1b      	ldrb	r3, [r3, #24]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 8000712:	461d      	mov	r5, r3
    msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	7e5b      	ldrb	r3, [r3, #25]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 8000718:	461e      	mov	r6, r3
    msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	7e9b      	ldrb	r3, [r3, #26]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 800071e:	603b      	str	r3, [r7, #0]
    msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	7edb      	ldrb	r3, [r3, #27]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",
 8000724:	9307      	str	r3, [sp, #28]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	9306      	str	r3, [sp, #24]
 800072a:	9605      	str	r6, [sp, #20]
 800072c:	9504      	str	r5, [sp, #16]
 800072e:	9403      	str	r4, [sp, #12]
 8000730:	9002      	str	r0, [sp, #8]
 8000732:	9101      	str	r1, [sp, #4]
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	4673      	mov	r3, lr
 8000738:	4662      	mov	r2, ip
 800073a:	4927      	ldr	r1, [pc, #156]	; (80007d8 <arp_send+0x150>)
 800073c:	4827      	ldr	r0, [pc, #156]	; (80007dc <arp_send+0x154>)
 800073e:	f005 fd7f 	bl	8006240 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <arp_send+0x154>)
 8000744:	f7ff fd0c 	bl	8000160 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	4922      	ldr	r1, [pc, #136]	; (80007dc <arp_send+0x154>)
 8000752:	4823      	ldr	r0, [pc, #140]	; (80007e0 <arp_send+0x158>)
 8000754:	f004 fdeb 	bl	800532e <HAL_UART_Transmit>
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
    frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	799b      	ldrb	r3, [r3, #6]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 800075c:	469c      	mov	ip, r3
    frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	79db      	ldrb	r3, [r3, #7]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 8000762:	469e      	mov	lr, r3
    frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7a1b      	ldrb	r3, [r3, #8]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 8000768:	461a      	mov	r2, r3
    frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a5b      	ldrb	r3, [r3, #9]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 800076e:	4619      	mov	r1, r3
    frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7a9b      	ldrb	r3, [r3, #10]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 8000774:	4618      	mov	r0, r3
    frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7adb      	ldrb	r3, [r3, #11]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 800077a:	461c      	mov	r4, r3
    msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	7b9b      	ldrb	r3, [r3, #14]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 8000780:	461d      	mov	r5, r3
    msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	7bdb      	ldrb	r3, [r3, #15]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 8000786:	461e      	mov	r6, r3
    msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	7c1b      	ldrb	r3, [r3, #16]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 800078c:	603b      	str	r3, [r7, #0]
    msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	7c5b      	ldrb	r3, [r3, #17]
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",
 8000792:	9307      	str	r3, [sp, #28]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	9306      	str	r3, [sp, #24]
 8000798:	9605      	str	r6, [sp, #20]
 800079a:	9504      	str	r5, [sp, #16]
 800079c:	9403      	str	r4, [sp, #12]
 800079e:	9002      	str	r0, [sp, #8]
 80007a0:	9101      	str	r1, [sp, #4]
 80007a2:	9200      	str	r2, [sp, #0]
 80007a4:	4673      	mov	r3, lr
 80007a6:	4662      	mov	r2, ip
 80007a8:	490e      	ldr	r1, [pc, #56]	; (80007e4 <arp_send+0x15c>)
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <arp_send+0x154>)
 80007ac:	f005 fd48 	bl	8006240 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <arp_send+0x154>)
 80007b2:	f7ff fcd5 	bl	8000160 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	4907      	ldr	r1, [pc, #28]	; (80007dc <arp_send+0x154>)
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <arp_send+0x158>)
 80007c2:	f004 fdb4 	bl	800532e <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000010 	.word	0x20000010
 80007d8:	08008528 	.word	0x08008528
 80007dc:	20000384 	.word	0x20000384
 80007e0:	200004ac 	.word	0x200004ac
 80007e4:	08008554 	.word	0x08008554

080007e8 <arp_request>:
//-------------------функцию отправки ARP-запроса----------------------------
uint8_t arp_request(uint8_t *ip_addr)
{
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	b093      	sub	sp, #76	; 0x4c
 80007ec:	af0a      	add	r7, sp, #40	; 0x28
 80007ee:	60f8      	str	r0, [r7, #12]
	uint8_t i, j;
	uint8_t ip[4];
  uint8_t iptemp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	777b      	strb	r3, [r7, #29]
	for(i=0;i<4;i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	77fb      	strb	r3, [r7, #31]
 80007f8:	e013      	b.n	8000822 <arp_request+0x3a>
	{
		iptemp += (ip_addr[i] ^ ipaddr[i]) & ipmask[i];
 80007fa:	7ffb      	ldrb	r3, [r7, #31]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4413      	add	r3, r2
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	7ffb      	ldrb	r3, [r7, #31]
 8000804:	498d      	ldr	r1, [pc, #564]	; (8000a3c <arp_request+0x254>)
 8000806:	5ccb      	ldrb	r3, [r1, r3]
 8000808:	4053      	eors	r3, r2
 800080a:	b2da      	uxtb	r2, r3
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	498c      	ldr	r1, [pc, #560]	; (8000a40 <arp_request+0x258>)
 8000810:	5ccb      	ldrb	r3, [r1, r3]
 8000812:	4013      	ands	r3, r2
 8000814:	b2da      	uxtb	r2, r3
 8000816:	7f7b      	ldrb	r3, [r7, #29]
 8000818:	4413      	add	r3, r2
 800081a:	777b      	strb	r3, [r7, #29]
	for(i=0;i<4;i++)
 800081c:	7ffb      	ldrb	r3, [r7, #31]
 800081e:	3301      	adds	r3, #1
 8000820:	77fb      	strb	r3, [r7, #31]
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d9e8      	bls.n	80007fa <arp_request+0x12>
	}
	enc28j60_frame_ptr *frame=(void*)net_buf;
 8000828:	4b86      	ldr	r3, [pc, #536]	; (8000a44 <arp_request+0x25c>)
 800082a:	61bb      	str	r3, [r7, #24]
	//проверим принадлежность адреса к локальной сети
	if( iptemp == 0 ) memcpy(ip,ip_addr,4);
 800082c:	7f7b      	ldrb	r3, [r7, #29]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d103      	bne.n	800083a <arp_request+0x52>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	e002      	b.n	8000840 <arp_request+0x58>
 800083a:	4b83      	ldr	r3, [pc, #524]	; (8000a48 <arp_request+0x260>)
 800083c:	681b      	ldr	r3, [r3, #0]
	else memcpy(ip,ipgate,4);
 800083e:	613b      	str	r3, [r7, #16]
	//проверим, может такой адрес уже есть в таблице ARP, а задодно и удалим оттуда просроченные записи
	for(j=0;j<5;j++)
 8000840:	2300      	movs	r3, #0
 8000842:	77bb      	strb	r3, [r7, #30]
 8000844:	e0b1      	b.n	80009aa <arp_request+0x1c2>
  {
		//Если записи уже более 12 часов, то удалим её
		if((clock_cnt-arp_rec[j].sec)>43200)
 8000846:	4b81      	ldr	r3, [pc, #516]	; (8000a4c <arp_request+0x264>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	7fbb      	ldrb	r3, [r7, #30]
 800084c:	4980      	ldr	r1, [pc, #512]	; (8000a50 <arp_request+0x268>)
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	440b      	add	r3, r1
 8000852:	330c      	adds	r3, #12
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
 800085c:	4293      	cmp	r3, r2
 800085e:	d908      	bls.n	8000872 <arp_request+0x8a>
		{
			memset(arp_rec+(sizeof(arp_record_ptr)*j),0,sizeof(arp_record_ptr));
 8000860:	7fbb      	ldrb	r3, [r7, #30]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	4a7a      	ldr	r2, [pc, #488]	; (8000a50 <arp_request+0x268>)
 8000866:	4413      	add	r3, r2
 8000868:	2210      	movs	r2, #16
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f005 fbb5 	bl	8005fdc <memset>
		}
		if(!memcmp(arp_rec[j].ipaddr,ip,4))
 8000872:	7fbb      	ldrb	r3, [r7, #30]
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	4a76      	ldr	r2, [pc, #472]	; (8000a50 <arp_request+0x268>)
 8000878:	4413      	add	r3, r2
 800087a:	f107 0110 	add.w	r1, r7, #16
 800087e:	2204      	movs	r2, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f005 fb8d 	bl	8005fa0 <memcmp>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	f040 808b 	bne.w	80009a4 <arp_request+0x1bc>
		{
			//смотрим ARP-таблицу
			for(i=0;i<5;i++)
 800088e:	2300      	movs	r3, #0
 8000890:	77fb      	strb	r3, [r7, #31]
 8000892:	e06a      	b.n	800096a <arp_request+0x182>
			{
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
				arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 8000894:	7ffb      	ldrb	r3, [r7, #31]
 8000896:	4a6e      	ldr	r2, [pc, #440]	; (8000a50 <arp_request+0x268>)
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 800089e:	469c      	mov	ip, r3
				arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	4a6b      	ldr	r2, [pc, #428]	; (8000a50 <arp_request+0x268>)
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	4413      	add	r3, r2
 80008a8:	3301      	adds	r3, #1
 80008aa:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 80008ac:	469e      	mov	lr, r3
				arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 80008ae:	7ffb      	ldrb	r3, [r7, #31]
 80008b0:	4a67      	ldr	r2, [pc, #412]	; (8000a50 <arp_request+0x268>)
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	4413      	add	r3, r2
 80008b6:	3302      	adds	r3, #2
 80008b8:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 80008ba:	4619      	mov	r1, r3
				arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 80008bc:	7ffb      	ldrb	r3, [r7, #31]
 80008be:	4a64      	ldr	r2, [pc, #400]	; (8000a50 <arp_request+0x268>)
 80008c0:	011b      	lsls	r3, r3, #4
 80008c2:	4413      	add	r3, r2
 80008c4:	3303      	adds	r3, #3
 80008c6:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 80008c8:	4618      	mov	r0, r3
				arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80008ca:	7ffb      	ldrb	r3, [r7, #31]
 80008cc:	4a60      	ldr	r2, [pc, #384]	; (8000a50 <arp_request+0x268>)
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4413      	add	r3, r2
 80008d2:	3304      	adds	r3, #4
 80008d4:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 80008d6:	461c      	mov	r4, r3
				arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80008d8:	7ffb      	ldrb	r3, [r7, #31]
 80008da:	4a5d      	ldr	r2, [pc, #372]	; (8000a50 <arp_request+0x268>)
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	4413      	add	r3, r2
 80008e0:	3305      	adds	r3, #5
 80008e2:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 80008e4:	461d      	mov	r5, r3
				arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80008e6:	7ffb      	ldrb	r3, [r7, #31]
 80008e8:	4a59      	ldr	r2, [pc, #356]	; (8000a50 <arp_request+0x268>)
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4413      	add	r3, r2
 80008ee:	3306      	adds	r3, #6
 80008f0:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 80008f2:	461e      	mov	r6, r3
				arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],
 80008f4:	7ffb      	ldrb	r3, [r7, #31]
 80008f6:	4a56      	ldr	r2, [pc, #344]	; (8000a50 <arp_request+0x268>)
 80008f8:	011b      	lsls	r3, r3, #4
 80008fa:	4413      	add	r3, r2
 80008fc:	3307      	adds	r3, #7
 80008fe:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000900:	60bb      	str	r3, [r7, #8]
				arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],
 8000902:	7ffb      	ldrb	r3, [r7, #31]
 8000904:	4a52      	ldr	r2, [pc, #328]	; (8000a50 <arp_request+0x268>)
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	4413      	add	r3, r2
 800090a:	3308      	adds	r3, #8
 800090c:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 800090e:	607b      	str	r3, [r7, #4]
				arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],
 8000910:	7ffb      	ldrb	r3, [r7, #31]
 8000912:	4a4f      	ldr	r2, [pc, #316]	; (8000a50 <arp_request+0x268>)
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	4413      	add	r3, r2
 8000918:	3309      	adds	r3, #9
 800091a:	781b      	ldrb	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	7ffb      	ldrb	r3, [r7, #31]
				(unsigned long)arp_rec[i].sec);
 8000920:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <arp_request+0x268>)
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	4413      	add	r3, r2
 8000926:	330c      	adds	r3, #12
 8000928:	681b      	ldr	r3, [r3, #0]
				sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 800092a:	9308      	str	r3, [sp, #32]
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	9207      	str	r2, [sp, #28]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	9206      	str	r2, [sp, #24]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	9305      	str	r3, [sp, #20]
 8000938:	9604      	str	r6, [sp, #16]
 800093a:	9503      	str	r5, [sp, #12]
 800093c:	9402      	str	r4, [sp, #8]
 800093e:	9001      	str	r0, [sp, #4]
 8000940:	9100      	str	r1, [sp, #0]
 8000942:	4673      	mov	r3, lr
 8000944:	4662      	mov	r2, ip
 8000946:	4943      	ldr	r1, [pc, #268]	; (8000a54 <arp_request+0x26c>)
 8000948:	4843      	ldr	r0, [pc, #268]	; (8000a58 <arp_request+0x270>)
 800094a:	f005 fc79 	bl	8006240 <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800094e:	4842      	ldr	r0, [pc, #264]	; (8000a58 <arp_request+0x270>)
 8000950:	f7ff fc06 	bl	8000160 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	493e      	ldr	r1, [pc, #248]	; (8000a58 <arp_request+0x270>)
 800095e:	483f      	ldr	r0, [pc, #252]	; (8000a5c <arp_request+0x274>)
 8000960:	f004 fce5 	bl	800532e <HAL_UART_Transmit>
			for(i=0;i<5;i++)
 8000964:	7ffb      	ldrb	r3, [r7, #31]
 8000966:	3301      	adds	r3, #1
 8000968:	77fb      	strb	r3, [r7, #31]
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	2b04      	cmp	r3, #4
 800096e:	d991      	bls.n	8000894 <arp_request+0xac>
			}
			memcpy(frame->addr_dest,arp_rec[j].macaddr,6);
 8000970:	69b8      	ldr	r0, [r7, #24]
 8000972:	7fbb      	ldrb	r3, [r7, #30]
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <arp_request+0x268>)
 8000978:	4413      	add	r3, r2
 800097a:	3304      	adds	r3, #4
 800097c:	2206      	movs	r2, #6
 800097e:	4619      	mov	r1, r3
 8000980:	f005 fb1e 	bl	8005fc0 <memcpy>
			if((usartprop.is_ip==3)||(usartprop.is_ip==5)||(usartprop.is_ip==7))//статус отправки UDP-, ICMP- или NTP пакета
 8000984:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <arp_request+0x278>)
 8000986:	7e9b      	ldrb	r3, [r3, #26]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d007      	beq.n	800099c <arp_request+0x1b4>
 800098c:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <arp_request+0x278>)
 800098e:	7e9b      	ldrb	r3, [r3, #26]
 8000990:	2b05      	cmp	r3, #5
 8000992:	d003      	beq.n	800099c <arp_request+0x1b4>
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <arp_request+0x278>)
 8000996:	7e9b      	ldrb	r3, [r3, #26]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d101      	bne.n	80009a0 <arp_request+0x1b8>
			{
				net_cmd();
 800099c:	f001 f8ec 	bl	8001b78 <net_cmd>
			}
			return 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e047      	b.n	8000a34 <arp_request+0x24c>
	for(j=0;j<5;j++)
 80009a4:	7fbb      	ldrb	r3, [r7, #30]
 80009a6:	3301      	adds	r3, #1
 80009a8:	77bb      	strb	r3, [r7, #30]
 80009aa:	7fbb      	ldrb	r3, [r7, #30]
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	f67f af4a 	bls.w	8000846 <arp_request+0x5e>
		}
	}
	//сформируем пакет для ARP-запроса и отправим его в сеть
	arp_msg_ptr *msg=(void*)(frame->data);
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	330e      	adds	r3, #14
 80009b6:	617b      	str	r3, [r7, #20]
	msg->net_tp = ARP_ETH;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009be:	801a      	strh	r2, [r3, #0]
	msg->proto_tp = ARP_IP;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	2208      	movs	r2, #8
 80009c4:	805a      	strh	r2, [r3, #2]
	msg->macaddr_len = 6;
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2206      	movs	r2, #6
 80009ca:	711a      	strb	r2, [r3, #4]
	msg->ipaddr_len = 4;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2204      	movs	r2, #4
 80009d0:	715a      	strb	r2, [r3, #5]
	msg->op = ARP_REQUEST;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d8:	80da      	strh	r2, [r3, #6]
	memcpy(msg->macaddr_src,macaddr,6);
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3308      	adds	r3, #8
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <arp_request+0x27c>)
 80009e0:	6811      	ldr	r1, [r2, #0]
 80009e2:	6019      	str	r1, [r3, #0]
 80009e4:	8892      	ldrh	r2, [r2, #4]
 80009e6:	809a      	strh	r2, [r3, #4]
	memcpy(msg->ipaddr_src,ipaddr,4);
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	330e      	adds	r3, #14
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <arp_request+0x254>)
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	601a      	str	r2, [r3, #0]
	memcpy(msg->macaddr_dst,macnull,6);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3312      	adds	r3, #18
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <arp_request+0x280>)
 80009f8:	6810      	ldr	r0, [r2, #0]
 80009fa:	6018      	str	r0, [r3, #0]
 80009fc:	8892      	ldrh	r2, [r2, #4]
 80009fe:	809a      	strh	r2, [r3, #4]
	memcpy(msg->ipaddr_dst,ip,4);
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3318      	adds	r3, #24
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	601a      	str	r2, [r3, #0]
	memcpy(frame->addr_dest,macbroadcast,6);
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <arp_request+0x284>)
 8000a0c:	6810      	ldr	r0, [r2, #0]
 8000a0e:	6018      	str	r0, [r3, #0]
 8000a10:	8892      	ldrh	r2, [r2, #4]
 8000a12:	809a      	strh	r2, [r3, #4]
	memcpy(frame->addr_src,macaddr,6);
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	3306      	adds	r3, #6
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <arp_request+0x27c>)
 8000a1a:	6811      	ldr	r1, [r2, #0]
 8000a1c:	6019      	str	r1, [r3, #0]
 8000a1e:	8892      	ldrh	r2, [r2, #4]
 8000a20:	809a      	strh	r2, [r3, #4]
	frame->type = ETH_ARP;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	f44f 62c1 	mov.w	r2, #1544	; 0x608
 8000a28:	819a      	strh	r2, [r3, #12]
	enc28j60_packetSend((void*)frame,sizeof(arp_msg_ptr) + sizeof(enc28j60_frame_ptr));
 8000a2a:	212a      	movs	r1, #42	; 0x2a
 8000a2c:	69b8      	ldr	r0, [r7, #24]
 8000a2e:	f000 fb63 	bl	80010f8 <enc28j60_packetSend>
	return 1;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3724      	adds	r7, #36	; 0x24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3c:	20000010 	.word	0x20000010
 8000a40:	20000018 	.word	0x20000018
 8000a44:	20000180 	.word	0x20000180
 8000a48:	20000014 	.word	0x20000014
 8000a4c:	20000380 	.word	0x20000380
 8000a50:	20000114 	.word	0x20000114
 8000a54:	08008590 	.word	0x08008590
 8000a58:	20000384 	.word	0x20000384
 8000a5c:	200004ac 	.word	0x200004ac
 8000a60:	200003c4 	.word	0x200003c4
 8000a64:	20000008 	.word	0x20000008
 8000a68:	2000010c 	.word	0x2000010c
 8000a6c:	20000000 	.word	0x20000000

08000a70 <arp_table_fill>:
//-----------------Функция заполнения ARP таблицы---------------------------------
void arp_table_fill(enc28j60_frame_ptr *frame)
{
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	b091      	sub	sp, #68	; 0x44
 8000a74:	af0a      	add	r7, sp, #40	; 0x28
 8000a76:	60f8      	str	r0, [r7, #12]
	uint8_t i;
	arp_msg_ptr *msg=(void*)(frame->data);//указатель на ARP-сообщение
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	330e      	adds	r3, #14
 8000a7c:	613b      	str	r3, [r7, #16]
	memcpy(arp_rec[current_arp_index].ipaddr,msg->ipaddr_src,4);//Начнём добавлять запись
 8000a7e:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <arp_table_fill+0x154>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <arp_table_fill+0x158>)
 8000a86:	4413      	add	r3, r2
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	320e      	adds	r2, #14
 8000a8c:	6812      	ldr	r2, [r2, #0]
 8000a8e:	601a      	str	r2, [r3, #0]
	memcpy(arp_rec[current_arp_index].macaddr,msg->macaddr_src,6);//Начнём добавлять запись
 8000a90:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <arp_table_fill+0x154>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <arp_table_fill+0x158>)
 8000a98:	4413      	add	r3, r2
 8000a9a:	1d18      	adds	r0, r3, #4
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	3308      	adds	r3, #8
 8000aa0:	2206      	movs	r2, #6
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f005 fa8c 	bl	8005fc0 <memcpy>
	arp_rec[current_arp_index].sec = clock_cnt;//запись таблицы количество секунд, которые нам насчитал таймер
 8000aa8:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <arp_table_fill+0x154>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <arp_table_fill+0x15c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4945      	ldr	r1, [pc, #276]	; (8000bc8 <arp_table_fill+0x158>)
 8000ab4:	0103      	lsls	r3, r0, #4
 8000ab6:	440b      	add	r3, r1
 8000ab8:	330c      	adds	r3, #12
 8000aba:	601a      	str	r2, [r3, #0]
	if(current_arp_index<4) current_arp_index++;//увеличиваем позицию записи в таблице
 8000abc:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <arp_table_fill+0x154>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d806      	bhi.n	8000ad2 <arp_table_fill+0x62>
 8000ac4:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <arp_table_fill+0x154>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <arp_table_fill+0x154>)
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e002      	b.n	8000ad8 <arp_table_fill+0x68>
	else current_arp_index=0;
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <arp_table_fill+0x154>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	//по окончанию функции посмотрим ARP таблицу
	for(i=0;i<5;i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	75fb      	strb	r3, [r7, #23]
 8000adc:	e06a      	b.n	8000bb4 <arp_table_fill+0x144>
  {
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
      arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <arp_table_fill+0x158>)
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000ae8:	469c      	mov	ip, r3
      arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <arp_table_fill+0x158>)
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	4413      	add	r3, r2
 8000af2:	3301      	adds	r3, #1
 8000af4:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000af6:	469e      	mov	lr, r3
      arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
 8000afa:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <arp_table_fill+0x158>)
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	4413      	add	r3, r2
 8000b00:	3302      	adds	r3, #2
 8000b02:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b04:	4619      	mov	r1, r3
      arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
 8000b08:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <arp_table_fill+0x158>)
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3303      	adds	r3, #3
 8000b10:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b12:	4618      	mov	r0, r3
      arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <arp_table_fill+0x158>)
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	4413      	add	r3, r2
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b20:	461c      	mov	r4, r3
      arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <arp_table_fill+0x158>)
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	4413      	add	r3, r2
 8000b2a:	3305      	adds	r3, #5
 8000b2c:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b2e:	461d      	mov	r5, r3
      arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <arp_table_fill+0x158>)
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	4413      	add	r3, r2
 8000b38:	3306      	adds	r3, #6
 8000b3a:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b3c:	461e      	mov	r6, r3
      arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <arp_table_fill+0x158>)
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	4413      	add	r3, r2
 8000b46:	3307      	adds	r3, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b4a:	60bb      	str	r3, [r7, #8]
      arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <arp_table_fill+0x158>)
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	4413      	add	r3, r2
 8000b54:	3308      	adds	r3, #8
 8000b56:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b58:	607b      	str	r3, [r7, #4]
      arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <arp_table_fill+0x158>)
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	4413      	add	r3, r2
 8000b62:	3309      	adds	r3, #9
 8000b64:	781b      	ldrb	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
      (unsigned long)arp_rec[i].sec);
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <arp_table_fill+0x158>)
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	4413      	add	r3, r2
 8000b70:	330c      	adds	r3, #12
 8000b72:	681b      	ldr	r3, [r3, #0]
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X - %lu\r\n",
 8000b74:	9308      	str	r3, [sp, #32]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	9207      	str	r2, [sp, #28]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	9206      	str	r2, [sp, #24]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	9305      	str	r3, [sp, #20]
 8000b82:	9604      	str	r6, [sp, #16]
 8000b84:	9503      	str	r5, [sp, #12]
 8000b86:	9402      	str	r4, [sp, #8]
 8000b88:	9001      	str	r0, [sp, #4]
 8000b8a:	9100      	str	r1, [sp, #0]
 8000b8c:	4673      	mov	r3, lr
 8000b8e:	4662      	mov	r2, ip
 8000b90:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <arp_table_fill+0x160>)
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <arp_table_fill+0x164>)
 8000b94:	f005 fb54 	bl	8006240 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000b98:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <arp_table_fill+0x164>)
 8000b9a:	f7ff fae1 	bl	8000160 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	490b      	ldr	r1, [pc, #44]	; (8000bd4 <arp_table_fill+0x164>)
 8000ba8:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <arp_table_fill+0x168>)
 8000baa:	f004 fbc0 	bl	800532e <HAL_UART_Transmit>
	for(i=0;i<5;i++)
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	75fb      	strb	r3, [r7, #23]
 8000bb4:	7dfb      	ldrb	r3, [r7, #23]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d991      	bls.n	8000ade <arp_table_fill+0x6e>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc4:	20000164 	.word	0x20000164
 8000bc8:	20000114 	.word	0x20000114
 8000bcc:	20000380 	.word	0x20000380
 8000bd0:	08008590 	.word	0x08008590
 8000bd4:	20000384 	.word	0x20000384
 8000bd8:	200004ac 	.word	0x200004ac

08000bdc <DelayMicro>:
static uint8_t Enc28j60Bank;//переменная для хранения номера текущего банка
static int gNextPacketPtr;
uint8_t macaddr[6]=MAC_ADDR;//наш физический адрес
//----------------функцию задержки в микросекундах-------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 5;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <DelayMicro+0x34>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <DelayMicro+0x38>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	0d5b      	lsrs	r3, r3, #21
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--) ;
 8000bf8:	bf00      	nop
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1fa      	bne.n	8000bfa <DelayMicro+0x1e>
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000020 	.word	0x20000020
 8000c14:	6b5fca6b 	.word	0x6b5fca6b

08000c18 <Error>:
//-----------------------------------------------
static void Error (void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
	//LD_ON;
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SPIx_WriteRead>:
//------------------функция для работы с шиной SPI -----------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000c32:	f107 020f 	add.w	r2, r7, #15
 8000c36:	1df9      	adds	r1, r7, #7
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <SPIx_WriteRead+0x38>)
 8000c42:	f003 fce5 	bl	8004610 <HAL_SPI_TransmitReceive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SPIx_WriteRead+0x2c>
	{
		Error();
 8000c4c:	f7ff ffe4 	bl	8000c18 <Error>
	}
	return receivedbyte;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000400 	.word	0x20000400

08000c60 <SPI_SendByte>:
//-----------------функция для работы с шиной SPI------------------------------
void SPI_SendByte(uint8_t bt)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffd9 	bl	8000c24 <SPIx_WriteRead>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <SPI_ReceiveByte>:
//----------------функция для работы с шиной SPI-------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 8000c80:	20ff      	movs	r0, #255	; 0xff
 8000c82:	f7ff ffcf 	bl	8000c24 <SPIx_WriteRead>
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	return bt;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <enc28j60_writeOp>:
//-----------------Операция записи байта в регистр------------------------------
void enc28j60_writeOp(uint8_t op, uint8_t addres, uint8_t data)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	71bb      	strb	r3, [r7, #6]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	717b      	strb	r3, [r7, #5]
	SS_SELECT();
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <enc28j60_writeOp+0x54>)
 8000cae:	f002 ffe1 	bl	8003c74 <HAL_GPIO_WritePin>
	SPI_SendByte(op|(addres&ADDR_MASK));
 8000cb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ffca 	bl	8000c60 <SPI_SendByte>
	SPI_SendByte(data);
 8000ccc:	797b      	ldrb	r3, [r7, #5]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffc6 	bl	8000c60 <SPI_SendByte>
	SS_DESELECT();
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cda:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <enc28j60_writeOp+0x54>)
 8000cdc:	f002 ffca 	bl	8003c74 <HAL_GPIO_WritePin>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40011000 	.word	0x40011000

08000cec <enc28j60_readOp>:
//-----------------операция чтения------------------------------
static uint8_t enc28j60_readOp(uint8_t op, uint8_t addres)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
	uint8_t result;
	SS_SELECT();
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <enc28j60_readOp+0x68>)
 8000d04:	f002 ffb6 	bl	8003c74 <HAL_GPIO_WritePin>
	SPI_SendByte(op|(addres&ADDR_MASK));
 8000d08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff9f 	bl	8000c60 <SPI_SendByte>
	SPI_SendByte(0x00);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff9c 	bl	8000c60 <SPI_SendByte>
	//пропускаем ложный байт
	if(addres & 0x80) SPI_ReceiveByte();
 8000d28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	da01      	bge.n	8000d34 <enc28j60_readOp+0x48>
 8000d30:	f7ff ffa3 	bl	8000c7a <SPI_ReceiveByte>
	result = SPI_ReceiveByte();
 8000d34:	f7ff ffa1 	bl	8000c7a <SPI_ReceiveByte>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	73fb      	strb	r3, [r7, #15]
	SS_DESELECT();
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <enc28j60_readOp+0x68>)
 8000d44:	f002 ff96 	bl	8003c74 <HAL_GPIO_WritePin>
	return result;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40011000 	.word	0x40011000

08000d58 <enc28j60_readBuf>:
//-------------------чтение буфера----------------------------
static void enc28j60_readBuf(uint16_t len, uint8_t* data)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	80fb      	strh	r3, [r7, #6]
	SS_SELECT();
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <enc28j60_readBuf+0x50>)
 8000d6c:	f002 ff82 	bl	8003c74 <HAL_GPIO_WritePin>
	SPI_SendByte(ENC28J60_READ_BUF_MEM);
 8000d70:	203a      	movs	r0, #58	; 0x3a
 8000d72:	f7ff ff75 	bl	8000c60 <SPI_SendByte>
	while(len--){
 8000d76:	e007      	b.n	8000d88 <enc28j60_readBuf+0x30>
		*data++=SPIx_WriteRead(0x00);
 8000d78:	683c      	ldr	r4, [r7, #0]
 8000d7a:	1c63      	adds	r3, r4, #1
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff ff50 	bl	8000c24 <SPIx_WriteRead>
 8000d84:	4603      	mov	r3, r0
 8000d86:	7023      	strb	r3, [r4, #0]
	while(len--){
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	80fa      	strh	r2, [r7, #6]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f2      	bne.n	8000d78 <enc28j60_readBuf+0x20>
	}
	SS_DESELECT();
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <enc28j60_readBuf+0x50>)
 8000d9a:	f002 ff6b 	bl	8003c74 <HAL_GPIO_WritePin>
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40011000 	.word	0x40011000

08000dac <enc28j60_writeBuf>:
//--------------------запись буфера---------------------------
static void enc28j60_writeBuf(uint16_t len, uint8_t* data)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	80fb      	strh	r3, [r7, #6]
	SS_SELECT();
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	480e      	ldr	r0, [pc, #56]	; (8000df8 <enc28j60_writeBuf+0x4c>)
 8000dc0:	f002 ff58 	bl	8003c74 <HAL_GPIO_WritePin>
	SPI_SendByte(ENC28J60_WRITE_BUF_MEM);
 8000dc4:	207a      	movs	r0, #122	; 0x7a
 8000dc6:	f7ff ff4b 	bl	8000c60 <SPI_SendByte>
	while(len--)
 8000dca:	e006      	b.n	8000dda <enc28j60_writeBuf+0x2e>
		SPI_SendByte(*data++);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	603a      	str	r2, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff43 	bl	8000c60 <SPI_SendByte>
	while(len--)
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	80fa      	strh	r2, [r7, #6]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f3      	bne.n	8000dcc <enc28j60_writeBuf+0x20>
	SS_DESELECT();
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <enc28j60_writeBuf+0x4c>)
 8000dec:	f002 ff42 	bl	8003c74 <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40011000 	.word	0x40011000

08000dfc <enc28j60_SetBank>:
//-----------------функция установки текущего банка------------------------------
void enc28j60_SetBank(uint8_t addres)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if((addres&BANK_MASK)!=Enc28j60Bank)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <enc28j60_SetBank+0x48>)
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d013      	beq.n	8000e3c <enc28j60_SetBank+0x40>
	{
		enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_BSEL1|ECON1_BSEL0);
 8000e14:	2203      	movs	r2, #3
 8000e16:	211f      	movs	r1, #31
 8000e18:	20a0      	movs	r0, #160	; 0xa0
 8000e1a:	f7ff ff3b 	bl	8000c94 <enc28j60_writeOp>
		Enc28j60Bank = addres&BANK_MASK;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <enc28j60_SetBank+0x48>)
 8000e28:	701a      	strb	r2, [r3, #0]
		enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <enc28j60_SetBank+0x48>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	211f      	movs	r1, #31
 8000e36:	2080      	movs	r0, #128	; 0x80
 8000e38:	f7ff ff2c 	bl	8000c94 <enc28j60_writeOp>
	}
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000165 	.word	0x20000165

08000e48 <enc28j60_writeRegByte>:
//-------------------запись обычного регистра управленния----------------------------
void enc28j60_writeRegByte(uint8_t addres, uint8_t data)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
	enc28j60_SetBank(addres);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffce 	bl	8000dfc <enc28j60_SetBank>
	enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 8000e60:	79ba      	ldrb	r2, [r7, #6]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4619      	mov	r1, r3
 8000e66:	2040      	movs	r0, #64	; 0x40
 8000e68:	f7ff ff14 	bl	8000c94 <enc28j60_writeOp>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <enc28j60_readRegByte>:
//---------------------чтение обычного регистра управления--------------------------
static uint8_t enc28j60_readRegByte(uint8_t addres)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	enc28j60_SetBank(addres);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffbb 	bl	8000dfc <enc28j60_SetBank>
	return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff2e 	bl	8000cec <enc28j60_readOp>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <enc28j60_writeReg>:
//--------------------запись данных в двухбайтовые регистры---------------------------
void enc28j60_writeReg(uint8_t addres, uint16_t data)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	80bb      	strh	r3, [r7, #4]
	enc28j60_writeRegByte(addres, data);
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ffc8 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(addres+1, data>>8);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4610      	mov	r0, r2
 8000eca:	f7ff ffbd 	bl	8000e48 <enc28j60_writeRegByte>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <enc28j60_writePhy>:
//------------------запись в регистр Phy-----------------------------
static void enc28j60_writePhy(uint8_t addres, uint16_t data)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	460a      	mov	r2, r1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	80bb      	strh	r3, [r7, #4]
	enc28j60_writeRegByte(MIREGADR, addres);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	20d4      	movs	r0, #212	; 0xd4
 8000eec:	f7ff ffac 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MIWR, data);
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	20d6      	movs	r0, #214	; 0xd6
 8000ef8:	f7ff ffa6 	bl	8000e48 <enc28j60_writeRegByte>
	while(enc28j60_readRegByte(MISTAT)&MISTAT_BUSY)
 8000efc:	bf00      	nop
 8000efe:	20ea      	movs	r0, #234	; 0xea
 8000f00:	f7ff ffb8 	bl	8000e74 <enc28j60_readRegByte>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f7      	bne.n	8000efe <enc28j60_writePhy+0x28>
	;
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <enc28j60_ini>:
//-----------------------------------------------
void enc28j60_ini(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	//LD_OFF;
	enc28j60_writeOp(ENC28J60_SOFT_RESET,ENC28J60_SOFT_RESET,0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	21ff      	movs	r1, #255	; 0xff
 8000f20:	20ff      	movs	r0, #255	; 0xff
 8000f22:	f7ff feb7 	bl	8000c94 <enc28j60_writeOp>
	HAL_Delay(2);
 8000f26:	2002      	movs	r0, #2
 8000f28:	f002 fb32 	bl	8003590 <HAL_Delay>
	//проверим, что всё перезагрузилось
	while(!enc28j60_readOp(ENC28J60_READ_CTRL_REG,ESTAT)&ESTAT_CLKRDY)
 8000f2c:	bf00      	nop
 8000f2e:	211d      	movs	r1, #29
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fedb 	bl	8000cec <enc28j60_readOp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f8      	beq.n	8000f2e <enc28j60_ini+0x16>
		;
	//настроим буферы
	enc28j60_writeReg(ERXST,RXSTART_INIT);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2008      	movs	r0, #8
 8000f40:	f7ff ffab 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeReg(ERXRDPT,RXSTART_INIT);
 8000f44:	2100      	movs	r1, #0
 8000f46:	200c      	movs	r0, #12
 8000f48:	f7ff ffa7 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeReg(ERXND,RXSTOP_INIT);
 8000f4c:	f640 31ff 	movw	r1, #3071	; 0xbff
 8000f50:	200a      	movs	r0, #10
 8000f52:	f7ff ffa2 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeReg(ETXST,TXSTART_INIT);
 8000f56:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f5a:	2004      	movs	r0, #4
 8000f5c:	f7ff ff9d 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeReg(ETXND,TXSTOP_INIT);
 8000f60:	f241 11ff 	movw	r1, #4607	; 0x11ff
 8000f64:	2006      	movs	r0, #6
 8000f66:	f7ff ff98 	bl	8000e9a <enc28j60_writeReg>
	//Enable Broadcast
	enc28j60_writeRegByte(ERXFCON,enc28j60_readRegByte(ERXFCON)|ERXFCON_BCEN);
 8000f6a:	2038      	movs	r0, #56	; 0x38
 8000f6c:	f7ff ff82 	bl	8000e74 <enc28j60_readRegByte>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2038      	movs	r0, #56	; 0x38
 8000f7c:	f7ff ff64 	bl	8000e48 <enc28j60_writeRegByte>
	//настраиваем канальный уровень
	enc28j60_writeRegByte(MACON1,MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8000f80:	210d      	movs	r1, #13
 8000f82:	20c0      	movs	r0, #192	; 0xc0
 8000f84:	f7ff ff60 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MACON2,0x00);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	20c1      	movs	r0, #193	; 0xc1
 8000f8c:	f7ff ff5c 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,MACON3,MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 8000f90:	2232      	movs	r2, #50	; 0x32
 8000f92:	21c2      	movs	r1, #194	; 0xc2
 8000f94:	2080      	movs	r0, #128	; 0x80
 8000f96:	f7ff fe7d 	bl	8000c94 <enc28j60_writeOp>
	enc28j60_writeReg(MAIPG,0x0C12);
 8000f9a:	f640 4112 	movw	r1, #3090	; 0xc12
 8000f9e:	20c6      	movs	r0, #198	; 0xc6
 8000fa0:	f7ff ff7b 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeRegByte(MABBIPG,0x12);//промежуток между фреймами
 8000fa4:	2112      	movs	r1, #18
 8000fa6:	20c4      	movs	r0, #196	; 0xc4
 8000fa8:	f7ff ff4e 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//максимальный размер фрейма
 8000fac:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000fb0:	20ca      	movs	r0, #202	; 0xca
 8000fb2:	f7ff ff72 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <enc28j60_ini+0x128>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	20e4      	movs	r0, #228	; 0xe4
 8000fbe:	f7ff ff43 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MAADR4,macaddr[1]);
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <enc28j60_ini+0x128>)
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	20e5      	movs	r0, #229	; 0xe5
 8000fca:	f7ff ff3d 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MAADR3,macaddr[2]);
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <enc28j60_ini+0x128>)
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	20e2      	movs	r0, #226	; 0xe2
 8000fd6:	f7ff ff37 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MAADR2,macaddr[3]);
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <enc28j60_ini+0x128>)
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	20e3      	movs	r0, #227	; 0xe3
 8000fe2:	f7ff ff31 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MAADR1,macaddr[4]);
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <enc28j60_ini+0x128>)
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	20e0      	movs	r0, #224	; 0xe0
 8000fee:	f7ff ff2b 	bl	8000e48 <enc28j60_writeRegByte>
	enc28j60_writeRegByte(MAADR0,macaddr[5]);
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <enc28j60_ini+0x128>)
 8000ff4:	795b      	ldrb	r3, [r3, #5]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	20e1      	movs	r0, #225	; 0xe1
 8000ffa:	f7ff ff25 	bl	8000e48 <enc28j60_writeRegByte>
	//настраиваем физический уровень
	enc28j60_writePhy(PHCON2,PHCON2_HDLDIS);//отключаем loopback
 8000ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001002:	2010      	movs	r0, #16
 8001004:	f7ff ff67 	bl	8000ed6 <enc28j60_writePhy>
	enc28j60_writePhy(PHLCON,PHLCON_LACFG2| //светодиоды
 8001008:	f240 4176 	movw	r1, #1142	; 0x476
 800100c:	2014      	movs	r0, #20
 800100e:	f7ff ff62 	bl	8000ed6 <enc28j60_writePhy>
		PHLCON_LBCFG2|PHLCON_LBCFG1|PHLCON_LBCFG0|
		PHLCON_LFRQ0|PHLCON_STRCH);
	enc28j60_SetBank(ECON1);
 8001012:	201f      	movs	r0, #31
 8001014:	f7ff fef2 	bl	8000dfc <enc28j60_SetBank>
	enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,EIE,EIE_INTIE|EIE_PKTIE);
 8001018:	22c0      	movs	r2, #192	; 0xc0
 800101a:	211b      	movs	r1, #27
 800101c:	2080      	movs	r0, #128	; 0x80
 800101e:	f7ff fe39 	bl	8000c94 <enc28j60_writeOp>
	enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_RXEN);//разрешаем приём пакетов
 8001022:	2204      	movs	r2, #4
 8001024:	211f      	movs	r1, #31
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f7ff fe34 	bl	8000c94 <enc28j60_writeOp>
	//Включим делитель частоты генератора 2
	enc28j60_writeRegByte(ECOCON,0x02);
 800102c:	2102      	movs	r1, #2
 800102e:	2075      	movs	r0, #117	; 0x75
 8001030:	f7ff ff0a 	bl	8000e48 <enc28j60_writeRegByte>
	DelayMicro(15);
 8001034:	200f      	movs	r0, #15
 8001036:	f7ff fdd1 	bl	8000bdc <DelayMicro>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <enc28j60_packetReceive>:
//-------------------функция приема пакета и его последующего возврата----------------------------
uint16_t enc28j60_packetReceive(uint8_t* buf, uint16_t buflen)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
	uint16_t len=0;
 8001050:	2300      	movs	r3, #0
 8001052:	81fb      	strh	r3, [r7, #14]
	if(enc28j60_readRegByte(EPKTCNT)>0)//проверка количества принятых на данный момент пакетов
 8001054:	2039      	movs	r0, #57	; 0x39
 8001056:	f7ff ff0d 	bl	8000e74 <enc28j60_readRegByte>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d044      	beq.n	80010ea <enc28j60_packetReceive+0xa6>
	{
		enc28j60_writeReg(ERDPT,gNextPacketPtr);// установим указатель в регистр ERDPT установим указатель
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <enc28j60_packetReceive+0xb0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4619      	mov	r1, r3
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff16 	bl	8000e9a <enc28j60_writeReg>
		struct{
			uint16_t nextPacket;
			uint16_t byteCount;
			uint16_t status;
		} header;
		enc28j60_readBuf(sizeof(header), (uint8_t*)&header);//считаем заголовок пакета, содержащий укзатель на следующий пакет, количество байтов и статус пакета
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4619      	mov	r1, r3
 8001074:	2006      	movs	r0, #6
 8001076:	f7ff fe6f 	bl	8000d58 <enc28j60_readBuf>
		gNextPacketPtr=header.nextPacket;//запись значения указателя в глобальную переменную
 800107a:	893b      	ldrh	r3, [r7, #8]
 800107c:	461a      	mov	r2, r3
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <enc28j60_packetReceive+0xb0>)
 8001080:	601a      	str	r2, [r3, #0]
		len = header.byteCount-4;//Инициализируем переменную длины пакеты, отрезав от неё контрольную сумму
 8001082:	897b      	ldrh	r3, [r7, #10]
 8001084:	3b04      	subs	r3, #4
 8001086:	81fb      	strh	r3, [r7, #14]
		if(len>buflen) len=buflen;//Укоротим длину до заданной во входном параметре
 8001088:	89fa      	ldrh	r2, [r7, #14]
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	429a      	cmp	r2, r3
 800108e:	d901      	bls.n	8001094 <enc28j60_packetReceive+0x50>
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	81fb      	strh	r3, [r7, #14]
		if((header.status&0x80)==0) len=0;//Проверим статус и считаем буфер
 8001094:	89bb      	ldrh	r3, [r7, #12]
 8001096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <enc28j60_packetReceive+0x60>
 800109e:	2300      	movs	r3, #0
 80010a0:	81fb      	strh	r3, [r7, #14]
 80010a2:	e004      	b.n	80010ae <enc28j60_packetReceive+0x6a>
		else enc28j60_readBuf(len, buf);
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe55 	bl	8000d58 <enc28j60_readBuf>
		buf[len]=0;//Завершим буфер нулём
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
		if(gNextPacketPtr-1>RXSTOP_INIT)//Инициализируем указатель буфера на адрес следующего пакета
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <enc28j60_packetReceive+0xb0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80010c0:	dd05      	ble.n	80010ce <enc28j60_packetReceive+0x8a>
			enc28j60_writeReg(ERXRDPT, RXSTOP_INIT);
 80010c2:	f640 31ff 	movw	r1, #3071	; 0xbff
 80010c6:	200c      	movs	r0, #12
 80010c8:	f7ff fee7 	bl	8000e9a <enc28j60_writeReg>
 80010cc:	e008      	b.n	80010e0 <enc28j60_packetReceive+0x9c>
		else
			enc28j60_writeReg(ERXRDPT, gNextPacketPtr-1);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <enc28j60_packetReceive+0xb0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	200c      	movs	r0, #12
 80010dc:	f7ff fedd 	bl	8000e9a <enc28j60_writeReg>
		enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON2,ECON2_PKTDEC);//Счётчик принятых пакетов также уменьшим на 1 и выйдем из условия
 80010e0:	2240      	movs	r2, #64	; 0x40
 80010e2:	211e      	movs	r1, #30
 80010e4:	2080      	movs	r0, #128	; 0x80
 80010e6:	f7ff fdd5 	bl	8000c94 <enc28j60_writeOp>
	}
	return len;//Возвратим длину принятого пакета
 80010ea:	89fb      	ldrh	r3, [r7, #14]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000168 	.word	0x20000168

080010f8 <enc28j60_packetSend>:
//-----------------функция передачи пакетов------------------------------
void enc28j60_packetSend(uint8_t* buf, uint16_t buflen)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
	//Подождём, пока установится бит TXRTS в регистре ECON1, что означает готовность нашего передатчика передавать информацию
	while(!(enc28j60_readOp(ENC28J60_READ_CTRL_REG,ECON1))&ECON1_TXRTS)
 8001104:	bf00      	nop
 8001106:	211f      	movs	r1, #31
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fdef 	bl	8000cec <enc28j60_readOp>
			enc28j60_writeOp(ENC28J60_BIT_FIELD_SET, ECON1,ECON1_TXRST);
			enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR, ECON1,ECON1_TXRST);
		}
	}
	//записываем и отправляем пакет
	enc28j60_writeReg(EWRPT, TXSTART_INIT);
 800110e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001112:	2002      	movs	r0, #2
 8001114:	f7ff fec1 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeReg(ETXND, TXSTART_INIT+buflen);
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800111e:	b29b      	uxth	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	2006      	movs	r0, #6
 8001124:	f7ff feb9 	bl	8000e9a <enc28j60_writeReg>
	enc28j60_writeBuf(1,(uint8_t*)"\x00");
 8001128:	4908      	ldr	r1, [pc, #32]	; (800114c <enc28j60_packetSend+0x54>)
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff fe3e 	bl	8000dac <enc28j60_writeBuf>
	enc28j60_writeBuf(buflen,buf);
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fe39 	bl	8000dac <enc28j60_writeBuf>
	enc28j60_writeOp(ENC28J60_BIT_FIELD_SET, ECON1,ECON1_TXRTS);
 800113a:	2208      	movs	r2, #8
 800113c:	211f      	movs	r1, #31
 800113e:	2080      	movs	r0, #128	; 0x80
 8001140:	f7ff fda8 	bl	8000c94 <enc28j60_writeOp>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	080085c4 	.word	0x080085c4

08001150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001164:	4b2d      	ldr	r3, [pc, #180]	; (800121c <MX_GPIO_Init+0xcc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a2c      	ldr	r2, [pc, #176]	; (800121c <MX_GPIO_Init+0xcc>)
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <MX_GPIO_Init+0xcc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <MX_GPIO_Init+0xcc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <MX_GPIO_Init+0xcc>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <MX_GPIO_Init+0xcc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_GPIO_Init+0xcc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <MX_GPIO_Init+0xcc>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_GPIO_Init+0xcc>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_GPIO_Init+0xcc>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a1a      	ldr	r2, [pc, #104]	; (800121c <MX_GPIO_Init+0xcc>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_GPIO_Init+0xcc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2104      	movs	r1, #4
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <MX_GPIO_Init+0xd0>)
 80011ca:	f002 fd53 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_GPIO_Init+0xd4>)
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_GPIO_Init+0xd8>)
 80011e4:	f002 fbc2 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e8:	2304      	movs	r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4619      	mov	r1, r3
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <MX_GPIO_Init+0xd0>)
 8001200:	f002 fbb4 	bl	800396c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2028      	movs	r0, #40	; 0x28
 800120a:	f002 fabc 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f002 fad5 	bl	80037be <HAL_NVIC_EnableIRQ>

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000
 8001220:	40011400 	.word	0x40011400
 8001224:	10110000 	.word	0x10110000
 8001228:	40011000 	.word	0x40011000

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f002 f94c 	bl	80034cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f81a 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f7ff ff8a 	bl	8001150 <MX_GPIO_Init>
  MX_SPI2_Init();
 800123c:	f000 ff3e 	bl	80020bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001240:	f002 f8a2 	bl	8003388 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001244:	f001 fe52 	bl	8002eec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	net_ini();
 8001248:	f000 f88c 	bl	8001364 <net_ini>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)str,1);// функцию приёма USART
 800124c:	2201      	movs	r2, #1
 800124e:	4904      	ldr	r1, [pc, #16]	; (8001260 <main+0x34>)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <main+0x38>)
 8001252:	f004 f8fe 	bl	8005452 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <main+0x3c>)
 8001258:	f003 fc72 	bl	8004b40 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125c:	e7fe      	b.n	800125c <main+0x30>
 800125e:	bf00      	nop
 8001260:	2000016c 	.word	0x2000016c
 8001264:	200004ac 	.word	0x200004ac
 8001268:	20000464 	.word	0x20000464

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b090      	sub	sp, #64	; 0x40
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f004 feae 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fd0d 	bl	8003cd4 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012c0:	f000 f84b 	bl	800135a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ff7a 	bl	80041d8 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ea:	f000 f836 	bl	800135a <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3740      	adds	r7, #64	; 0x40
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//-------------------официальная функцию-обработчик---------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(huart==&huart2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_UART_RxCpltCallback+0x1c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_UART_RxCpltCallback+0x14>
  {
    UART2_RxCpltCallback();
 8001308:	f000 fcf2 	bl	8001cf0 <UART2_RxCpltCallback>
  }
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004ac 	.word	0x200004ac

08001318 <HAL_TIM_PeriodElapsedCallback>:
//----------------------------------------------------------

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim==&htim2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    TIM_PeriodElapsedCallback();
 8001328:	f000 fd30 	bl	8001d8c <TIM_PeriodElapsedCallback>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000464 	.word	0x20000464

08001338 <HAL_GPIO_EXTI_Callback>:
//----------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_12){
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001348:	d102      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x18>
    net_poll();
 800134a:	f000 fbf9 	bl	8001b40 <net_poll>
  } else{
    __NOP();
  }
}
 800134e:	e000      	b.n	8001352 <HAL_GPIO_EXTI_Callback+0x1a>
    __NOP();
 8001350:	bf00      	nop
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135e:	b672      	cpsid	i
}
 8001360:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001362:	e7fe      	b.n	8001362 <Error_Handler+0x8>

08001364 <net_ini>:
extern char str[20];
USART_prop_ptr usartprop;
extern ntp_prop_ptr ntpprop;
//-----------------------------------------------
void net_ini(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	usartprop.usart_buf[0]=0;//инициализируем свойства
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <net_ini+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
	usartprop.usart_cnt=0;//инициализируем свойства
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <net_ini+0x40>)
 8001370:	2200      	movs	r2, #0
 8001372:	765a      	strb	r2, [r3, #25]
	usartprop.is_ip=0;//инициализируем свойства
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <net_ini+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	769a      	strb	r2, [r3, #26]
	HAL_UART_Transmit(&huart2,(uint8_t*)"123456\r\n",8,0x1000);
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	2208      	movs	r2, #8
 8001380:	4909      	ldr	r1, [pc, #36]	; (80013a8 <net_ini+0x44>)
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <net_ini+0x48>)
 8001384:	f003 ffd3 	bl	800532e <HAL_UART_Transmit>
	enc28j60_ini();//функция инициализации enc28j60
 8001388:	f7ff fdc6 	bl	8000f18 <enc28j60_ini>
	ntpprop.set=0;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <net_ini+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	721a      	strb	r2, [r3, #8]
	ntpprop.ntp_cnt=0;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <net_ini+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	ntpprop.ntp_timer=0;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <net_ini+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200003c4 	.word	0x200003c4
 80013a8:	080085c8 	.word	0x080085c8
 80013ac:	200004ac 	.word	0x200004ac
 80013b0:	200003e8 	.word	0x200003e8

080013b4 <checksum>:
//-----------------Расчёт контрольной суммы заголовка------------------------------
uint16_t checksum(uint8_t *ptr, uint16_t len, uint8_t type)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
	uint32_t sum=0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
	if(type==1)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <checksum+0x2a>
	{
		sum+=IP_UDP;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3311      	adds	r3, #17
 80013d2:	60fb      	str	r3, [r7, #12]
		sum+=len-8;
 80013d4:	887a      	ldrh	r2, [r7, #2]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	3b08      	subs	r3, #8
 80013dc:	60fb      	str	r3, [r7, #12]
	}
	if(type==2)
 80013de:	787b      	ldrb	r3, [r7, #1]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d11d      	bne.n	8001420 <checksum+0x6c>
	{
		sum+=IP_TCP;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3306      	adds	r3, #6
 80013e8:	60fb      	str	r3, [r7, #12]
		sum+=len-8;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	3b08      	subs	r3, #8
 80013f2:	60fb      	str	r3, [r7, #12]
	}
	while(len>0)//цикл, отслеживающий окончание заголовка
 80013f4:	e014      	b.n	8001420 <checksum+0x6c>
	{
		sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));//посчитаем и прибавим к общей сумме очередную двухбайтовую величину
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
		ptr+=2;//сместим указатель дальше на 2 пункта
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3302      	adds	r3, #2
 8001418:	607b      	str	r3, [r7, #4]
		len-=2;//значение длины заголовка уменьшим на 2
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	3b02      	subs	r3, #2
 800141e:	807b      	strh	r3, [r7, #2]
	while(len>0)//цикл, отслеживающий окончание заголовка
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1e7      	bne.n	80013f6 <checksum+0x42>
	}
	if(len) sum+=((uint32_t)*ptr)<<8;//роверим длину заголовка на чётность
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00d      	beq.n	8001448 <checksum+0x94>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4413      	add	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
	//постоянно складываем между собой старшую и младшую части суммы до тех пор, пока сумма не уместится в 16-битный размер
	while(sum>>16) sum=(uint16_t)sum+(sum>>16);
 8001438:	e006      	b.n	8001448 <checksum+0x94>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	b29b      	uxth	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	0c1b      	lsrs	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f4      	bne.n	800143a <checksum+0x86>
	// сконвертировать сумму в формат big endian, затем её проинвертировать и вернуть из функции
	return ~be16toword((uint16_t)sum);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b29b      	uxth	r3, r3
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21a      	sxth	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	b29b      	uxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	b29b      	uxth	r3, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	b29b      	uxth	r3, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
	...

08001478 <eth_send>:
//-----------------функцию для отправки кадра по протоколу Ethernet------------------------------
void eth_send(enc28j60_frame_ptr *frame, uint16_t len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
	memcpy(frame->addr_src,macaddr,6);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3306      	adds	r3, #6
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <eth_send+0x30>)
 800148a:	6811      	ldr	r1, [r2, #0]
 800148c:	6019      	str	r1, [r3, #0]
 800148e:	8892      	ldrh	r2, [r2, #4]
 8001490:	809a      	strh	r2, [r3, #4]
	enc28j60_packetSend((void*)frame,len+sizeof(enc28j60_frame_ptr));
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	330e      	adds	r3, #14
 8001496:	b29b      	uxth	r3, r3
 8001498:	4619      	mov	r1, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe2c 	bl	80010f8 <enc28j60_packetSend>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000008 	.word	0x20000008

080014ac <ip_send>:
//-------------------- функцию для отправки IP-пакета---------------------------
uint8_t ip_send(enc28j60_frame_ptr *frame, uint16_t len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
	uint8_t res=0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);//установим указатель на пакет IP
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	330e      	adds	r3, #14
 80014c0:	60bb      	str	r3, [r7, #8]
	//Заполним заголовок пакета IP
	ip_pkt->len=be16toword(len);
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	805a      	strh	r2, [r3, #2]
	ip_pkt->fl_frg_of=0;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2200      	movs	r2, #0
 80014de:	80da      	strh	r2, [r3, #6]
	ip_pkt->ttl=128;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	721a      	strb	r2, [r3, #8]
	ip_pkt->cs=0;
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2200      	movs	r2, #0
 80014ea:	815a      	strh	r2, [r3, #10]
	memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3310      	adds	r3, #16
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	320c      	adds	r2, #12
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	601a      	str	r2, [r3, #0]
	memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	330c      	adds	r3, #12
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <ip_send+0x7c>)
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	601a      	str	r2, [r3, #0]
	ip_pkt->cs=checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8001502:	2200      	movs	r2, #0
 8001504:	2114      	movs	r1, #20
 8001506:	68b8      	ldr	r0, [r7, #8]
 8001508:	f7ff ff54 	bl	80013b4 <checksum>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	815a      	strh	r2, [r3, #10]
	//отправим фрейм
	eth_send(frame,len);
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4619      	mov	r1, r3
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffad 	bl	8001478 <eth_send>
	return res;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000010 	.word	0x20000010

0800152c <icmp_read>:
//---------------функцию чтения ICMP-пакета--------------------------------
uint8_t icmp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b08d      	sub	sp, #52	; 0x34
 8001530:	af06      	add	r7, sp, #24
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
	uint8_t res=0;//переменную для результата
 8001538:	2300      	movs	r3, #0
 800153a:	75fb      	strb	r3, [r7, #23]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);//указатель на пакет IP
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	330e      	adds	r3, #14
 8001540:	613b      	str	r3, [r7, #16]
	icmp_pkt_ptr *icmp_pkt = (void*)(ip_pkt->data);//установим указатель на пакет ICMP
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	3314      	adds	r3, #20
 8001546:	60fb      	str	r3, [r7, #12]
	if(len>=sizeof(icmp_pkt_ptr))//Отфильтруем пакет по длине и типу сообщения — эхо-запрос
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	2b07      	cmp	r3, #7
 800154c:	f240 8083 	bls.w	8001656 <icmp_read+0x12a>
	{
		//Выведем сообщение в терминальной программе, что у нас именно такой запрос
		if(icmp_pkt->msg_tp==ICMP_REQ)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d14c      	bne.n	80015f2 <icmp_read+0xc6>
		{
			icmp_pkt->msg_tp=ICMP_REPLY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
			icmp_pkt->cs=0;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	805a      	strh	r2, [r3, #2]
			icmp_pkt->cs=checksum((void*)icmp_pkt,len,0);
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff ff22 	bl	80013b4 <checksum>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	805a      	strh	r2, [r3, #2]
			memcpy(frame->addr_dest,frame->addr_src,6);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3306      	adds	r3, #6
 800157e:	2206      	movs	r2, #6
 8001580:	4619      	mov	r1, r3
 8001582:	f004 fd1d 	bl	8005fc0 <memcpy>
			ip_send(frame,len+sizeof(ip_pkt_ptr));
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	3314      	adds	r3, #20
 800158a:	b29b      	uxth	r3, r3
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff8c 	bl	80014ac <ip_send>
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
				ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3],
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 8001598:	461e      	mov	r6, r3
				ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3],
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	7c5b      	ldrb	r3, [r3, #17]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 800159e:	469c      	mov	ip, r3
				ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3],
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	7c9b      	ldrb	r3, [r3, #18]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 80015a4:	461a      	mov	r2, r3
				ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3],
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	7cdb      	ldrb	r3, [r3, #19]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 80015aa:	4619      	mov	r1, r3
				ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3]);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 80015b0:	4618      	mov	r0, r3
				ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3]);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 80015b6:	461c      	mov	r4, r3
				ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3]);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 80015bc:	461d      	mov	r5, r3
				ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3]);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 80015c2:	9305      	str	r3, [sp, #20]
 80015c4:	9504      	str	r5, [sp, #16]
 80015c6:	9403      	str	r4, [sp, #12]
 80015c8:	9002      	str	r0, [sp, #8]
 80015ca:	9101      	str	r1, [sp, #4]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	4663      	mov	r3, ip
 80015d0:	4632      	mov	r2, r6
 80015d2:	4923      	ldr	r1, [pc, #140]	; (8001660 <icmp_read+0x134>)
 80015d4:	4823      	ldr	r0, [pc, #140]	; (8001664 <icmp_read+0x138>)
 80015d6:	f004 fe33 	bl	8006240 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <icmp_read+0x138>)
 80015dc:	f7fe fdc0 	bl	8000160 <strlen>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	491e      	ldr	r1, [pc, #120]	; (8001664 <icmp_read+0x138>)
 80015ea:	481f      	ldr	r0, [pc, #124]	; (8001668 <icmp_read+0x13c>)
 80015ec:	f003 fe9f 	bl	800532e <HAL_UART_Transmit>
 80015f0:	e031      	b.n	8001656 <icmp_read+0x12a>
		}
		else if (icmp_pkt->msg_tp==ICMP_REPLY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12d      	bne.n	8001656 <icmp_read+0x12a>
		{
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
			ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 80015fe:	461e      	mov	r6, r3
			ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 8001604:	469c      	mov	ip, r3
			ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 800160a:	461a      	mov	r2, r3
			ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 8001610:	4619      	mov	r1, r3
			ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 8001616:	4618      	mov	r0, r3
			ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	7c5b      	ldrb	r3, [r3, #17]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 800161c:	461c      	mov	r4, r3
			ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	7c9b      	ldrb	r3, [r3, #18]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 8001622:	461d      	mov	r5, r3
			ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	7cdb      	ldrb	r3, [r3, #19]
			sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp reply\r\n",
 8001628:	9305      	str	r3, [sp, #20]
 800162a:	9504      	str	r5, [sp, #16]
 800162c:	9403      	str	r4, [sp, #12]
 800162e:	9002      	str	r0, [sp, #8]
 8001630:	9101      	str	r1, [sp, #4]
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	4663      	mov	r3, ip
 8001636:	4632      	mov	r2, r6
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <icmp_read+0x140>)
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <icmp_read+0x138>)
 800163c:	f004 fe00 	bl	8006240 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <icmp_read+0x138>)
 8001642:	f7fe fd8d 	bl	8000160 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	4905      	ldr	r1, [pc, #20]	; (8001664 <icmp_read+0x138>)
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <icmp_read+0x13c>)
 8001652:	f003 fe6c 	bl	800532e <HAL_UART_Transmit>
		}
	}
	return res;
 8001656:	7dfb      	ldrb	r3, [r7, #23]
}
 8001658:	4618      	mov	r0, r3
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001660:	080085d4 	.word	0x080085d4
 8001664:	20000384 	.word	0x20000384
 8001668:	200004ac 	.word	0x200004ac
 800166c:	080085fc 	.word	0x080085fc

08001670 <ip_read>:
//-------------------функцию чтения пакета IP----------------------------
uint8_t ip_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
	uint8_t res = 0;//переменная для результата
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);//указатель на пакет
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	330e      	adds	r3, #14
 8001684:	60bb      	str	r3, [r7, #8]
	//фильтрацию по версии протокола, длине заголовка и соответствию адреса получателя нашему IP
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b45      	cmp	r3, #69	; 0x45
 800168c:	d134      	bne.n	80016f8 <ip_read+0x88>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3310      	adds	r3, #16
 8001692:	2204      	movs	r2, #4
 8001694:	491b      	ldr	r1, [pc, #108]	; (8001704 <ip_read+0x94>)
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fc82 	bl	8005fa0 <memcmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d12a      	bne.n	80016f8 <ip_read+0x88>
	{
		//длина данных
		len = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr);//Вычислим размер данных в байтах
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	885b      	ldrh	r3, [r3, #2]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	885b      	ldrh	r3, [r3, #2]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b14      	subs	r3, #20
 80016bc:	807b      	strh	r3, [r7, #2]
		//узнаем тип протокола
		if(ip_pkt->prt==IP_ICMP)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	7a5b      	ldrb	r3, [r3, #9]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <ip_read+0x62>
		{
			icmp_read(frame,len);
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff2e 	bl	800152c <icmp_read>
 80016d0:	e012      	b.n	80016f8 <ip_read+0x88>
		}
		else if(ip_pkt->prt==IP_TCP)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	7a5b      	ldrb	r3, [r3, #9]
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d105      	bne.n	80016e6 <ip_read+0x76>
		{
			tcp_read(frame,len);
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	4619      	mov	r1, r3
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f001 fb0e 	bl	8002d00 <tcp_read>
 80016e4:	e008      	b.n	80016f8 <ip_read+0x88>
		}
		else if(ip_pkt->prt==IP_UDP)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	7a5b      	ldrb	r3, [r3, #9]
 80016ea:	2b11      	cmp	r3, #17
 80016ec:	d104      	bne.n	80016f8 <ip_read+0x88>
		{
			udp_read(frame,len);
 80016ee:	887b      	ldrh	r3, [r7, #2]
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f001 fd5c 	bl	80031b0 <udp_read>
		}
	}
	return res;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000010 	.word	0x20000010

08001708 <icmp_request>:
//-----------------------------------------------
uint8_t icmp_request(uint8_t* ip_addr)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint8_t res=0;
 8001710:	2300      	movs	r3, #0
 8001712:	77fb      	strb	r3, [r7, #31]
	uint16_t len;
	enc28j60_frame_ptr *frame=(void*) net_buf;
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <icmp_request+0x14c>)
 8001716:	61bb      	str	r3, [r7, #24]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	330e      	adds	r3, #14
 800171c:	617b      	str	r3, [r7, #20]
	icmp_pkt_ptr *icmp_pkt = (void*)ip_pkt->data;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3314      	adds	r3, #20
 8001722:	613b      	str	r3, [r7, #16]
	//Заполним заголовок пакета ICMP
	icmp_pkt->msg_tp = 8;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2208      	movs	r2, #8
 8001728:	701a      	strb	r2, [r3, #0]
	icmp_pkt->msg_cd = 0;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2200      	movs	r2, #0
 800172e:	705a      	strb	r2, [r3, #1]
	icmp_pkt->id = be16toword(1);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	809a      	strh	r2, [r3, #4]
	icmp_pkt->num = be16toword(ping_cnt);
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <icmp_request+0x150>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b44      	ldr	r3, [pc, #272]	; (8001858 <icmp_request+0x150>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b29b      	uxth	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b29a      	uxth	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	80da      	strh	r2, [r3, #6]
	ping_cnt++;
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <icmp_request+0x150>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <icmp_request+0x150>)
 800175e:	6013      	str	r3, [r2, #0]
	strcpy((char*)icmp_pkt->data,"abcdefghijklmnopqrstuvwabcdefghi");
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	3308      	adds	r3, #8
 8001764:	4a3d      	ldr	r2, [pc, #244]	; (800185c <icmp_request+0x154>)
 8001766:	4614      	mov	r4, r2
 8001768:	469c      	mov	ip, r3
 800176a:	f104 0e20 	add.w	lr, r4, #32
 800176e:	4665      	mov	r5, ip
 8001770:	4626      	mov	r6, r4
 8001772:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001774:	6028      	str	r0, [r5, #0]
 8001776:	6069      	str	r1, [r5, #4]
 8001778:	60aa      	str	r2, [r5, #8]
 800177a:	60eb      	str	r3, [r5, #12]
 800177c:	3410      	adds	r4, #16
 800177e:	f10c 0c10 	add.w	ip, ip, #16
 8001782:	4574      	cmp	r4, lr
 8001784:	d1f3      	bne.n	800176e <icmp_request+0x66>
 8001786:	4663      	mov	r3, ip
 8001788:	4622      	mov	r2, r4
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	701a      	strb	r2, [r3, #0]
	icmp_pkt->cs = 0;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2200      	movs	r2, #0
 8001792:	805a      	strh	r2, [r3, #2]
	len = strlen((char*)icmp_pkt->data) + sizeof(icmp_pkt_ptr);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	3308      	adds	r3, #8
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fce1 	bl	8000160 <strlen>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3308      	adds	r3, #8
 80017a4:	81fb      	strh	r3, [r7, #14]
	icmp_pkt->cs=checksum((void*)icmp_pkt,len,0);
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	6938      	ldr	r0, [r7, #16]
 80017ae:	f7ff fe01 	bl	80013b4 <checksum>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	805a      	strh	r2, [r3, #2]
	//Заполним заголовок пакета IP
	len+=sizeof(ip_pkt_ptr);
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	3314      	adds	r3, #20
 80017be:	81fb      	strh	r3, [r7, #14]
	ip_pkt->len=be16toword(len);
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	805a      	strh	r2, [r3, #2]
	ip_pkt->id = 0;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	2200      	movs	r2, #0
 80017dc:	809a      	strh	r2, [r3, #4]
	ip_pkt->ts = 0;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	705a      	strb	r2, [r3, #1]
	ip_pkt->verlen = 0x45;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2245      	movs	r2, #69	; 0x45
 80017e8:	701a      	strb	r2, [r3, #0]
	ip_pkt->fl_frg_of=0;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	80da      	strh	r2, [r3, #6]
	ip_pkt->ttl=128;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	721a      	strb	r2, [r3, #8]
	ip_pkt->cs = 0;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2200      	movs	r2, #0
 80017fa:	815a      	strh	r2, [r3, #10]
	ip_pkt->prt=IP_ICMP;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2201      	movs	r2, #1
 8001800:	725a      	strb	r2, [r3, #9]
	memcpy(ip_pkt->ipaddr_dst,ip_addr,4);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3310      	adds	r3, #16
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	601a      	str	r2, [r3, #0]
	memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	330c      	adds	r3, #12
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <icmp_request+0x158>)
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	601a      	str	r2, [r3, #0]
	ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8001816:	2200      	movs	r2, #0
 8001818:	2114      	movs	r1, #20
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	f7ff fdca 	bl	80013b4 <checksum>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	815a      	strh	r2, [r3, #10]
	//Заполним заголовок пакета Ethernet
  memcpy(frame->addr_src,macaddr,6);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	3306      	adds	r3, #6
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <icmp_request+0x15c>)
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	6019      	str	r1, [r3, #0]
 8001832:	8892      	ldrh	r2, [r2, #4]
 8001834:	809a      	strh	r2, [r3, #4]
  frame->type=ETH_IP;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2208      	movs	r2, #8
 800183a:	819a      	strh	r2, [r3, #12]
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	330e      	adds	r3, #14
 8001840:	b29b      	uxth	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	69b8      	ldr	r0, [r7, #24]
 8001846:	f7ff fc57 	bl	80010f8 <enc28j60_packetSend>
  return res;
 800184a:	7ffb      	ldrb	r3, [r7, #31]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001854:	20000180 	.word	0x20000180
 8001858:	200003c0 	.word	0x200003c0
 800185c:	08008624 	.word	0x08008624
 8001860:	20000010 	.word	0x20000010
 8001864:	20000008 	.word	0x20000008

08001868 <port_extract>:
//--------------------------------------------------
uint16_t port_extract(char* ip_str, uint8_t len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  uint16_t port=0;
 8001874:	2300      	movs	r3, #0
 8001876:	82fb      	strh	r3, [r7, #22]
  int ch1=':';
 8001878:	233a      	movs	r3, #58	; 0x3a
 800187a:	613b      	str	r3, [r7, #16]
  char *ss1;
  uint8_t offset = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  ss1=strchr(ip_str,ch1);
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f004 fcfc 	bl	8006280 <strchr>
 8001888:	60b8      	str	r0, [r7, #8]
  offset=ss1-ip_str+1;
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
  ip_str+=offset;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	607b      	str	r3, [r7, #4]
  port = atoi(ip_str);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f004 fa30 	bl	8005d04 <atoi>
 80018a4:	4603      	mov	r3, r0
 80018a6:	82fb      	strh	r3, [r7, #22]
  return port;
 80018a8:	8afb      	ldrh	r3, [r7, #22]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <ip_extract>:
//--------------функция преобразования строкового значения IP в 32-битное числовое------------------------------------
void ip_extract(char* ip_str, uint8_t len, uint8_t* ipextp)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b08a      	sub	sp, #40	; 0x28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	460b      	mov	r3, r1
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	72fb      	strb	r3, [r7, #11]
	uint8_t offset = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t i;
  char ss2[5] = {0};
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	2300      	movs	r3, #0
 80018cc:	753b      	strb	r3, [r7, #20]
  char *ss1;
  int ch1 = '.';//пробежим по функции на предмет появления точек
 80018ce:	232e      	movs	r3, #46	; 0x2e
 80018d0:	623b      	str	r3, [r7, #32]
  int ch2 = ':';
 80018d2:	233a      	movs	r3, #58	; 0x3a
 80018d4:	61fb      	str	r3, [r7, #28]
	for(i=0;i<3;i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018dc:	e035      	b.n	800194a <ip_extract+0x98>
	{
		ss1 = strchr(ip_str,ch1);
 80018de:	6a39      	ldr	r1, [r7, #32]
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f004 fccd 	bl	8006280 <strchr>
 80018e6:	61b8      	str	r0, [r7, #24]
		offset = ss1-ip_str+1;//смещением относительно начала строки с IP-адресом, поэтому вычислим это смещение
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		strncpy(ss2,ip_str,offset);//скопируем ещё в одну строку часть нашей строки до точки
 80018f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	68f9      	ldr	r1, [r7, #12]
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fcca 	bl	800629a <strncpy>
		ss2[offset]=0;
 8001906:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800190a:	3328      	adds	r3, #40	; 0x28
 800190c:	443b      	add	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	f803 2c18 	strb.w	r2, [r3, #-24]
		ipextp[i] = atoi(ss2);//преобразовав вышесозданную строку в число, запишем его в соответствующий элемент массива для адреса
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f9f3 	bl	8005d04 <atoi>
 800191e:	4601      	mov	r1, r0
 8001920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4413      	add	r3, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
		ip_str+=offset;//сдвинем указатели нашей строки с IP-адресом и длины этой строки
 800192c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
		len-=offset;
 8001936:	7afa      	ldrb	r2, [r7, #11]
 8001938:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	72fb      	strb	r3, [r7, #11]
	for(i=0;i<3;i++)
 8001940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001944:	3301      	adds	r3, #1
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800194a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800194e:	2b02      	cmp	r3, #2
 8001950:	d9c5      	bls.n	80018de <ip_extract+0x2c>
	}
	//мы уже работаем с последним байтом IP-адреса, после которого уже точки нет и
	//также записываем его в соответствующий элемент возвращаемого массива адреса IP
	ss1=strchr(ip_str,ch2);
 8001952:	69f9      	ldr	r1, [r7, #28]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f004 fc93 	bl	8006280 <strchr>
 800195a:	61b8      	str	r0, [r7, #24]
	if (ss1!=NULL)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d020      	beq.n	80019a4 <ip_extract+0xf2>
	{
		offset=ss1-ip_str+1;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3301      	adds	r3, #1
 800196c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		strncpy(ss2,ip_str,offset);
 8001970:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fc8d 	bl	800629a <strncpy>
		ss2[offset]=0;
 8001980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001984:	3328      	adds	r3, #40	; 0x28
 8001986:	443b      	add	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	f803 2c18 	strb.w	r2, [r3, #-24]
		ipextp[3] = atoi(ss2);
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4618      	mov	r0, r3
 8001994:	f004 f9b6 	bl	8005d04 <atoi>
 8001998:	4602      	mov	r2, r0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3303      	adds	r3, #3
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e016      	b.n	80019d2 <ip_extract+0x120>
		return;
	}
	strncpy(ss2,ip_str,len);
 80019a4:	7afa      	ldrb	r2, [r7, #11]
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 fc74 	bl	800629a <strncpy>
	ss2[len]=0;
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	3328      	adds	r3, #40	; 0x28
 80019b6:	443b      	add	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	f803 2c18 	strb.w	r2, [r3, #-24]
	ipextp[3] = atoi(ss2);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 f99e 	bl	8005d04 <atoi>
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3303      	adds	r3, #3
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <eth_read>:
//----------------функция чтения фрейма-------------------------------
void eth_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	b097      	sub	sp, #92	; 0x5c
 80019dc:	af0c      	add	r7, sp, #48	; 0x30
 80019de:	61f8      	str	r0, [r7, #28]
 80019e0:	460b      	mov	r3, r1
 80019e2:	837b      	strh	r3, [r7, #26]
	uint8_t res=0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(len>sizeof(enc28j60_frame_ptr))
 80019ea:	8b7b      	ldrh	r3, [r7, #26]
 80019ec:	2b0e      	cmp	r3, #14
 80019ee:	f240 8099 	bls.w	8001b24 <eth_read+0x14c>
	{
		//отправлять ответ ARP только в случае, если ARP-запрос вернёт единицу
		if(frame->type==ETH_ARP)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	899b      	ldrh	r3, [r3, #12]
 80019f6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80019fa:	d12e      	bne.n	8001a5a <eth_read+0x82>
		{
			res = arp_read(frame,len-sizeof(enc28j60_frame_ptr));
 80019fc:	8b7b      	ldrh	r3, [r7, #26]
 80019fe:	3b0e      	subs	r3, #14
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	69f8      	ldr	r0, [r7, #28]
 8001a06:	f7fe fd6f 	bl	80004e8 <arp_read>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(res==1)
 8001a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d103      	bne.n	8001a20 <eth_read+0x48>
			{
				arp_send(frame);//ответим на ARP запрос
 8001a18:	69f8      	ldr	r0, [r7, #28]
 8001a1a:	f7fe fe35 	bl	8000688 <arp_send>
			len, be16toword(frame->type));
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
			HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
		}
	}
}
 8001a1e:	e081      	b.n	8001b24 <eth_read+0x14c>
			else if(res==2)
 8001a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d17d      	bne.n	8001b24 <eth_read+0x14c>
				arp_table_fill(frame);
 8001a28:	69f8      	ldr	r0, [r7, #28]
 8001a2a:	f7ff f821 	bl	8000a70 <arp_table_fill>
				if((usartprop.is_ip==3)||(usartprop.is_ip==5)||(usartprop.is_ip==7))//статус отправки UDP-, ICMP- или NTP пакета
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <eth_read+0x154>)
 8001a30:	7e9b      	ldrb	r3, [r3, #26]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d007      	beq.n	8001a46 <eth_read+0x6e>
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <eth_read+0x154>)
 8001a38:	7e9b      	ldrb	r3, [r3, #26]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d003      	beq.n	8001a46 <eth_read+0x6e>
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <eth_read+0x154>)
 8001a40:	7e9b      	ldrb	r3, [r3, #26]
 8001a42:	2b07      	cmp	r3, #7
 8001a44:	d16e      	bne.n	8001b24 <eth_read+0x14c>
					memcpy(frame->addr_dest,frame->addr_src,6);
 8001a46:	69f8      	ldr	r0, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	3306      	adds	r3, #6
 8001a4c:	2206      	movs	r2, #6
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f004 fab6 	bl	8005fc0 <memcpy>
					net_cmd();
 8001a54:	f000 f890 	bl	8001b78 <net_cmd>
}
 8001a58:	e064      	b.n	8001b24 <eth_read+0x14c>
		else if(frame->type==ETH_IP)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	899b      	ldrh	r3, [r3, #12]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d107      	bne.n	8001a72 <eth_read+0x9a>
			ip_read(frame,len-sizeof(ip_pkt_ptr));
 8001a62:	8b7b      	ldrh	r3, [r7, #26]
 8001a64:	3b14      	subs	r3, #20
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	69f8      	ldr	r0, [r7, #28]
 8001a6c:	f7ff fe00 	bl	8001670 <ip_read>
}
 8001a70:	e058      	b.n	8001b24 <eth_read+0x14c>
			frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	799b      	ldrb	r3, [r3, #6]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a76:	469c      	mov	ip, r3
			frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	79db      	ldrb	r3, [r3, #7]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a7c:	469e      	mov	lr, r3
			frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a82:	4618      	mov	r0, r3
			frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a88:	461c      	mov	r4, r3
			frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a8e:	461d      	mov	r5, r3
			frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	7adb      	ldrb	r3, [r3, #11]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a94:	461e      	mov	r6, r3
			frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	781b      	ldrb	r3, [r3, #0]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001a9a:	617b      	str	r3, [r7, #20]
			frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	785b      	ldrb	r3, [r3, #1]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001aa0:	613b      	str	r3, [r7, #16]
			frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	789b      	ldrb	r3, [r3, #2]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001aa6:	60fb      	str	r3, [r7, #12]
			frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	78db      	ldrb	r3, [r3, #3]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001aac:	60bb      	str	r3, [r7, #8]
			frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	791b      	ldrb	r3, [r3, #4]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001ab2:	607b      	str	r3, [r7, #4]
			frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	795b      	ldrb	r3, [r3, #5]
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	8b79      	ldrh	r1, [r7, #26]
			len, be16toword(frame->type));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	899b      	ldrh	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	899b      	ldrh	r3, [r3, #12]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
			sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ad2:	910a      	str	r1, [sp, #40]	; 0x28
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	9208      	str	r2, [sp, #32]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	9207      	str	r2, [sp, #28]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	9206      	str	r2, [sp, #24]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	9205      	str	r2, [sp, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	9304      	str	r3, [sp, #16]
 8001aec:	9603      	str	r6, [sp, #12]
 8001aee:	9502      	str	r5, [sp, #8]
 8001af0:	9401      	str	r4, [sp, #4]
 8001af2:	9000      	str	r0, [sp, #0]
 8001af4:	4673      	mov	r3, lr
 8001af6:	4662      	mov	r2, ip
 8001af8:	490d      	ldr	r1, [pc, #52]	; (8001b30 <eth_read+0x158>)
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <eth_read+0x15c>)
 8001afc:	f004 fba0 	bl	8006240 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <eth_read+0x15c>)
 8001b02:	f7fe fb2d 	bl	8000160 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	4909      	ldr	r1, [pc, #36]	; (8001b34 <eth_read+0x15c>)
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <eth_read+0x160>)
 8001b12:	f003 fc0c 	bl	800532e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4907      	ldr	r1, [pc, #28]	; (8001b3c <eth_read+0x164>)
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <eth_read+0x160>)
 8001b20:	f003 fc05 	bl	800532e <HAL_UART_Transmit>
}
 8001b24:	bf00      	nop
 8001b26:	372c      	adds	r7, #44	; 0x2c
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2c:	200003c4 	.word	0x200003c4
 8001b30:	08008648 	.word	0x08008648
 8001b34:	20000384 	.word	0x20000384
 8001b38:	200004ac 	.word	0x200004ac
 8001b3c:	08008690 	.word	0x08008690

08001b40 <net_poll>:
//-----------------функция постоянного опроса сети------------------------------
void net_poll(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	uint16_t len;
	//uint8_t ip[4]={0};
	//приёма информации из буфера чтения
	enc28j60_frame_ptr *frame=(void*)net_buf;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <net_poll+0x34>)
 8001b48:	607b      	str	r3, [r7, #4]
	while((len=enc28j60_packetReceive(net_buf,sizeof(net_buf)))>0)
 8001b4a:	e004      	b.n	8001b56 <net_poll+0x16>
	{
		eth_read(frame,len);
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff41 	bl	80019d8 <eth_read>
	while((len=enc28j60_packetReceive(net_buf,sizeof(net_buf)))>0)
 8001b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <net_poll+0x34>)
 8001b5c:	f7ff fa72 	bl	8001044 <enc28j60_packetReceive>
 8001b60:	4603      	mov	r3, r0
 8001b62:	807b      	strh	r3, [r7, #2]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <net_poll+0xc>
	}
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000180 	.word	0x20000180

08001b78 <net_cmd>:
//-----------------------------------------------
void net_cmd(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  static uint8_t ip[4]={0};
	static uint16_t port=0;
	enc28j60_frame_ptr *frame=(void*)net_buf;
 8001b7e:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <net_cmd+0x160>)
 8001b80:	607b      	str	r3, [r7, #4]
  if(usartprop.is_ip==1)//статус отправки ARP-запроса
 8001b82:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <net_cmd+0x164>)
 8001b84:	7e9b      	ldrb	r3, [r3, #26]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d110      	bne.n	8001bac <net_cmd+0x34>
  {
    ip_extract((char*)usartprop.usart_buf,usartprop.usart_cnt,ip);
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <net_cmd+0x164>)
 8001b8c:	7e5b      	ldrb	r3, [r3, #25]
 8001b8e:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <net_cmd+0x168>)
 8001b90:	4619      	mov	r1, r3
 8001b92:	4852      	ldr	r0, [pc, #328]	; (8001cdc <net_cmd+0x164>)
 8001b94:	f7ff fe8d 	bl	80018b2 <ip_extract>
    arp_request(ip);
 8001b98:	4851      	ldr	r0, [pc, #324]	; (8001ce0 <net_cmd+0x168>)
 8001b9a:	f7fe fe25 	bl	80007e8 <arp_request>
    usartprop.is_ip = 0;
 8001b9e:	4b4f      	ldr	r3, [pc, #316]	; (8001cdc <net_cmd+0x164>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	769a      	strb	r2, [r3, #26]
    usartprop.usart_cnt=0;
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <net_cmd+0x164>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	765a      	strb	r2, [r3, #25]
		ntpprop.set=1;//флаг запроса времени взведен
		memcpy(ntpprop.macaddr_dst,frame->addr_dest,6);
		ntp_request(ntpprop.ip_dst,ntpprop.port_dst);
		usartprop.is_ip=0;
	}
}
 8001baa:	e091      	b.n	8001cd0 <net_cmd+0x158>
	else if(usartprop.is_ip==2)//статус попытки отправить UDP-пакет
 8001bac:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <net_cmd+0x164>)
 8001bae:	7e9b      	ldrb	r3, [r3, #26]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d110      	bne.n	8001bd6 <net_cmd+0x5e>
		ip_extract((char*)usartprop.usart_buf,usartprop.usart_cnt,ip);
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <net_cmd+0x164>)
 8001bb6:	7e5b      	ldrb	r3, [r3, #25]
 8001bb8:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <net_cmd+0x168>)
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4847      	ldr	r0, [pc, #284]	; (8001cdc <net_cmd+0x164>)
 8001bbe:	f7ff fe78 	bl	80018b2 <ip_extract>
		usartprop.is_ip=3;//статус отправки UDP-пакета
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <net_cmd+0x164>)
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	769a      	strb	r2, [r3, #26]
		usartprop.usart_cnt=0;
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <net_cmd+0x164>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	765a      	strb	r2, [r3, #25]
		arp_request(ip);//узнаем mac-адрес
 8001bce:	4844      	ldr	r0, [pc, #272]	; (8001ce0 <net_cmd+0x168>)
 8001bd0:	f7fe fe0a 	bl	80007e8 <arp_request>
}
 8001bd4:	e07c      	b.n	8001cd0 <net_cmd+0x158>
  else if(usartprop.is_ip==3)//статус отправки UDP-пакета
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <net_cmd+0x164>)
 8001bd8:	7e9b      	ldrb	r3, [r3, #26]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d113      	bne.n	8001c06 <net_cmd+0x8e>
		port=port_extract((char*)usartprop.usart_buf,usartprop.usart_cnt);
 8001bde:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <net_cmd+0x164>)
 8001be0:	7e5b      	ldrb	r3, [r3, #25]
 8001be2:	4619      	mov	r1, r3
 8001be4:	483d      	ldr	r0, [pc, #244]	; (8001cdc <net_cmd+0x164>)
 8001be6:	f7ff fe3f 	bl	8001868 <port_extract>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <net_cmd+0x16c>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		udp_send(ip,port);
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <net_cmd+0x16c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4839      	ldr	r0, [pc, #228]	; (8001ce0 <net_cmd+0x168>)
 8001bfa:	f001 f9e9 	bl	8002fd0 <udp_send>
    usartprop.is_ip=0;
 8001bfe:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <net_cmd+0x164>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	769a      	strb	r2, [r3, #26]
}
 8001c04:	e064      	b.n	8001cd0 <net_cmd+0x158>
	else if(usartprop.is_ip==4)//статус попытки отправить ICMP-пакет
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <net_cmd+0x164>)
 8001c08:	7e9b      	ldrb	r3, [r3, #26]
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d110      	bne.n	8001c30 <net_cmd+0xb8>
    ip_extract((char*)usartprop.usart_buf,usartprop.usart_cnt,ip);
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <net_cmd+0x164>)
 8001c10:	7e5b      	ldrb	r3, [r3, #25]
 8001c12:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <net_cmd+0x168>)
 8001c14:	4619      	mov	r1, r3
 8001c16:	4831      	ldr	r0, [pc, #196]	; (8001cdc <net_cmd+0x164>)
 8001c18:	f7ff fe4b 	bl	80018b2 <ip_extract>
    usartprop.is_ip=5;//статус отправки ICMP-пакета
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <net_cmd+0x164>)
 8001c1e:	2205      	movs	r2, #5
 8001c20:	769a      	strb	r2, [r3, #26]
    usartprop.usart_cnt=0;
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <net_cmd+0x164>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	765a      	strb	r2, [r3, #25]
    arp_request(ip);//узнаем mac-адрес
 8001c28:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <net_cmd+0x168>)
 8001c2a:	f7fe fddd 	bl	80007e8 <arp_request>
}
 8001c2e:	e04f      	b.n	8001cd0 <net_cmd+0x158>
  else if(usartprop.is_ip==5)//статус отправки ICMP-пакета
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <net_cmd+0x164>)
 8001c32:	7e9b      	ldrb	r3, [r3, #26]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d106      	bne.n	8001c46 <net_cmd+0xce>
    icmp_request(ip);
 8001c38:	4829      	ldr	r0, [pc, #164]	; (8001ce0 <net_cmd+0x168>)
 8001c3a:	f7ff fd65 	bl	8001708 <icmp_request>
    usartprop.is_ip=0;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <net_cmd+0x164>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	769a      	strb	r2, [r3, #26]
}
 8001c44:	e044      	b.n	8001cd0 <net_cmd+0x158>
	else if(usartprop.is_ip==6)//статус попытки отправить NTP-пакет
 8001c46:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <net_cmd+0x164>)
 8001c48:	7e9b      	ldrb	r3, [r3, #26]
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d115      	bne.n	8001c7a <net_cmd+0x102>
		ip_extract((char*)usartprop.usart_buf,usartprop.usart_cnt,ip);
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <net_cmd+0x164>)
 8001c50:	7e5b      	ldrb	r3, [r3, #25]
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <net_cmd+0x168>)
 8001c54:	4619      	mov	r1, r3
 8001c56:	4821      	ldr	r0, [pc, #132]	; (8001cdc <net_cmd+0x164>)
 8001c58:	f7ff fe2b 	bl	80018b2 <ip_extract>
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <net_cmd+0x168>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
		memcpy(ntpprop.ip_dst,ip,4);
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <net_cmd+0x170>)
 8001c62:	f8c2 300f 	str.w	r3, [r2, #15]
		usartprop.is_ip=7;//статус отправки NTP-пакета
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <net_cmd+0x164>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	769a      	strb	r2, [r3, #26]
		usartprop.usart_cnt=0;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <net_cmd+0x164>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	765a      	strb	r2, [r3, #25]
		arp_request(ip);//узнаем mac-адрес
 8001c72:	481b      	ldr	r0, [pc, #108]	; (8001ce0 <net_cmd+0x168>)
 8001c74:	f7fe fdb8 	bl	80007e8 <arp_request>
}
 8001c78:	e02a      	b.n	8001cd0 <net_cmd+0x158>
	else if(usartprop.is_ip==7)//статус отправки NTP-пакета
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <net_cmd+0x164>)
 8001c7c:	7e9b      	ldrb	r3, [r3, #26]
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	d126      	bne.n	8001cd0 <net_cmd+0x158>
		port=port_extract((char*)usartprop.usart_buf,usartprop.usart_cnt);
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <net_cmd+0x164>)
 8001c84:	7e5b      	ldrb	r3, [r3, #25]
 8001c86:	4619      	mov	r1, r3
 8001c88:	4814      	ldr	r0, [pc, #80]	; (8001cdc <net_cmd+0x164>)
 8001c8a:	f7ff fded 	bl	8001868 <port_extract>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <net_cmd+0x16c>)
 8001c94:	801a      	strh	r2, [r3, #0]
		ntpprop.port_dst = port;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <net_cmd+0x16c>)
 8001c98:	881a      	ldrh	r2, [r3, #0]
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <net_cmd+0x170>)
 8001c9c:	829a      	strh	r2, [r3, #20]
		ntpprop.ntp_cnt = 10; //10 попыток
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <net_cmd+0x170>)
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	701a      	strb	r2, [r3, #0]
		ntpprop.ntp_timer = 5;//5 секунд до следующей попытки
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <net_cmd+0x170>)
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	605a      	str	r2, [r3, #4]
		ntpprop.set=1;//флаг запроса времени взведен
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <net_cmd+0x170>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	721a      	strb	r2, [r3, #8]
		memcpy(ntpprop.macaddr_dst,frame->addr_dest,6);
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <net_cmd+0x170>)
 8001cb4:	3309      	adds	r3, #9
 8001cb6:	6811      	ldr	r1, [r2, #0]
 8001cb8:	6019      	str	r1, [r3, #0]
 8001cba:	8892      	ldrh	r2, [r2, #4]
 8001cbc:	809a      	strh	r2, [r3, #4]
		ntp_request(ntpprop.ip_dst,ntpprop.port_dst);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <net_cmd+0x170>)
 8001cc0:	8a9b      	ldrh	r3, [r3, #20]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4809      	ldr	r0, [pc, #36]	; (8001cec <net_cmd+0x174>)
 8001cc6:	f000 f953 	bl	8001f70 <ntp_request>
		usartprop.is_ip=0;
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <net_cmd+0x164>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	769a      	strb	r2, [r3, #26]
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000180 	.word	0x20000180
 8001cdc:	200003c4 	.word	0x200003c4
 8001ce0:	200003e0 	.word	0x200003e0
 8001ce4:	200003e4 	.word	0x200003e4
 8001ce8:	200003e8 	.word	0x200003e8
 8001cec:	200003f7 	.word	0x200003f7

08001cf0 <UART2_RxCpltCallback>:
//-----------------функцию-обработчик прерываний по окончанию приема заданного количества байт в шину USART------------------------------
void UART2_RxCpltCallback(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
	uint8_t b;
	b=str[0];
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <UART2_RxCpltCallback+0x90>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
	//если вдруг случайно превысим длину буфера
	if(usartprop.usart_cnt>25)
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001cfe:	7e5b      	ldrb	r3, [r3, #25]
 8001d00:	2b19      	cmp	r3, #25
 8001d02:	d903      	bls.n	8001d0c <UART2_RxCpltCallback+0x1c>
	{
		usartprop.usart_cnt=0;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	765a      	strb	r2, [r3, #25]
 8001d0a:	e02f      	b.n	8001d6c <UART2_RxCpltCallback+0x7c>
	}
	else if(b == 'a')
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b61      	cmp	r3, #97	; 0x61
 8001d10:	d105      	bne.n	8001d1e <UART2_RxCpltCallback+0x2e>
	{
		usartprop.is_ip=1;//статус отправки ARP-запроса
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	769a      	strb	r2, [r3, #26]
		net_cmd();
 8001d18:	f7ff ff2e 	bl	8001b78 <net_cmd>
 8001d1c:	e026      	b.n	8001d6c <UART2_RxCpltCallback+0x7c>
	}
	else if (b=='u')
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b75      	cmp	r3, #117	; 0x75
 8001d22:	d105      	bne.n	8001d30 <UART2_RxCpltCallback+0x40>
	{
		usartprop.is_ip=2;//статус попытки отправить UDP-пакет
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	769a      	strb	r2, [r3, #26]
		net_cmd();
 8001d2a:	f7ff ff25 	bl	8001b78 <net_cmd>
 8001d2e:	e01d      	b.n	8001d6c <UART2_RxCpltCallback+0x7c>
	}
	else if (b=='p')
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b70      	cmp	r3, #112	; 0x70
 8001d34:	d105      	bne.n	8001d42 <UART2_RxCpltCallback+0x52>
	{
		usartprop.is_ip=4;//статус попытки отправить ICMP-пакет
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d38:	2204      	movs	r2, #4
 8001d3a:	769a      	strb	r2, [r3, #26]
		net_cmd();
 8001d3c:	f7ff ff1c 	bl	8001b78 <net_cmd>
 8001d40:	e014      	b.n	8001d6c <UART2_RxCpltCallback+0x7c>
	}
	else if (b=='n')
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b6e      	cmp	r3, #110	; 0x6e
 8001d46:	d105      	bne.n	8001d54 <UART2_RxCpltCallback+0x64>
	{
		usartprop.is_ip=6;//статус попытки отправить NTP-пакет
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d4a:	2206      	movs	r2, #6
 8001d4c:	769a      	strb	r2, [r3, #26]
		net_cmd();
 8001d4e:	f7ff ff13 	bl	8001b78 <net_cmd>
 8001d52:	e00b      	b.n	8001d6c <UART2_RxCpltCallback+0x7c>
	}
	else
	{
		usartprop.usart_buf[usartprop.usart_cnt] = b;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d56:	7e5b      	ldrb	r3, [r3, #25]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	5453      	strb	r3, [r2, r1]
		usartprop.usart_cnt++;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d62:	7e5b      	ldrb	r3, [r3, #25]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <UART2_RxCpltCallback+0x94>)
 8001d6a:	765a      	strb	r2, [r3, #25]
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)str,1);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4904      	ldr	r1, [pc, #16]	; (8001d80 <UART2_RxCpltCallback+0x90>)
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <UART2_RxCpltCallback+0x98>)
 8001d72:	f003 fb6e 	bl	8005452 <HAL_UART_Receive_IT>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000016c 	.word	0x2000016c
 8001d84:	200003c4 	.word	0x200003c4
 8001d88:	200004ac 	.word	0x200004ac

08001d8c <TIM_PeriodElapsedCallback>:
//---------------функцию-обработчик прерывания по совпадению данного таймера--------------------------------
void TIM_PeriodElapsedCallback(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  //считаем секунды и записываем их в clock_cnt
  clock_cnt++;
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <TIM_PeriodElapsedCallback+0x94>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <TIM_PeriodElapsedCallback+0x94>)
 8001d98:	6013      	str	r3, [r2, #0]
	if (ntpprop.set)
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001d9c:	7a1b      	ldrb	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03b      	beq.n	8001e1a <TIM_PeriodElapsedCallback+0x8e>
	{
		ntpprop.ntp_timer--;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001daa:	6053      	str	r3, [r2, #4]
		if ((ntpprop.ntp_timer<0)&&(ntpprop.ntp_cnt>0))
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da25      	bge.n	8001e00 <TIM_PeriodElapsedCallback+0x74>
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d021      	beq.n	8001e00 <TIM_PeriodElapsedCallback+0x74>
		{
			ntpprop.ntp_timer = 5;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	605a      	str	r2, [r3, #4]
			ntpprop.ntp_cnt--;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001dcc:	701a      	strb	r2, [r3, #0]
			sprintf(str1,"ntp_cnt: %d\r\n",ntpprop.ntp_cnt);
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4914      	ldr	r1, [pc, #80]	; (8001e28 <TIM_PeriodElapsedCallback+0x9c>)
 8001dd6:	4815      	ldr	r0, [pc, #84]	; (8001e2c <TIM_PeriodElapsedCallback+0xa0>)
 8001dd8:	f004 fa32 	bl	8006240 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001ddc:	4813      	ldr	r0, [pc, #76]	; (8001e2c <TIM_PeriodElapsedCallback+0xa0>)
 8001dde:	f7fe f9bf 	bl	8000160 <strlen>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	4910      	ldr	r1, [pc, #64]	; (8001e2c <TIM_PeriodElapsedCallback+0xa0>)
 8001dec:	4810      	ldr	r0, [pc, #64]	; (8001e30 <TIM_PeriodElapsedCallback+0xa4>)
 8001dee:	f003 fa9e 	bl	800532e <HAL_UART_Transmit>
			ntp_request(ntpprop.ip_dst,ntpprop.port_dst);
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001df4:	8a9b      	ldrh	r3, [r3, #20]
 8001df6:	4619      	mov	r1, r3
 8001df8:	480e      	ldr	r0, [pc, #56]	; (8001e34 <TIM_PeriodElapsedCallback+0xa8>)
 8001dfa:	f000 f8b9 	bl	8001f70 <ntp_request>
			ntpprop.set=0;
			ntpprop.ntp_cnt=0;
			ntpprop.ntp_timer=0;
		}
	}
}
 8001dfe:	e00c      	b.n	8001e1a <TIM_PeriodElapsedCallback+0x8e>
		else if (ntpprop.ntp_cnt<=0)
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <TIM_PeriodElapsedCallback+0x8e>
			ntpprop.set=0;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	721a      	strb	r2, [r3, #8]
			ntpprop.ntp_cnt=0;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			ntpprop.ntp_timer=0;
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <TIM_PeriodElapsedCallback+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000380 	.word	0x20000380
 8001e24:	200003e8 	.word	0x200003e8
 8001e28:	08008694 	.word	0x08008694
 8001e2c:	20000384 	.word	0x20000384
 8001e30:	200004ac 	.word	0x200004ac
 8001e34:	200003f7 	.word	0x200003f7

08001e38 <ntp_read>:
extern uint8_t macaddr[6];
extern uint8_t ipaddr[4];
ntp_prop_ptr ntpprop;
//--------------------------------------------------
uint8_t ntp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 8001e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e3c:	b091      	sub	sp, #68	; 0x44
 8001e3e:	af06      	add	r7, sp, #24
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	807b      	strh	r3, [r7, #2]
  uint8_t res=0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	struct tm *timestruct;
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	330e      	adds	r3, #14
 8001e50:	623b      	str	r3, [r7, #32]
	udp_pkt_ptr *udp_pkt = (void*)(ip_pkt->data);
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	3314      	adds	r3, #20
 8001e56:	61fb      	str	r3, [r7, #28]
	ntp_pkt_ptr *ntp_pkt = (void*)(udp_pkt->data);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	61bb      	str	r3, [r7, #24]
	sprintf(str1,"%lu\r\n", be32todword((unsigned long)ntp_pkt->tx_ts.sec));
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	0e1a      	lsrs	r2, r3, #24
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	4313      	orrs	r3, r2
 8001e84:	461a      	mov	r2, r3
 8001e86:	4934      	ldr	r1, [pc, #208]	; (8001f58 <ntp_read+0x120>)
 8001e88:	4834      	ldr	r0, [pc, #208]	; (8001f5c <ntp_read+0x124>)
 8001e8a:	f004 f9d9 	bl	8006240 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001e8e:	4833      	ldr	r0, [pc, #204]	; (8001f5c <ntp_read+0x124>)
 8001e90:	f7fe f966 	bl	8000160 <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	492f      	ldr	r1, [pc, #188]	; (8001f5c <ntp_read+0x124>)
 8001e9e:	4830      	ldr	r0, [pc, #192]	; (8001f60 <ntp_read+0x128>)
 8001ea0:	f003 fa45 	bl	800532e <HAL_UART_Transmit>
	time_t rawtime = (time_t)(be32todword(ntp_pkt->tx_ts.sec)-2208988800+60UL*60*TIMEZONE);
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	0e1a      	lsrs	r2, r3, #24
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	061b      	lsls	r3, r3, #24
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	461c      	mov	r4, r3
 8001ece:	4615      	mov	r5, r2
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <ntp_read+0x12c>)
 8001ed2:	eb14 0803 	adds.w	r8, r4, r3
 8001ed6:	f145 39ff 	adc.w	r9, r5, #4294967295
 8001eda:	e9c7 8902 	strd	r8, r9, [r7, #8]
	timestruct = localtime(&rawtime);
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 ff3c 	bl	8005d60 <localtime>
 8001ee8:	6178      	str	r0, [r7, #20]
	sprintf(str1,"%02d.%02d.%04u %02d:%02d:%02d -%d-\r\n", timestruct->tm_mday,timestruct->tm_mon+1, //месяцы считаются от 0, а не от 1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	68dd      	ldr	r5, [r3, #12]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	1c5e      	adds	r6, r3, #1
		timestruct->tm_year+1900,timestruct->tm_hour,timestruct->tm_min,timestruct->tm_sec,timestruct->tm_wday);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	695b      	ldr	r3, [r3, #20]
	sprintf(str1,"%02d.%02d.%04u %02d:%02d:%02d -%d-\r\n", timestruct->tm_mday,timestruct->tm_mon+1, //месяцы считаются от 0, а не от 1
 8001ef8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	6892      	ldr	r2, [r2, #8]
 8001f00:	6979      	ldr	r1, [r7, #20]
 8001f02:	6849      	ldr	r1, [r1, #4]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	6800      	ldr	r0, [r0, #0]
 8001f08:	697c      	ldr	r4, [r7, #20]
 8001f0a:	69a4      	ldr	r4, [r4, #24]
 8001f0c:	9404      	str	r4, [sp, #16]
 8001f0e:	9003      	str	r0, [sp, #12]
 8001f10:	9102      	str	r1, [sp, #8]
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4633      	mov	r3, r6
 8001f18:	462a      	mov	r2, r5
 8001f1a:	4913      	ldr	r1, [pc, #76]	; (8001f68 <ntp_read+0x130>)
 8001f1c:	480f      	ldr	r0, [pc, #60]	; (8001f5c <ntp_read+0x124>)
 8001f1e:	f004 f98f 	bl	8006240 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001f22:	480e      	ldr	r0, [pc, #56]	; (8001f5c <ntp_read+0x124>)
 8001f24:	f7fe f91c 	bl	8000160 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	490a      	ldr	r1, [pc, #40]	; (8001f5c <ntp_read+0x124>)
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <ntp_read+0x128>)
 8001f34:	f003 f9fb 	bl	800532e <HAL_UART_Transmit>
  //сбросим все флаги и счетчики
  ntpprop.set=0;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <ntp_read+0x134>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	721a      	strb	r2, [r3, #8]
  ntpprop.ntp_cnt=0;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <ntp_read+0x134>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
  ntpprop.ntp_timer=0;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <ntp_read+0x134>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
  return res;
 8001f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	372c      	adds	r7, #44	; 0x2c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f58:	080086a4 	.word	0x080086a4
 8001f5c:	20000384 	.word	0x20000384
 8001f60:	200004ac 	.word	0x200004ac
 8001f64:	7c55abb0 	.word	0x7c55abb0
 8001f68:	080086ac 	.word	0x080086ac
 8001f6c:	200003e8 	.word	0x200003e8

08001f70 <ntp_request>:
//--------------------------------------------------
uint8_t ntp_request(uint8_t *ip_addr, uint16_t port)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
  uint8_t res=0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
	uint16_t len;
	enc28j60_frame_ptr *frame=(void*) net_buf;
 8001f80:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <ntp_request+0x13c>)
 8001f82:	61bb      	str	r3, [r7, #24]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	330e      	adds	r3, #14
 8001f88:	617b      	str	r3, [r7, #20]
	udp_pkt_ptr *udp_pkt = (void*)(ip_pkt->data);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	613b      	str	r3, [r7, #16]
	ntp_pkt_ptr *ntp_pkt = (void*)(udp_pkt->data);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	3308      	adds	r3, #8
 8001f94:	60fb      	str	r3, [r7, #12]
	//заполним нулями всю структуру ntp
	memset(ntp_pkt, 0, sizeof(ntp_pkt_ptr));
 8001f96:	2230      	movs	r2, #48	; 0x30
 8001f98:	2100      	movs	r1, #0
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f004 f81e 	bl	8005fdc <memset>
	//Заполним заголовок NTP
	ntp_pkt->flags = 0x1b;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	221b      	movs	r2, #27
 8001fa4:	701a      	strb	r2, [r3, #0]
	//Заполним заголовок UDP
	udp_pkt->port_dst = be16toword(port);
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	805a      	strh	r2, [r3, #2]
	udp_pkt->port_src = be16toword(LOCAL_PORT_FOR_NTP);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f646 4238 	movw	r2, #27704	; 0x6c38
 8001fc4:	801a      	strh	r2, [r3, #0]
	len = sizeof(ntp_pkt_ptr) + sizeof(udp_pkt_ptr);
 8001fc6:	2338      	movs	r3, #56	; 0x38
 8001fc8:	817b      	strh	r3, [r7, #10]
	udp_pkt->len = be16toword(len);
 8001fca:	897b      	ldrh	r3, [r7, #10]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	809a      	strh	r2, [r3, #4]
	udp_pkt->cs=0;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	80da      	strh	r2, [r3, #6]
	udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f1a3 0008 	sub.w	r0, r3, #8
 8001fee:	897b      	ldrh	r3, [r7, #10]
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7ff f9dc 	bl	80013b4 <checksum>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	80da      	strh	r2, [r3, #6]
	//Заполним заголовок пакета IP
	len+=sizeof(ip_pkt_ptr);
 8002004:	897b      	ldrh	r3, [r7, #10]
 8002006:	3314      	adds	r3, #20
 8002008:	817b      	strh	r3, [r7, #10]
	ip_pkt->len=be16toword(len);
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	b29b      	uxth	r3, r3
 8002010:	b21a      	sxth	r2, r3
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21b      	sxth	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b21b      	sxth	r3, r3
 800201c:	b29a      	uxth	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	805a      	strh	r2, [r3, #2]
	ip_pkt->id = 0;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	809a      	strh	r2, [r3, #4]
	ip_pkt->ts = 0;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	705a      	strb	r2, [r3, #1]
	ip_pkt->verlen = 0x45;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2245      	movs	r2, #69	; 0x45
 8002032:	701a      	strb	r2, [r3, #0]
	ip_pkt->fl_frg_of=0;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2200      	movs	r2, #0
 8002038:	80da      	strh	r2, [r3, #6]
	ip_pkt->ttl=128;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	721a      	strb	r2, [r3, #8]
	ip_pkt->cs = 0;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2200      	movs	r2, #0
 8002044:	815a      	strh	r2, [r3, #10]
	ip_pkt->prt=IP_UDP;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2211      	movs	r2, #17
 800204a:	725a      	strb	r2, [r3, #9]
	memcpy(ip_pkt->ipaddr_dst,ip_addr,4);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3310      	adds	r3, #16
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	601a      	str	r2, [r3, #0]
	memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	330c      	adds	r3, #12
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <ntp_request+0x140>)
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	601a      	str	r2, [r3, #0]
	ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8002060:	2200      	movs	r2, #0
 8002062:	2114      	movs	r1, #20
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f7ff f9a5 	bl	80013b4 <checksum>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	815a      	strh	r2, [r3, #10]
  //Заполним заголовок пакета Ethernet
  memcpy(frame->addr_src,macaddr,6);
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3306      	adds	r3, #6
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <ntp_request+0x144>)
 8002078:	6811      	ldr	r1, [r2, #0]
 800207a:	6019      	str	r1, [r3, #0]
 800207c:	8892      	ldrh	r2, [r2, #4]
 800207e:	809a      	strh	r2, [r3, #4]
	memcpy(frame->addr_dest,ntpprop.macaddr_dst,6);
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <ntp_request+0x148>)
 8002084:	3309      	adds	r3, #9
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	8093      	strh	r3, [r2, #4]
  frame->type=ETH_IP;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2208      	movs	r2, #8
 8002092:	819a      	strh	r2, [r3, #12]
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	330e      	adds	r3, #14
 8002098:	b29b      	uxth	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	69b8      	ldr	r0, [r7, #24]
 800209e:	f7ff f82b 	bl	80010f8 <enc28j60_packetSend>
  return res;
 80020a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20000180 	.word	0x20000180
 80020b0:	20000010 	.word	0x20000010
 80020b4:	20000008 	.word	0x20000008
 80020b8:	200003e8 	.word	0x200003e8

080020bc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_SPI2_Init+0x64>)
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <MX_SPI2_Init+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_SPI2_Init+0x64>)
 80020c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_SPI2_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_SPI2_Init+0x64>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_SPI2_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_SPI2_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_SPI2_Init+0x64>)
 80020e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_SPI2_Init+0x64>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <MX_SPI2_Init+0x64>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_SPI2_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <MX_SPI2_Init+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_SPI2_Init+0x64>)
 8002108:	220a      	movs	r2, #10
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_SPI2_Init+0x64>)
 800210e:	f002 f9fb 	bl	8004508 <HAL_SPI_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002118:	f7ff f91f 	bl	800135a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000400 	.word	0x20000400
 8002124:	40003800 	.word	0x40003800

08002128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_SPI_MspInit+0x8c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d131      	bne.n	80021ac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 800214e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002152:	61d3      	str	r3, [r2, #28]
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_SPI_MspInit+0x90>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002178:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800217c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	4619      	mov	r1, r3
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <HAL_SPI_MspInit+0x94>)
 800218e:	f001 fbed 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_SPI_MspInit+0x94>)
 80021a8:	f001 fbe0 	bl	800396c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40003800 	.word	0x40003800
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010c00 	.word	0x40010c00

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_MspInit+0x5c>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <HAL_MspInit+0x5c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_MspInit+0x5c>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_MspInit+0x5c>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_MspInit+0x5c>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_MspInit+0x5c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_MspInit+0x60>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_MspInit+0x60>)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226a:	f001 f975 	bl	8003558 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800226e:	f001 fac0 	bl	80037f2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM2_IRQHandler+0x10>)
 800227e:	f002 fcb1 	bl	8004be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000464 	.word	0x20000464

0800228c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART2_IRQHandler+0x10>)
 8002292:	f003 f90f 	bl	80054b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200004ac 	.word	0x200004ac

080022a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_EXTIO12_Pin);
 80022a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022a8:	f001 fcfc 	bl	8003ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return 1;
 80022b4:	2301      	movs	r3, #1
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <_kill>:

int _kill(int pid, int sig)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c8:	f003 fd20 	bl	8005d0c <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2216      	movs	r2, #22
 80022d0:	601a      	str	r2, [r3, #0]
	return -1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_exit>:

void _exit (int status)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e6:	f04f 31ff 	mov.w	r1, #4294967295
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffe7 	bl	80022be <_kill>
	while (1) {}		/* Make sure we hang here */
 80022f0:	e7fe      	b.n	80022f0 <_exit+0x12>

080022f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e00a      	b.n	800231a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002304:	f3af 8000 	nop.w
 8002308:	4601      	mov	r1, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	60ba      	str	r2, [r7, #8]
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	dbf0      	blt.n	8002304 <_read+0x12>
	}

return len;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e009      	b.n	8002352 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	60ba      	str	r2, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	dbf1      	blt.n	800233e <_write+0x12>
	}
	return len;
 800235a:	687b      	ldr	r3, [r7, #4]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_close>:

int _close(int file)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	return -1;
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238a:	605a      	str	r2, [r3, #4]
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <_isatty>:

int _isatty(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023cc:	4a14      	ldr	r2, [pc, #80]	; (8002420 <_sbrk+0x5c>)
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <_sbrk+0x60>)
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <_sbrk+0x64>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <_sbrk+0x68>)
 80023e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d207      	bcs.n	8002404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f4:	f003 fc8a 	bl	8005d0c <__errno>
 80023f8:	4603      	mov	r3, r0
 80023fa:	220c      	movs	r2, #12
 80023fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	e009      	b.n	8002418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <_sbrk+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <_sbrk+0x64>)
 8002414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20005000 	.word	0x20005000
 8002424:	00000800 	.word	0x00000800
 8002428:	2000045c 	.word	0x2000045c
 800242c:	20000530 	.word	0x20000530

08002430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <tcp_send>:
extern uint8_t net_buf[ENC28J60_MAXFRAME];
extern uint8_t macaddr[6];
extern uint8_t ipaddr[4];
//----------------отправки пакета TCP----------------------------------
uint8_t tcp_send(uint8_t *ip_addr, uint16_t port, uint8_t op)
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
 8002448:	4613      	mov	r3, r2
 800244a:	707b      	strb	r3, [r7, #1]
	uint16_t sz_data=0;
 800244c:	2300      	movs	r3, #0
 800244e:	83fb      	strh	r3, [r7, #30]
  uint8_t res=0;
 8002450:	2300      	movs	r3, #0
 8002452:	777b      	strb	r3, [r7, #29]
  uint16_t len=0;
 8002454:	2300      	movs	r3, #0
 8002456:	837b      	strh	r3, [r7, #26]
  //подключимся ко всем пакетам
	static uint32_t num_seg=0;
	enc28j60_frame_ptr *frame=(void*) net_buf;
 8002458:	4b9b      	ldr	r3, [pc, #620]	; (80026c8 <tcp_send+0x28c>)
 800245a:	617b      	str	r3, [r7, #20]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	330e      	adds	r3, #14
 8002460:	613b      	str	r3, [r7, #16]
	tcp_pkt_ptr *tcp_pkt = (void*)(ip_pkt->data);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	3314      	adds	r3, #20
 8002466:	60fb      	str	r3, [r7, #12]
	if (op==TCP_OP_SYNACK)//отфильтруемся именно по операции ответа на попытку подключения
 8002468:	787b      	ldrb	r3, [r7, #1]
 800246a:	2b01      	cmp	r3, #1
 800246c:	f040 813a 	bne.w	80026e4 <tcp_send+0x2a8>
	{
		//Заполним заголовок пакета TCP
		tcp_pkt->port_dst = be16toword(port);
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	b29b      	uxth	r3, r3
 8002476:	b21a      	sxth	r2, r3
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	b21b      	sxth	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b21b      	sxth	r3, r3
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	805a      	strh	r2, [r3, #2]
		tcp_pkt->port_src = be16toword(LOCAL_PORT_TCP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800248e:	801a      	strh	r2, [r3, #0]
		tcp_pkt->num_ask = be32todword(be32todword(tcp_pkt->bt_num_seg) + 1);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0e1a      	lsrs	r2, r3, #24
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024a0:	431a      	orrs	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	4313      	orrs	r3, r2
 80024b6:	3301      	adds	r3, #1
 80024b8:	0e1a      	lsrs	r2, r3, #24
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	0e19      	lsrs	r1, r3, #24
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024ca:	4319      	orrs	r1, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024d6:	4319      	orrs	r1, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	430b      	orrs	r3, r1
 80024e0:	3301      	adds	r3, #1
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0e19      	lsrs	r1, r3, #24
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024fa:	4319      	orrs	r1, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002506:	4319      	orrs	r1, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	430b      	orrs	r3, r1
 8002510:	3301      	adds	r3, #1
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0e19      	lsrs	r1, r3, #24
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800252a:	4319      	orrs	r1, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002536:	4319      	orrs	r1, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	430b      	orrs	r3, r1
 8002540:	3301      	adds	r3, #1
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	431a      	orrs	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
		tcp_pkt->bt_num_seg = rand();
 800254a:	f003 fe2b 	bl	80061a4 <rand>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
		tcp_pkt->fl = TCP_SYN | TCP_ACK;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2212      	movs	r2, #18
 800255a:	735a      	strb	r2, [r3, #13]
		tcp_pkt->size_wnd = be16toword(8192);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	81da      	strh	r2, [r3, #14]
		tcp_pkt->urg_ptr = 0;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	825a      	strh	r2, [r3, #18]
		len = sizeof(tcp_pkt_ptr)+4;
 8002568:	2318      	movs	r3, #24
 800256a:	837b      	strh	r3, [r7, #26]
		tcp_pkt->len_hdr = len << 2;
 800256c:	8b7b      	ldrh	r3, [r7, #26]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	731a      	strb	r2, [r3, #12]
		tcp_pkt->data[0]=2;//Maximum Segment Size (2)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2202      	movs	r2, #2
 800257c:	751a      	strb	r2, [r3, #20]
		tcp_pkt->data[1]=4;//Length
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2204      	movs	r2, #4
 8002582:	755a      	strb	r2, [r3, #21]
		tcp_pkt->data[2]=0x05;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2205      	movs	r2, #5
 8002588:	759a      	strb	r2, [r3, #22]
		tcp_pkt->data[3]=0x82;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2282      	movs	r2, #130	; 0x82
 800258e:	75da      	strb	r2, [r3, #23]
		tcp_pkt->cs = 0;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	821a      	strh	r2, [r3, #16]
		tcp_pkt->cs=checksum((uint8_t*)tcp_pkt-8, len+8, 2);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1a3 0008 	sub.w	r0, r3, #8
 800259c:	8b7b      	ldrh	r3, [r7, #26]
 800259e:	3308      	adds	r3, #8
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2202      	movs	r2, #2
 80025a4:	4619      	mov	r1, r3
 80025a6:	f7fe ff05 	bl	80013b4 <checksum>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	821a      	strh	r2, [r3, #16]
		//Заполним заголовок пакета IP
		sprintf(str1,"len:%d\r\n", len);
 80025b2:	8b7b      	ldrh	r3, [r7, #26]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4945      	ldr	r1, [pc, #276]	; (80026cc <tcp_send+0x290>)
 80025b8:	4845      	ldr	r0, [pc, #276]	; (80026d0 <tcp_send+0x294>)
 80025ba:	f003 fe41 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80025be:	4844      	ldr	r0, [pc, #272]	; (80026d0 <tcp_send+0x294>)
 80025c0:	f7fd fdce 	bl	8000160 <strlen>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025cc:	4940      	ldr	r1, [pc, #256]	; (80026d0 <tcp_send+0x294>)
 80025ce:	4841      	ldr	r0, [pc, #260]	; (80026d4 <tcp_send+0x298>)
 80025d0:	f002 fead 	bl	800532e <HAL_UART_Transmit>
		len+=sizeof(ip_pkt_ptr);
 80025d4:	8b7b      	ldrh	r3, [r7, #26]
 80025d6:	3314      	adds	r3, #20
 80025d8:	837b      	strh	r3, [r7, #26]
		sprintf(str1,"len:%d\r\n", len);
 80025da:	8b7b      	ldrh	r3, [r7, #26]
 80025dc:	461a      	mov	r2, r3
 80025de:	493b      	ldr	r1, [pc, #236]	; (80026cc <tcp_send+0x290>)
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <tcp_send+0x294>)
 80025e2:	f003 fe2d 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80025e6:	483a      	ldr	r0, [pc, #232]	; (80026d0 <tcp_send+0x294>)
 80025e8:	f7fd fdba 	bl	8000160 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f4:	4936      	ldr	r1, [pc, #216]	; (80026d0 <tcp_send+0x294>)
 80025f6:	4837      	ldr	r0, [pc, #220]	; (80026d4 <tcp_send+0x298>)
 80025f8:	f002 fe99 	bl	800532e <HAL_UART_Transmit>
		ip_pkt->len=be16toword(len);
 80025fc:	8b7b      	ldrh	r3, [r7, #26]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29b      	uxth	r3, r3
 8002602:	b21a      	sxth	r2, r3
 8002604:	8b7b      	ldrh	r3, [r7, #26]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	b21b      	sxth	r3, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	b21b      	sxth	r3, r3
 800260e:	b29a      	uxth	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	805a      	strh	r2, [r3, #2]
		ip_pkt->id = 0;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2200      	movs	r2, #0
 8002618:	809a      	strh	r2, [r3, #4]
		ip_pkt->ts = 0;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2200      	movs	r2, #0
 800261e:	705a      	strb	r2, [r3, #1]
		ip_pkt->verlen = 0x45;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2245      	movs	r2, #69	; 0x45
 8002624:	701a      	strb	r2, [r3, #0]
		ip_pkt->fl_frg_of=0;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2200      	movs	r2, #0
 800262a:	80da      	strh	r2, [r3, #6]
		ip_pkt->ttl=128;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	721a      	strb	r2, [r3, #8]
		ip_pkt->cs = 0;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2200      	movs	r2, #0
 8002636:	815a      	strh	r2, [r3, #10]
		ip_pkt->prt=IP_TCP;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2206      	movs	r2, #6
 800263c:	725a      	strb	r2, [r3, #9]
		memcpy(ip_pkt->ipaddr_dst,ip_addr,4);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3310      	adds	r3, #16
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	601a      	str	r2, [r3, #0]
		memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	330c      	adds	r3, #12
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <tcp_send+0x29c>)
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	601a      	str	r2, [r3, #0]
		ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8002652:	2200      	movs	r2, #0
 8002654:	2114      	movs	r1, #20
 8002656:	6938      	ldr	r0, [r7, #16]
 8002658:	f7fe feac 	bl	80013b4 <checksum>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	815a      	strh	r2, [r3, #10]
		//Заполним заголовок Ethernet
		memcpy(frame->addr_dest,frame->addr_src,6);
 8002664:	6978      	ldr	r0, [r7, #20]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3306      	adds	r3, #6
 800266a:	2206      	movs	r2, #6
 800266c:	4619      	mov	r1, r3
 800266e:	f003 fca7 	bl	8005fc0 <memcpy>
		memcpy(frame->addr_src,macaddr,6);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3306      	adds	r3, #6
 8002676:	4a19      	ldr	r2, [pc, #100]	; (80026dc <tcp_send+0x2a0>)
 8002678:	6811      	ldr	r1, [r2, #0]
 800267a:	6019      	str	r1, [r3, #0]
 800267c:	8892      	ldrh	r2, [r2, #4]
 800267e:	809a      	strh	r2, [r3, #4]
		frame->type=ETH_IP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2208      	movs	r2, #8
 8002684:	819a      	strh	r2, [r3, #12]
		len+=sizeof(enc28j60_frame_ptr);
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	330e      	adds	r3, #14
 800268a:	837b      	strh	r3, [r7, #26]
		enc28j60_packetSend((void*)frame,len);
 800268c:	8b7b      	ldrh	r3, [r7, #26]
 800268e:	4619      	mov	r1, r3
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f7fe fd31 	bl	80010f8 <enc28j60_packetSend>
		//отобразим в терминальной программе длину нашего пакета и тип нашего отправленного пакета TCP
		sprintf(str1,"len:%d\r\n", len);
 8002696:	8b7b      	ldrh	r3, [r7, #26]
 8002698:	461a      	mov	r2, r3
 800269a:	490c      	ldr	r1, [pc, #48]	; (80026cc <tcp_send+0x290>)
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <tcp_send+0x294>)
 800269e:	f003 fdcf 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80026a2:	480b      	ldr	r0, [pc, #44]	; (80026d0 <tcp_send+0x294>)
 80026a4:	f7fd fd5c 	bl	8000160 <strlen>
 80026a8:	4603      	mov	r3, r0
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <tcp_send+0x294>)
 80026b2:	4808      	ldr	r0, [pc, #32]	; (80026d4 <tcp_send+0x298>)
 80026b4:	f002 fe3b 	bl	800532e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,(uint8_t*)"SYN ACK\r\n",9,0x1000);
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	2209      	movs	r2, #9
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <tcp_send+0x2a4>)
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <tcp_send+0x298>)
 80026c2:	f002 fe34 	bl	800532e <HAL_UART_Transmit>
 80026c6:	e316      	b.n	8002cf6 <tcp_send+0x8ba>
 80026c8:	20000180 	.word	0x20000180
 80026cc:	080086d4 	.word	0x080086d4
 80026d0:	20000384 	.word	0x20000384
 80026d4:	200004ac 	.word	0x200004ac
 80026d8:	20000010 	.word	0x20000010
 80026dc:	20000008 	.word	0x20000008
 80026e0:	080086e0 	.word	0x080086e0
	}
	else if (op==TCP_OP_ACK_OF_FIN)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	f040 8148 	bne.w	800297c <tcp_send+0x540>
	{
		//Заполним заголовок пакета TCP
		tcp_pkt->port_dst = be16toword(port);
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4313      	orrs	r3, r2
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	805a      	strh	r2, [r3, #2]
		tcp_pkt->port_src = be16toword(LOCAL_PORT_TCP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800270a:	801a      	strh	r2, [r3, #0]
		num_seg = tcp_pkt->num_ask;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a93      	ldr	r2, [pc, #588]	; (8002960 <tcp_send+0x524>)
 8002712:	6013      	str	r3, [r2, #0]
		tcp_pkt->num_ask = be32todword(be32todword(tcp_pkt->bt_num_seg) + 1);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0e1a      	lsrs	r2, r3, #24
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	061b      	lsls	r3, r3, #24
 8002738:	4313      	orrs	r3, r2
 800273a:	3301      	adds	r3, #1
 800273c:	0e1a      	lsrs	r2, r3, #24
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0e19      	lsrs	r1, r3, #24
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800274e:	4319      	orrs	r1, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800275a:	4319      	orrs	r1, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	430b      	orrs	r3, r1
 8002764:	3301      	adds	r3, #1
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0e19      	lsrs	r1, r3, #24
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800277e:	4319      	orrs	r1, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800278a:	4319      	orrs	r1, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	430b      	orrs	r3, r1
 8002794:	3301      	adds	r3, #1
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0e19      	lsrs	r1, r3, #24
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80027ae:	4319      	orrs	r1, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027ba:	4319      	orrs	r1, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	430b      	orrs	r3, r1
 80027c4:	3301      	adds	r3, #1
 80027c6:	061b      	lsls	r3, r3, #24
 80027c8:	431a      	orrs	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	609a      	str	r2, [r3, #8]
		//передадим 0 в USART, иначе подвисает код
		HAL_UART_Transmit(&huart2,(uint8_t*)0,1,0x1000);
 80027ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d2:	2201      	movs	r2, #1
 80027d4:	2100      	movs	r1, #0
 80027d6:	4863      	ldr	r0, [pc, #396]	; (8002964 <tcp_send+0x528>)
 80027d8:	f002 fda9 	bl	800532e <HAL_UART_Transmit>
		tcp_pkt->bt_num_seg = num_seg;
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <tcp_send+0x524>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
		tcp_pkt->fl = TCP_ACK;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2210      	movs	r2, #16
 80027e8:	735a      	strb	r2, [r3, #13]
		tcp_pkt->size_wnd = be16toword(8192);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	81da      	strh	r2, [r3, #14]
		tcp_pkt->urg_ptr = 0;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	825a      	strh	r2, [r3, #18]
		len = sizeof(tcp_pkt_ptr);
 80027f6:	2314      	movs	r3, #20
 80027f8:	837b      	strh	r3, [r7, #26]
		tcp_pkt->len_hdr = len << 2;
 80027fa:	8b7b      	ldrh	r3, [r7, #26]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	731a      	strb	r2, [r3, #12]
		tcp_pkt->cs = 0;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	821a      	strh	r2, [r3, #16]
		tcp_pkt->cs=checksum((uint8_t*)tcp_pkt-8, len+8, 2);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f1a3 0008 	sub.w	r0, r3, #8
 8002812:	8b7b      	ldrh	r3, [r7, #26]
 8002814:	3308      	adds	r3, #8
 8002816:	b29b      	uxth	r3, r3
 8002818:	2202      	movs	r2, #2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe fdca 	bl	80013b4 <checksum>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	821a      	strh	r2, [r3, #16]
		//Заполним заголовок пакета IP
		sprintf(str1,"len:%d\r\n", len);
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	461a      	mov	r2, r3
 800282c:	494e      	ldr	r1, [pc, #312]	; (8002968 <tcp_send+0x52c>)
 800282e:	484f      	ldr	r0, [pc, #316]	; (800296c <tcp_send+0x530>)
 8002830:	f003 fd06 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002834:	484d      	ldr	r0, [pc, #308]	; (800296c <tcp_send+0x530>)
 8002836:	f7fd fc93 	bl	8000160 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002842:	494a      	ldr	r1, [pc, #296]	; (800296c <tcp_send+0x530>)
 8002844:	4847      	ldr	r0, [pc, #284]	; (8002964 <tcp_send+0x528>)
 8002846:	f002 fd72 	bl	800532e <HAL_UART_Transmit>
		len+=sizeof(ip_pkt_ptr);
 800284a:	8b7b      	ldrh	r3, [r7, #26]
 800284c:	3314      	adds	r3, #20
 800284e:	837b      	strh	r3, [r7, #26]
		sprintf(str1,"len:%d\r\n", len);
 8002850:	8b7b      	ldrh	r3, [r7, #26]
 8002852:	461a      	mov	r2, r3
 8002854:	4944      	ldr	r1, [pc, #272]	; (8002968 <tcp_send+0x52c>)
 8002856:	4845      	ldr	r0, [pc, #276]	; (800296c <tcp_send+0x530>)
 8002858:	f003 fcf2 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800285c:	4843      	ldr	r0, [pc, #268]	; (800296c <tcp_send+0x530>)
 800285e:	f7fd fc7f 	bl	8000160 <strlen>
 8002862:	4603      	mov	r3, r0
 8002864:	b29a      	uxth	r2, r3
 8002866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286a:	4940      	ldr	r1, [pc, #256]	; (800296c <tcp_send+0x530>)
 800286c:	483d      	ldr	r0, [pc, #244]	; (8002964 <tcp_send+0x528>)
 800286e:	f002 fd5e 	bl	800532e <HAL_UART_Transmit>
		ip_pkt->len=be16toword(len);
 8002872:	8b7b      	ldrh	r3, [r7, #26]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	b29b      	uxth	r3, r3
 8002878:	b21a      	sxth	r2, r3
 800287a:	8b7b      	ldrh	r3, [r7, #26]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	b21b      	sxth	r3, r3
 8002880:	4313      	orrs	r3, r2
 8002882:	b21b      	sxth	r3, r3
 8002884:	b29a      	uxth	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	805a      	strh	r2, [r3, #2]
		ip_pkt->id = 0;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2200      	movs	r2, #0
 800288e:	809a      	strh	r2, [r3, #4]
		ip_pkt->ts = 0;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2200      	movs	r2, #0
 8002894:	705a      	strb	r2, [r3, #1]
		ip_pkt->verlen = 0x45;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2245      	movs	r2, #69	; 0x45
 800289a:	701a      	strb	r2, [r3, #0]
		ip_pkt->fl_frg_of=0;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2200      	movs	r2, #0
 80028a0:	80da      	strh	r2, [r3, #6]
		ip_pkt->ttl=128;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	721a      	strb	r2, [r3, #8]
		ip_pkt->cs = 0;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2200      	movs	r2, #0
 80028ac:	815a      	strh	r2, [r3, #10]
		ip_pkt->prt=IP_TCP;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2206      	movs	r2, #6
 80028b2:	725a      	strb	r2, [r3, #9]
		memcpy(ip_pkt->ipaddr_dst,ip_addr,4);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	3310      	adds	r3, #16
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	601a      	str	r2, [r3, #0]
		memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	330c      	adds	r3, #12
 80028c2:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <tcp_send+0x534>)
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	601a      	str	r2, [r3, #0]
		ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2114      	movs	r1, #20
 80028cc:	6938      	ldr	r0, [r7, #16]
 80028ce:	f7fe fd71 	bl	80013b4 <checksum>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	815a      	strh	r2, [r3, #10]
		//Заполним заголовок Ethernet
		memcpy(frame->addr_dest,frame->addr_src,6);
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3306      	adds	r3, #6
 80028e0:	2206      	movs	r2, #6
 80028e2:	4619      	mov	r1, r3
 80028e4:	f003 fb6c 	bl	8005fc0 <memcpy>
		memcpy(frame->addr_src,macaddr,6);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	3306      	adds	r3, #6
 80028ec:	4a21      	ldr	r2, [pc, #132]	; (8002974 <tcp_send+0x538>)
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	6019      	str	r1, [r3, #0]
 80028f2:	8892      	ldrh	r2, [r2, #4]
 80028f4:	809a      	strh	r2, [r3, #4]
		frame->type=ETH_IP;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2208      	movs	r2, #8
 80028fa:	819a      	strh	r2, [r3, #12]
		len+=sizeof(enc28j60_frame_ptr);
 80028fc:	8b7b      	ldrh	r3, [r7, #26]
 80028fe:	330e      	adds	r3, #14
 8002900:	837b      	strh	r3, [r7, #26]
		enc28j60_packetSend((void*)frame,len);
 8002902:	8b7b      	ldrh	r3, [r7, #26]
 8002904:	4619      	mov	r1, r3
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7fe fbf6 	bl	80010f8 <enc28j60_packetSend>
		HAL_UART_Transmit(&huart2,(uint8_t*)"ACK OF FIN\r\n",12,0x1000);
 800290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002910:	220c      	movs	r2, #12
 8002912:	4919      	ldr	r1, [pc, #100]	; (8002978 <tcp_send+0x53c>)
 8002914:	4813      	ldr	r0, [pc, #76]	; (8002964 <tcp_send+0x528>)
 8002916:	f002 fd0a 	bl	800532e <HAL_UART_Transmit>
		tcp_pkt->fl = TCP_FIN|TCP_ACK;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2211      	movs	r2, #17
 800291e:	735a      	strb	r2, [r3, #13]
    len = sizeof(tcp_pkt_ptr);
 8002920:	2314      	movs	r3, #20
 8002922:	837b      	strh	r3, [r7, #26]
    tcp_pkt->cs = 0;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	821a      	strh	r2, [r3, #16]
    tcp_pkt->cs=checksum((uint8_t*)tcp_pkt-8, len+8, 2);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f1a3 0008 	sub.w	r0, r3, #8
 8002930:	8b7b      	ldrh	r3, [r7, #26]
 8002932:	3308      	adds	r3, #8
 8002934:	b29b      	uxth	r3, r3
 8002936:	2202      	movs	r2, #2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe fd3b 	bl	80013b4 <checksum>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	821a      	strh	r2, [r3, #16]
    len+=sizeof(ip_pkt_ptr);
 8002946:	8b7b      	ldrh	r3, [r7, #26]
 8002948:	3314      	adds	r3, #20
 800294a:	837b      	strh	r3, [r7, #26]
    len+=sizeof(enc28j60_frame_ptr);
 800294c:	8b7b      	ldrh	r3, [r7, #26]
 800294e:	330e      	adds	r3, #14
 8002950:	837b      	strh	r3, [r7, #26]
    enc28j60_packetSend((void*)frame,len);
 8002952:	8b7b      	ldrh	r3, [r7, #26]
 8002954:	4619      	mov	r1, r3
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7fe fbce 	bl	80010f8 <enc28j60_packetSend>
 800295c:	e1cb      	b.n	8002cf6 <tcp_send+0x8ba>
 800295e:	bf00      	nop
 8002960:	20000460 	.word	0x20000460
 8002964:	200004ac 	.word	0x200004ac
 8002968:	080086d4 	.word	0x080086d4
 800296c:	20000384 	.word	0x20000384
 8002970:	20000010 	.word	0x20000010
 8002974:	20000008 	.word	0x20000008
 8002978:	080086ec 	.word	0x080086ec
	}
	else if (op==TCP_OP_ACK_OF_DATA)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b04      	cmp	r3, #4
 8002980:	f040 81b9 	bne.w	8002cf6 <tcp_send+0x8ba>
	{
		//Заполним заголовок пакета TCP
		sz_data = be16toword(ip_pkt->len)-20-(tcp_pkt->len_hdr>>2);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	885b      	ldrh	r3, [r3, #2]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	b29b      	uxth	r3, r3
 800298c:	b21a      	sxth	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	885b      	ldrh	r3, [r3, #2]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	b21b      	sxth	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b21b      	sxth	r3, r3
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	7b1b      	ldrb	r3, [r3, #12]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b14      	subs	r3, #20
 80029ac:	83fb      	strh	r3, [r7, #30]
		tcp_pkt->port_dst = be16toword(port);
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	b21b      	sxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b21b      	sxth	r3, r3
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	805a      	strh	r2, [r3, #2]
		tcp_pkt->port_src = be16toword(LOCAL_PORT_TCP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 80029cc:	801a      	strh	r2, [r3, #0]
		num_seg = tcp_pkt->num_ask;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4ab0      	ldr	r2, [pc, #704]	; (8002c94 <tcp_send+0x858>)
 80029d4:	6013      	str	r3, [r2, #0]
		tcp_pkt->num_ask = be32todword(be32todword(tcp_pkt->bt_num_seg) + sz_data);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	0e1a      	lsrs	r2, r3, #24
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80029e6:	431a      	orrs	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	431a      	orrs	r2, r3
 80029fc:	8bfb      	ldrh	r3, [r7, #30]
 80029fe:	4413      	add	r3, r2
 8002a00:	0e1a      	lsrs	r2, r3, #24
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0e19      	lsrs	r1, r3, #24
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a12:	4319      	orrs	r1, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a1e:	4319      	orrs	r1, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	4319      	orrs	r1, r3
 8002a28:	8bfb      	ldrh	r3, [r7, #30]
 8002a2a:	440b      	add	r3, r1
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0e19      	lsrs	r1, r3, #24
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a44:	4319      	orrs	r1, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a50:	4319      	orrs	r1, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	061b      	lsls	r3, r3, #24
 8002a58:	4319      	orrs	r1, r3
 8002a5a:	8bfb      	ldrh	r3, [r7, #30]
 8002a5c:	440b      	add	r3, r1
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0e19      	lsrs	r1, r3, #24
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a76:	4319      	orrs	r1, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a82:	4319      	orrs	r1, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	4319      	orrs	r1, r3
 8002a8c:	8bfb      	ldrh	r3, [r7, #30]
 8002a8e:	440b      	add	r3, r1
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
		sprintf(str1,"sz_data:%u\r\n", sz_data);
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	497e      	ldr	r1, [pc, #504]	; (8002c98 <tcp_send+0x85c>)
 8002a9e:	487f      	ldr	r0, [pc, #508]	; (8002c9c <tcp_send+0x860>)
 8002aa0:	f003 fbce 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002aa4:	487d      	ldr	r0, [pc, #500]	; (8002c9c <tcp_send+0x860>)
 8002aa6:	f7fd fb5b 	bl	8000160 <strlen>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab2:	497a      	ldr	r1, [pc, #488]	; (8002c9c <tcp_send+0x860>)
 8002ab4:	487a      	ldr	r0, [pc, #488]	; (8002ca0 <tcp_send+0x864>)
 8002ab6:	f002 fc3a 	bl	800532e <HAL_UART_Transmit>
		tcp_pkt->bt_num_seg = num_seg;
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <tcp_send+0x858>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	605a      	str	r2, [r3, #4]
		tcp_pkt->fl = TCP_ACK;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	735a      	strb	r2, [r3, #13]
		tcp_pkt->size_wnd = be16toword(8192);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	81da      	strh	r2, [r3, #14]
		tcp_pkt->urg_ptr = 0;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	825a      	strh	r2, [r3, #18]
		len = sizeof(tcp_pkt_ptr);
 8002ad4:	2314      	movs	r3, #20
 8002ad6:	837b      	strh	r3, [r7, #26]
		tcp_pkt->len_hdr = len << 2;
 8002ad8:	8b7b      	ldrh	r3, [r7, #26]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	731a      	strb	r2, [r3, #12]
		tcp_pkt->cs = 0;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	821a      	strh	r2, [r3, #16]
		tcp_pkt->cs=checksum((uint8_t*)tcp_pkt-8, len+8, 2);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1a3 0008 	sub.w	r0, r3, #8
 8002af0:	8b7b      	ldrh	r3, [r7, #26]
 8002af2:	3308      	adds	r3, #8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2202      	movs	r2, #2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f7fe fc5b 	bl	80013b4 <checksum>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	821a      	strh	r2, [r3, #16]
		//Заполним заголовок пакета IP
		sprintf(str1,"len:%d\r\n", len);
 8002b06:	8b7b      	ldrh	r3, [r7, #26]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4966      	ldr	r1, [pc, #408]	; (8002ca4 <tcp_send+0x868>)
 8002b0c:	4863      	ldr	r0, [pc, #396]	; (8002c9c <tcp_send+0x860>)
 8002b0e:	f003 fb97 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002b12:	4862      	ldr	r0, [pc, #392]	; (8002c9c <tcp_send+0x860>)
 8002b14:	f7fd fb24 	bl	8000160 <strlen>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	495e      	ldr	r1, [pc, #376]	; (8002c9c <tcp_send+0x860>)
 8002b22:	485f      	ldr	r0, [pc, #380]	; (8002ca0 <tcp_send+0x864>)
 8002b24:	f002 fc03 	bl	800532e <HAL_UART_Transmit>
		len+=sizeof(ip_pkt_ptr);
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	837b      	strh	r3, [r7, #26]
		sprintf(str1,"len:%d\r\n", len);
 8002b2e:	8b7b      	ldrh	r3, [r7, #26]
 8002b30:	461a      	mov	r2, r3
 8002b32:	495c      	ldr	r1, [pc, #368]	; (8002ca4 <tcp_send+0x868>)
 8002b34:	4859      	ldr	r0, [pc, #356]	; (8002c9c <tcp_send+0x860>)
 8002b36:	f003 fb83 	bl	8006240 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002b3a:	4858      	ldr	r0, [pc, #352]	; (8002c9c <tcp_send+0x860>)
 8002b3c:	f7fd fb10 	bl	8000160 <strlen>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b48:	4954      	ldr	r1, [pc, #336]	; (8002c9c <tcp_send+0x860>)
 8002b4a:	4855      	ldr	r0, [pc, #340]	; (8002ca0 <tcp_send+0x864>)
 8002b4c:	f002 fbef 	bl	800532e <HAL_UART_Transmit>
		ip_pkt->len=be16toword(len);
 8002b50:	8b7b      	ldrh	r3, [r7, #26]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b21a      	sxth	r2, r3
 8002b58:	8b7b      	ldrh	r3, [r7, #26]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	805a      	strh	r2, [r3, #2]
		ip_pkt->id = 0;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	809a      	strh	r2, [r3, #4]
		ip_pkt->ts = 0;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
		ip_pkt->verlen = 0x45;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2245      	movs	r2, #69	; 0x45
 8002b78:	701a      	strb	r2, [r3, #0]
		ip_pkt->fl_frg_of=0;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	80da      	strh	r2, [r3, #6]
		ip_pkt->ttl=128;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	721a      	strb	r2, [r3, #8]
		ip_pkt->cs = 0;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	815a      	strh	r2, [r3, #10]
		ip_pkt->prt=IP_TCP;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2206      	movs	r2, #6
 8002b90:	725a      	strb	r2, [r3, #9]
		memcpy(ip_pkt->ipaddr_dst,ip_addr,4);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	3310      	adds	r3, #16
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	601a      	str	r2, [r3, #0]
		memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	4a41      	ldr	r2, [pc, #260]	; (8002ca8 <tcp_send+0x86c>)
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
		ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2114      	movs	r1, #20
 8002baa:	6938      	ldr	r0, [r7, #16]
 8002bac:	f7fe fc02 	bl	80013b4 <checksum>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	815a      	strh	r2, [r3, #10]
		//Заполним заголовок Ethernet
		memcpy(frame->addr_dest,frame->addr_src,6);
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	2206      	movs	r2, #6
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f003 f9fd 	bl	8005fc0 <memcpy>
		memcpy(frame->addr_src,macaddr,6);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	4a38      	ldr	r2, [pc, #224]	; (8002cac <tcp_send+0x870>)
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	6019      	str	r1, [r3, #0]
 8002bd0:	8892      	ldrh	r2, [r2, #4]
 8002bd2:	809a      	strh	r2, [r3, #4]
		frame->type=ETH_IP;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	819a      	strh	r2, [r3, #12]
		len+=sizeof(enc28j60_frame_ptr);
 8002bda:	8b7b      	ldrh	r3, [r7, #26]
 8002bdc:	330e      	adds	r3, #14
 8002bde:	837b      	strh	r3, [r7, #26]
		enc28j60_packetSend((void*)frame,len);
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7fe fa87 	bl	80010f8 <enc28j60_packetSend>
		//Если пришло "Hello!!!", то отправим ответ
		if (!strcmp((char*)tcp_pkt->data,"Hello!!!"))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3314      	adds	r3, #20
 8002bee:	4930      	ldr	r1, [pc, #192]	; (8002cb0 <tcp_send+0x874>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd faab 	bl	800014c <strcmp>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d17c      	bne.n	8002cf6 <tcp_send+0x8ba>
		{
			strcpy((char*)tcp_pkt->data,"Hello to TCP Client!!!\r\n");
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <tcp_send+0x878>)
 8002c02:	461d      	mov	r5, r3
 8002c04:	4614      	mov	r4, r2
 8002c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c08:	6028      	str	r0, [r5, #0]
 8002c0a:	6069      	str	r1, [r5, #4]
 8002c0c:	60aa      	str	r2, [r5, #8]
 8002c0e:	60eb      	str	r3, [r5, #12]
 8002c10:	cc03      	ldmia	r4!, {r0, r1}
 8002c12:	6128      	str	r0, [r5, #16]
 8002c14:	6169      	str	r1, [r5, #20]
 8002c16:	7823      	ldrb	r3, [r4, #0]
 8002c18:	762b      	strb	r3, [r5, #24]
			tcp_pkt->fl = TCP_ACK|TCP_PSH;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2218      	movs	r2, #24
 8002c1e:	735a      	strb	r2, [r3, #13]
			sprintf(str1,"hdr_len:%d\r\n",sizeof(tcp_pkt_ptr));
 8002c20:	2214      	movs	r2, #20
 8002c22:	4925      	ldr	r1, [pc, #148]	; (8002cb8 <tcp_send+0x87c>)
 8002c24:	481d      	ldr	r0, [pc, #116]	; (8002c9c <tcp_send+0x860>)
 8002c26:	f003 fb0b 	bl	8006240 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002c2a:	481c      	ldr	r0, [pc, #112]	; (8002c9c <tcp_send+0x860>)
 8002c2c:	f7fd fa98 	bl	8000160 <strlen>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c38:	4918      	ldr	r1, [pc, #96]	; (8002c9c <tcp_send+0x860>)
 8002c3a:	4819      	ldr	r0, [pc, #100]	; (8002ca0 <tcp_send+0x864>)
 8002c3c:	f002 fb77 	bl	800532e <HAL_UART_Transmit>
			len = sizeof(tcp_pkt_ptr);
 8002c40:	2314      	movs	r3, #20
 8002c42:	837b      	strh	r3, [r7, #26]
			tcp_pkt->len_hdr = len << 2;
 8002c44:	8b7b      	ldrh	r3, [r7, #26]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	731a      	strb	r2, [r3, #12]
			len+=strlen((char*)tcp_pkt->data);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3314      	adds	r3, #20
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fa83 	bl	8000160 <strlen>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	8b7b      	ldrh	r3, [r7, #26]
 8002c60:	4413      	add	r3, r2
 8002c62:	837b      	strh	r3, [r7, #26]
			tcp_pkt->cs = 0;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	821a      	strh	r2, [r3, #16]
			tcp_pkt->cs=checksum((uint8_t*)tcp_pkt-8, len+8, 2);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1a3 0008 	sub.w	r0, r3, #8
 8002c70:	8b7b      	ldrh	r3, [r7, #26]
 8002c72:	3308      	adds	r3, #8
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2202      	movs	r2, #2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f7fe fb9b 	bl	80013b4 <checksum>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	821a      	strh	r2, [r3, #16]
			//Заполним заголовок пакета IP
			len+=sizeof(ip_pkt_ptr);
 8002c86:	8b7b      	ldrh	r3, [r7, #26]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	837b      	strh	r3, [r7, #26]
			ip_pkt->len=be16toword(len);
 8002c8c:	8b7b      	ldrh	r3, [r7, #26]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	e013      	b.n	8002cbc <tcp_send+0x880>
 8002c94:	20000460 	.word	0x20000460
 8002c98:	080086fc 	.word	0x080086fc
 8002c9c:	20000384 	.word	0x20000384
 8002ca0:	200004ac 	.word	0x200004ac
 8002ca4:	080086d4 	.word	0x080086d4
 8002ca8:	20000010 	.word	0x20000010
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	0800870c 	.word	0x0800870c
 8002cb4:	08008718 	.word	0x08008718
 8002cb8:	08008734 	.word	0x08008734
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	8b7b      	ldrh	r3, [r7, #26]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	805a      	strh	r2, [r3, #2]
			ip_pkt->cs = 0;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	815a      	strh	r2, [r3, #10]
			ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2114      	movs	r1, #20
 8002cd8:	6938      	ldr	r0, [r7, #16]
 8002cda:	f7fe fb6b 	bl	80013b4 <checksum>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	815a      	strh	r2, [r3, #10]
			len+=sizeof(enc28j60_frame_ptr);
 8002ce6:	8b7b      	ldrh	r3, [r7, #26]
 8002ce8:	330e      	adds	r3, #14
 8002cea:	837b      	strh	r3, [r7, #26]
			enc28j60_packetSend((void*)frame,len);
 8002cec:	8b7b      	ldrh	r3, [r7, #26]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7fe fa01 	bl	80010f8 <enc28j60_packetSend>
		}
	}
  return res;
 8002cf6:	7f7b      	ldrb	r3, [r7, #29]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bdb0      	pop	{r4, r5, r7, pc}

08002d00 <tcp_read>:
//------------------функцию приёма пакетов TCP--------------------------------
uint8_t tcp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	b08f      	sub	sp, #60	; 0x3c
 8002d04:	af08      	add	r7, sp, #32
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
  uint8_t res=0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	757b      	strb	r3, [r7, #21]
	uint16_t len_data=0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	827b      	strh	r3, [r7, #18]
	uint16_t i=0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	82fb      	strh	r3, [r7, #22]
	//подключимся к нашим заголовкам
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	330e      	adds	r3, #14
 8002d1c:	60fb      	str	r3, [r7, #12]
	tcp_pkt_ptr *tcp_pkt = (void*)(ip_pkt->data);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3314      	adds	r3, #20
 8002d22:	60bb      	str	r3, [r7, #8]
	//Посчитаем длину данных в пакете
	len_data = be16toword(ip_pkt->len)-20-(tcp_pkt->len_hdr>>2);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	885b      	ldrh	r3, [r3, #2]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b21a      	sxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	885b      	ldrh	r3, [r3, #2]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	4313      	orrs	r3, r2
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	7b1b      	ldrb	r3, [r3, #12]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b14      	subs	r3, #20
 8002d4c:	827b      	strh	r3, [r7, #18]
	//отобразим в ней некоторые данные пришедшего пакета
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d52:	469c      	mov	ip, r3
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d58:	469e      	mov	lr, r3
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d5e:	461a      	mov	r2, r3
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d64:	4619      	mov	r1, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3], len_data);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d6a:	4618      	mov	r0, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3], len_data);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d70:	461c      	mov	r4, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3], len_data);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	7c9b      	ldrb	r3, [r3, #18]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d76:	461d      	mov	r5, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3], len_data);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	7cdb      	ldrb	r3, [r3, #19]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d %d tcp\r\n",
 8002d7c:	461e      	mov	r6, r3
 8002d7e:	8a7b      	ldrh	r3, [r7, #18]
 8002d80:	9306      	str	r3, [sp, #24]
 8002d82:	9605      	str	r6, [sp, #20]
 8002d84:	9504      	str	r5, [sp, #16]
 8002d86:	9403      	str	r4, [sp, #12]
 8002d88:	9002      	str	r0, [sp, #8]
 8002d8a:	9101      	str	r1, [sp, #4]
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	4673      	mov	r3, lr
 8002d90:	4662      	mov	r2, ip
 8002d92:	4951      	ldr	r1, [pc, #324]	; (8002ed8 <tcp_read+0x1d8>)
 8002d94:	4851      	ldr	r0, [pc, #324]	; (8002edc <tcp_read+0x1dc>)
 8002d96:	f003 fa53 	bl	8006240 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002d9a:	4850      	ldr	r0, [pc, #320]	; (8002edc <tcp_read+0x1dc>)
 8002d9c:	f7fd f9e0 	bl	8000160 <strlen>
 8002da0:	4603      	mov	r3, r0
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	494c      	ldr	r1, [pc, #304]	; (8002edc <tcp_read+0x1dc>)
 8002daa:	484d      	ldr	r0, [pc, #308]	; (8002ee0 <tcp_read+0x1e0>)
 8002dac:	f002 fabf 	bl	800532e <HAL_UART_Transmit>
	//Если есть данные, то покажем их в терминальной программе
	if (len_data)
 8002db0:	8a7b      	ldrh	r3, [r7, #18]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d034      	beq.n	8002e20 <tcp_read+0x120>
	{
		for (i=0;i<len_data;i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	82fb      	strh	r3, [r7, #22]
 8002dba:	e00d      	b.n	8002dd8 <tcp_read+0xd8>
		{
			HAL_UART_Transmit(&huart2,tcp_pkt->data+i,1,0x1000);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f103 0214 	add.w	r2, r3, #20
 8002dc2:	8afb      	ldrh	r3, [r7, #22]
 8002dc4:	18d1      	adds	r1, r2, r3
 8002dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dca:	2201      	movs	r2, #1
 8002dcc:	4844      	ldr	r0, [pc, #272]	; (8002ee0 <tcp_read+0x1e0>)
 8002dce:	f002 faae 	bl	800532e <HAL_UART_Transmit>
		for (i=0;i<len_data;i++)
 8002dd2:	8afb      	ldrh	r3, [r7, #22]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	82fb      	strh	r3, [r7, #22]
 8002dd8:	8afa      	ldrh	r2, [r7, #22]
 8002dda:	8a7b      	ldrh	r3, [r7, #18]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d3ed      	bcc.n	8002dbc <tcp_read+0xbc>
		}
		HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
 8002de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de4:	2202      	movs	r2, #2
 8002de6:	493f      	ldr	r1, [pc, #252]	; (8002ee4 <tcp_read+0x1e4>)
 8002de8:	483d      	ldr	r0, [pc, #244]	; (8002ee0 <tcp_read+0x1e0>)
 8002dea:	f002 faa0 	bl	800532e <HAL_UART_Transmit>
		//Если включен флаг подтверждения, то подтвердим приём данных
		if (tcp_pkt->fl&TCP_ACK)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	7b5b      	ldrb	r3, [r3, #13]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <tcp_read+0x120>
		{
			tcp_send(ip_pkt->ipaddr_src, be16toword(tcp_pkt->port_src), TCP_OP_ACK_OF_DATA);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f103 000c 	add.w	r0, r3, #12
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b21b      	sxth	r3, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2204      	movs	r2, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7ff fb0e 	bl	800243c <tcp_send>
		}
	}
	if (tcp_pkt->fl == TCP_SYN)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	7b5b      	ldrb	r3, [r3, #13]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d113      	bne.n	8002e50 <tcp_read+0x150>
	{
		tcp_send(ip_pkt->ipaddr_src, be16toword(tcp_pkt->port_src), TCP_OP_SYNACK);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f103 000c 	add.w	r0, r3, #12
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b21a      	sxth	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	4313      	orrs	r3, r2
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f7ff faf7 	bl	800243c <tcp_send>
 8002e4e:	e03d      	b.n	8002ecc <tcp_read+0x1cc>
	}
	else if (tcp_pkt->fl == (TCP_FIN|TCP_ACK))//Разъединяться мы будем также по инициативе клиента
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	7b5b      	ldrb	r3, [r3, #13]
 8002e54:	2b11      	cmp	r3, #17
 8002e56:	d113      	bne.n	8002e80 <tcp_read+0x180>
	{
		tcp_send(ip_pkt->ipaddr_src, be16toword(tcp_pkt->port_src), TCP_OP_ACK_OF_FIN);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f103 000c 	add.w	r0, r3, #12
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2202      	movs	r2, #2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7ff fadf 	bl	800243c <tcp_send>
 8002e7e:	e025      	b.n	8002ecc <tcp_read+0x1cc>
	}
	else if (tcp_pkt->fl == (TCP_PSH|TCP_ACK))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	7b5b      	ldrb	r3, [r3, #13]
 8002e84:	2b18      	cmp	r3, #24
 8002e86:	d116      	bne.n	8002eb6 <tcp_read+0x1b6>
	{
		//Если данных нет
		if(!len_data)
 8002e88:	8a7b      	ldrh	r3, [r7, #18]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d11e      	bne.n	8002ecc <tcp_read+0x1cc>
		{
			tcp_send(ip_pkt->ipaddr_src, be16toword(tcp_pkt->port_src), TCP_OP_ACK_OF_FIN);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f103 000c 	add.w	r0, r3, #12
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2202      	movs	r2, #2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7ff fac4 	bl	800243c <tcp_send>
 8002eb4:	e00a      	b.n	8002ecc <tcp_read+0x1cc>
		}
	}
	else if (tcp_pkt->fl == TCP_ACK)//от клиента пришло подтверждение
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	7b5b      	ldrb	r3, [r3, #13]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d106      	bne.n	8002ecc <tcp_read+0x1cc>
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"ACK\r\n",5,0x1000);
 8002ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec2:	2205      	movs	r2, #5
 8002ec4:	4908      	ldr	r1, [pc, #32]	; (8002ee8 <tcp_read+0x1e8>)
 8002ec6:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <tcp_read+0x1e0>)
 8002ec8:	f002 fa31 	bl	800532e <HAL_UART_Transmit>
	}
  return res;
 8002ecc:	7d7b      	ldrb	r3, [r7, #21]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	08008744 	.word	0x08008744
 8002edc:	20000384 	.word	0x20000384
 8002ee0:	200004ac 	.word	0x200004ac
 8002ee4:	08008768 	.word	0x08008768
 8002ee8:	0800876c 	.word	0x0800876c

08002eec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	463b      	mov	r3, r7
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f12:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f32:	4814      	ldr	r0, [pc, #80]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f34:	f001 fdb4 	bl	8004aa0 <HAL_TIM_Base_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002f3e:	f7fe fa0c 	bl	800135a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f50:	f001 ff50 	bl	8004df4 <HAL_TIM_ConfigClockSource>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002f5a:	f7fe f9fe 	bl	800135a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f5e:	2320      	movs	r3, #32
 8002f60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f66:	463b      	mov	r3, r7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4806      	ldr	r0, [pc, #24]	; (8002f84 <MX_TIM2_Init+0x98>)
 8002f6c:	f002 f922 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002f76:	f7fe f9f0 	bl	800135a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000464 	.word	0x20000464

08002f88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d113      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_TIM_Base_MspInit+0x44>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <HAL_TIM_Base_MspInit+0x44>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_TIM_Base_MspInit+0x44>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	201c      	movs	r0, #28
 8002fb8:	f000 fbe5 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fbc:	201c      	movs	r0, #28
 8002fbe:	f000 fbfe 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <udp_send>:
//-----------------------------------------------
extern char str1[60];
extern uint8_t net_buf[ENC28J60_MAXFRAME];
//--------------------------------------------------
uint8_t udp_send(uint8_t *ip_addr, uint16_t port)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  uint8_t res=0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	77fb      	strb	r3, [r7, #31]
	uint16_t len;
	enc28j60_frame_ptr *frame=(void*) net_buf;
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <udp_send+0x100>)
 8002fe2:	61bb      	str	r3, [r7, #24]
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	330e      	adds	r3, #14
 8002fe8:	617b      	str	r3, [r7, #20]
	udp_pkt_ptr *udp_pkt = (void*)(ip_pkt->data);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3314      	adds	r3, #20
 8002fee:	613b      	str	r3, [r7, #16]
	udp_pkt->port_dst = be16toword(port);
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b21a      	sxth	r2, r3
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b21b      	sxth	r3, r3
 8003002:	b29a      	uxth	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	805a      	strh	r2, [r3, #2]
	udp_pkt->port_src = be16toword(LOCAL_PORT);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f644 5201 	movw	r2, #19713	; 0x4d01
 800300e:	801a      	strh	r2, [r3, #0]
	strcpy((char*)udp_pkt->data,"UDP Reply:\r\nHello to UDP Client!!!\r\n");
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	3308      	adds	r3, #8
 8003014:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <udp_send+0x104>)
 8003016:	4614      	mov	r4, r2
 8003018:	469c      	mov	ip, r3
 800301a:	f104 0e20 	add.w	lr, r4, #32
 800301e:	4665      	mov	r5, ip
 8003020:	4626      	mov	r6, r4
 8003022:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003024:	6028      	str	r0, [r5, #0]
 8003026:	6069      	str	r1, [r5, #4]
 8003028:	60aa      	str	r2, [r5, #8]
 800302a:	60eb      	str	r3, [r5, #12]
 800302c:	3410      	adds	r4, #16
 800302e:	f10c 0c10 	add.w	ip, ip, #16
 8003032:	4574      	cmp	r4, lr
 8003034:	d1f3      	bne.n	800301e <udp_send+0x4e>
 8003036:	4663      	mov	r3, ip
 8003038:	4622      	mov	r2, r4
 800303a:	6810      	ldr	r0, [r2, #0]
 800303c:	6018      	str	r0, [r3, #0]
 800303e:	7912      	ldrb	r2, [r2, #4]
 8003040:	711a      	strb	r2, [r3, #4]
	len = strlen((char*)udp_pkt->data) + sizeof(udp_pkt_ptr);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3308      	adds	r3, #8
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd f88a 	bl	8000160 <strlen>
 800304c:	4603      	mov	r3, r0
 800304e:	b29b      	uxth	r3, r3
 8003050:	3308      	adds	r3, #8
 8003052:	81fb      	strh	r3, [r7, #14]
	udp_pkt->len = be16toword(len);
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	b29b      	uxth	r3, r3
 800305a:	b21a      	sxth	r2, r3
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	b21b      	sxth	r3, r3
 8003062:	4313      	orrs	r3, r2
 8003064:	b21b      	sxth	r3, r3
 8003066:	b29a      	uxth	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	809a      	strh	r2, [r3, #4]
	udp_pkt->cs=0;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2200      	movs	r2, #0
 8003070:	80da      	strh	r2, [r3, #6]
	udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f1a3 0008 	sub.w	r0, r3, #8
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	3308      	adds	r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	2201      	movs	r2, #1
 8003080:	4619      	mov	r1, r3
 8003082:	f7fe f997 	bl	80013b4 <checksum>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	80da      	strh	r2, [r3, #6]
	memcpy(ip_pkt->ipaddr_src,ip_addr,4);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	330c      	adds	r3, #12
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	601a      	str	r2, [r3, #0]
	ip_pkt->prt = IP_UDP;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2211      	movs	r2, #17
 800309c:	725a      	strb	r2, [r3, #9]
	ip_pkt->id = 0;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	809a      	strh	r2, [r3, #4]
	ip_pkt->ts = 0;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2200      	movs	r2, #0
 80030a8:	705a      	strb	r2, [r3, #1]
	ip_pkt->verlen = 0x45;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2245      	movs	r2, #69	; 0x45
 80030ae:	701a      	strb	r2, [r3, #0]
	frame->type=ETH_IP;
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2208      	movs	r2, #8
 80030b4:	819a      	strh	r2, [r3, #12]
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 80030b6:	89fb      	ldrh	r3, [r7, #14]
 80030b8:	3314      	adds	r3, #20
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4619      	mov	r1, r3
 80030be:	69b8      	ldr	r0, [r7, #24]
 80030c0:	f7fe f9f4 	bl	80014ac <ip_send>
  return res;
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000180 	.word	0x20000180
 80030d4:	08008774 	.word	0x08008774

080030d8 <udp_reply>:
//--------------------------------------------------
uint8_t udp_reply(enc28j60_frame_ptr *frame, uint16_t len)
{
 80030d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
	uint8_t res=0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]
	uint16_t port;
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	330e      	adds	r3, #14
 80030ec:	613b      	str	r3, [r7, #16]
	udp_pkt_ptr *udp_pkt = (void*)(ip_pkt->data);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3314      	adds	r3, #20
 80030f2:	60fb      	str	r3, [r7, #12]
	port = udp_pkt->port_dst;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	885b      	ldrh	r3, [r3, #2]
 80030f8:	817b      	strh	r3, [r7, #10]
	udp_pkt->port_dst = udp_pkt->port_src;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	805a      	strh	r2, [r3, #2]
	udp_pkt->port_src = port;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	897a      	ldrh	r2, [r7, #10]
 8003106:	801a      	strh	r2, [r3, #0]
	strcpy((char*)udp_pkt->data,"UDP Reply:\r\nHello from UDP Server to UDP Client!!!\r\n");
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3308      	adds	r3, #8
 800310c:	4a27      	ldr	r2, [pc, #156]	; (80031ac <udp_reply+0xd4>)
 800310e:	4614      	mov	r4, r2
 8003110:	469c      	mov	ip, r3
 8003112:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003116:	4665      	mov	r5, ip
 8003118:	4626      	mov	r6, r4
 800311a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800311c:	6028      	str	r0, [r5, #0]
 800311e:	6069      	str	r1, [r5, #4]
 8003120:	60aa      	str	r2, [r5, #8]
 8003122:	60eb      	str	r3, [r5, #12]
 8003124:	3410      	adds	r4, #16
 8003126:	f10c 0c10 	add.w	ip, ip, #16
 800312a:	4574      	cmp	r4, lr
 800312c:	d1f3      	bne.n	8003116 <udp_reply+0x3e>
 800312e:	4663      	mov	r3, ip
 8003130:	4622      	mov	r2, r4
 8003132:	6810      	ldr	r0, [r2, #0]
 8003134:	6018      	str	r0, [r3, #0]
 8003136:	7912      	ldrb	r2, [r2, #4]
 8003138:	711a      	strb	r2, [r3, #4]
	len = strlen((char*)udp_pkt->data) + sizeof(udp_pkt_ptr);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3308      	adds	r3, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd f80e 	bl	8000160 <strlen>
 8003144:	4603      	mov	r3, r0
 8003146:	b29b      	uxth	r3, r3
 8003148:	3308      	adds	r3, #8
 800314a:	807b      	strh	r3, [r7, #2]
	udp_pkt->len = be16toword(len);
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	b21a      	sxth	r2, r3
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	b21b      	sxth	r3, r3
 800315a:	4313      	orrs	r3, r2
 800315c:	b21b      	sxth	r3, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	809a      	strh	r2, [r3, #4]
	udp_pkt->cs=0;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	80da      	strh	r2, [r3, #6]
	udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1a3 0008 	sub.w	r0, r3, #8
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	3308      	adds	r3, #8
 8003174:	b29b      	uxth	r3, r3
 8003176:	2201      	movs	r2, #1
 8003178:	4619      	mov	r1, r3
 800317a:	f7fe f91b 	bl	80013b4 <checksum>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	80da      	strh	r2, [r3, #6]
	memcpy(frame->addr_dest,frame->addr_src,6);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3306      	adds	r3, #6
 800318c:	2206      	movs	r2, #6
 800318e:	4619      	mov	r1, r3
 8003190:	f002 ff16 	bl	8005fc0 <memcpy>
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	3314      	adds	r3, #20
 8003198:	b29b      	uxth	r3, r3
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe f985 	bl	80014ac <ip_send>
	return res;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ac:	0800879c 	.word	0x0800879c

080031b0 <udp_read>:
//-------------------------------
uint8_t udp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
 80031b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b4:	b096      	sub	sp, #88	; 0x58
 80031b6:	af0c      	add	r7, sp, #48	; 0x30
 80031b8:	6178      	str	r0, [r7, #20]
 80031ba:	460b      	mov	r3, r1
 80031bc:	827b      	strh	r3, [r7, #18]
	uint8_t res=0;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ip_pkt_ptr *ip_pkt = (void*)(frame->data);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	330e      	adds	r3, #14
 80031c8:	623b      	str	r3, [r7, #32]
	udp_pkt_ptr *udp_pkt = (void*)(ip_pkt->data);
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	3314      	adds	r3, #20
 80031ce:	61fb      	str	r3, [r7, #28]
	if(be16toword(udp_pkt->port_src)==123)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4313      	orrs	r3, r2
 80031e4:	2b7b      	cmp	r3, #123	; 0x7b
 80031e6:	d106      	bne.n	80031f6 <udp_read+0x46>
	{
		ntp_read(frame,len);
 80031e8:	8a7b      	ldrh	r3, [r7, #18]
 80031ea:	4619      	mov	r1, r3
 80031ec:	6978      	ldr	r0, [r7, #20]
 80031ee:	f7fe fe23 	bl	8001e38 <ntp_read>
		return 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e0b6      	b.n	8003364 <udp_read+0x1b4>
	}
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
		frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	799b      	ldrb	r3, [r3, #6]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 80031fa:	469c      	mov	ip, r3
		frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	79db      	ldrb	r3, [r3, #7]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003200:	469e      	mov	lr, r3
		frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003206:	461a      	mov	r2, r3
		frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 800320c:	4619      	mov	r1, r3
		frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003212:	4618      	mov	r0, r3
		frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	7adb      	ldrb	r3, [r3, #11]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003218:	461c      	mov	r4, r3
		frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	781b      	ldrb	r3, [r3, #0]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 800321e:	461d      	mov	r5, r3
		frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	785b      	ldrb	r3, [r3, #1]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003224:	461e      	mov	r6, r3
		frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	789b      	ldrb	r3, [r3, #2]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 800322a:	60fb      	str	r3, [r7, #12]
		frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],len);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	78db      	ldrb	r3, [r3, #3]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003230:	60bb      	str	r3, [r7, #8]
		frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],len);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	791b      	ldrb	r3, [r3, #4]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 8003236:	607b      	str	r3, [r7, #4]
		frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],len);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	795b      	ldrb	r3, [r3, #5]
	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; udp\r\n",
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	8a7b      	ldrh	r3, [r7, #18]
 8003240:	930a      	str	r3, [sp, #40]	; 0x28
 8003242:	f8d7 8000 	ldr.w	r8, [r7]
 8003246:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800324a:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800324e:	f8cd 8020 	str.w	r8, [sp, #32]
 8003252:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8003256:	f8cd 801c 	str.w	r8, [sp, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	9306      	str	r3, [sp, #24]
 800325e:	9605      	str	r6, [sp, #20]
 8003260:	9504      	str	r5, [sp, #16]
 8003262:	9403      	str	r4, [sp, #12]
 8003264:	9002      	str	r0, [sp, #8]
 8003266:	9101      	str	r1, [sp, #4]
 8003268:	9200      	str	r2, [sp, #0]
 800326a:	4673      	mov	r3, lr
 800326c:	4662      	mov	r2, ip
 800326e:	4940      	ldr	r1, [pc, #256]	; (8003370 <udp_read+0x1c0>)
 8003270:	4840      	ldr	r0, [pc, #256]	; (8003374 <udp_read+0x1c4>)
 8003272:	f002 ffe5 	bl	8006240 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8003276:	483f      	ldr	r0, [pc, #252]	; (8003374 <udp_read+0x1c4>)
 8003278:	f7fc ff72 	bl	8000160 <strlen>
 800327c:	4603      	mov	r3, r0
 800327e:	b29a      	uxth	r2, r3
 8003280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003284:	493b      	ldr	r1, [pc, #236]	; (8003374 <udp_read+0x1c4>)
 8003286:	483c      	ldr	r0, [pc, #240]	; (8003378 <udp_read+0x1c8>)
 8003288:	f002 f851 	bl	800532e <HAL_UART_Transmit>
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 8003290:	461e      	mov	r6, r3
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 8003296:	469c      	mov	ip, r3
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 800329c:	461a      	mov	r2, r3
		ip_pkt->ipaddr_src[0],ip_pkt->ipaddr_src[1],ip_pkt->ipaddr_src[2],ip_pkt->ipaddr_src[3],
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 80032a2:	4619      	mov	r1, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 80032a8:	4618      	mov	r0, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 80032ae:	461c      	mov	r4, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	7c9b      	ldrb	r3, [r3, #18]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 80032b4:	461d      	mov	r5, r3
		ip_pkt->ipaddr_dst[0],ip_pkt->ipaddr_dst[1],ip_pkt->ipaddr_dst[2],ip_pkt->ipaddr_dst[3]);
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	7cdb      	ldrb	r3, [r3, #19]
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	9504      	str	r5, [sp, #16]
 80032be:	9403      	str	r4, [sp, #12]
 80032c0:	9002      	str	r0, [sp, #8]
 80032c2:	9101      	str	r1, [sp, #4]
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	4663      	mov	r3, ip
 80032c8:	4632      	mov	r2, r6
 80032ca:	492c      	ldr	r1, [pc, #176]	; (800337c <udp_read+0x1cc>)
 80032cc:	4829      	ldr	r0, [pc, #164]	; (8003374 <udp_read+0x1c4>)
 80032ce:	f002 ffb7 	bl	8006240 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80032d2:	4828      	ldr	r0, [pc, #160]	; (8003374 <udp_read+0x1c4>)
 80032d4:	f7fc ff44 	bl	8000160 <strlen>
 80032d8:	4603      	mov	r3, r0
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032e0:	4924      	ldr	r1, [pc, #144]	; (8003374 <udp_read+0x1c4>)
 80032e2:	4825      	ldr	r0, [pc, #148]	; (8003378 <udp_read+0x1c8>)
 80032e4:	f002 f823 	bl	800532e <HAL_UART_Transmit>
	sprintf(str1,"%u-%u\r\n", be16toword(udp_pkt->port_src),be16toword(udp_pkt->port_dst));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	ea42 0103 	orr.w	r1, r2, r3
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	885b      	ldrh	r3, [r3, #2]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	885b      	ldrh	r3, [r3, #2]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b29b      	uxth	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	460a      	mov	r2, r1
 8003314:	491a      	ldr	r1, [pc, #104]	; (8003380 <udp_read+0x1d0>)
 8003316:	4817      	ldr	r0, [pc, #92]	; (8003374 <udp_read+0x1c4>)
 8003318:	f002 ff92 	bl	8006240 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800331c:	4815      	ldr	r0, [pc, #84]	; (8003374 <udp_read+0x1c4>)
 800331e:	f7fc ff1f 	bl	8000160 <strlen>
 8003322:	4603      	mov	r3, r0
 8003324:	b29a      	uxth	r2, r3
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	4912      	ldr	r1, [pc, #72]	; (8003374 <udp_read+0x1c4>)
 800332c:	4812      	ldr	r0, [pc, #72]	; (8003378 <udp_read+0x1c8>)
 800332e:	f001 fffe 	bl	800532e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,udp_pkt->data,len-sizeof(udp_pkt_ptr),0x1000);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f103 0108 	add.w	r1, r3, #8
 8003338:	8a7b      	ldrh	r3, [r7, #18]
 800333a:	3b08      	subs	r3, #8
 800333c:	b29a      	uxth	r2, r3
 800333e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003342:	480d      	ldr	r0, [pc, #52]	; (8003378 <udp_read+0x1c8>)
 8003344:	f001 fff3 	bl	800532e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
 8003348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800334c:	2202      	movs	r2, #2
 800334e:	490d      	ldr	r1, [pc, #52]	; (8003384 <udp_read+0x1d4>)
 8003350:	4809      	ldr	r0, [pc, #36]	; (8003378 <udp_read+0x1c8>)
 8003352:	f001 ffec 	bl	800532e <HAL_UART_Transmit>
	udp_reply(frame,len);
 8003356:	8a7b      	ldrh	r3, [r7, #18]
 8003358:	4619      	mov	r1, r3
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff febc 	bl	80030d8 <udp_reply>
	return res;
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800336e:	bf00      	nop
 8003370:	080087d4 	.word	0x080087d4
 8003374:	20000384 	.word	0x20000384
 8003378:	200004ac 	.word	0x200004ac
 800337c:	0800881c 	.word	0x0800881c
 8003380:	08008844 	.word	0x08008844
 8003384:	0800884c 	.word	0x0800884c

08003388 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <MX_USART2_UART_Init+0x50>)
 8003390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 8003394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033ae:	220c      	movs	r2, #12
 80033b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033be:	4805      	ldr	r0, [pc, #20]	; (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033c0:	f001 ff68 	bl	8005294 <HAL_UART_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033ca:	f7fd ffc6 	bl	800135a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200004ac 	.word	0x200004ac
 80033d8:	40004400 	.word	0x40004400

080033dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_UART_MspInit+0x98>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d137      	bne.n	800346c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_UART_MspInit+0x9c>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <HAL_UART_MspInit+0x9c>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003406:	61d3      	str	r3, [r2, #28]
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_UART_MspInit+0x9c>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_UART_MspInit+0x9c>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a17      	ldr	r2, [pc, #92]	; (8003478 <HAL_UART_MspInit+0x9c>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_UART_MspInit+0x9c>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800342c:	2304      	movs	r3, #4
 800342e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	4619      	mov	r1, r3
 800343e:	480f      	ldr	r0, [pc, #60]	; (800347c <HAL_UART_MspInit+0xa0>)
 8003440:	f000 fa94 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003444:	2308      	movs	r3, #8
 8003446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	4619      	mov	r1, r3
 8003456:	4809      	ldr	r0, [pc, #36]	; (800347c <HAL_UART_MspInit+0xa0>)
 8003458:	f000 fa88 	bl	800396c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	2026      	movs	r0, #38	; 0x26
 8003462:	f000 f990 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003466:	2026      	movs	r0, #38	; 0x26
 8003468:	f000 f9a9 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800346c:	bf00      	nop
 800346e:	3720      	adds	r7, #32
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40004400 	.word	0x40004400
 8003478:	40021000 	.word	0x40021000
 800347c:	40010800 	.word	0x40010800

08003480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003480:	480c      	ldr	r0, [pc, #48]	; (80034b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003482:	490d      	ldr	r1, [pc, #52]	; (80034b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003484:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003498:	4c0a      	ldr	r4, [pc, #40]	; (80034c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034a6:	f7fe ffc3 	bl	8002430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034aa:	f002 fc35 	bl	8005d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ae:	f7fd febd 	bl	800122c <main>
  bx lr
 80034b2:	4770      	bx	lr
  ldr r0, =_sdata
 80034b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80034bc:	08008bf0 	.word	0x08008bf0
  ldr r2, =_sbss
 80034c0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80034c4:	2000052c 	.word	0x2000052c

080034c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034c8:	e7fe      	b.n	80034c8 <ADC1_2_IRQHandler>
	...

080034cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HAL_Init+0x28>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <HAL_Init+0x28>)
 80034d6:	f043 0310 	orr.w	r3, r3, #16
 80034da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034dc:	2003      	movs	r0, #3
 80034de:	f000 f947 	bl	8003770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034e2:	200f      	movs	r0, #15
 80034e4:	f000 f808 	bl	80034f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e8:	f7fe fe6a 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40022000 	.word	0x40022000

080034f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_InitTick+0x54>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_InitTick+0x58>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f95f 	bl	80037da <HAL_SYSTICK_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e00e      	b.n	8003544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b0f      	cmp	r3, #15
 800352a:	d80a      	bhi.n	8003542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800352c:	2200      	movs	r2, #0
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f000 f927 	bl	8003786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003538:	4a06      	ldr	r2, [pc, #24]	; (8003554 <HAL_InitTick+0x5c>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000020 	.word	0x20000020
 8003550:	20000028 	.word	0x20000028
 8003554:	20000024 	.word	0x20000024

08003558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_IncTick+0x1c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_IncTick+0x20>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4413      	add	r3, r2
 8003568:	4a03      	ldr	r2, [pc, #12]	; (8003578 <HAL_IncTick+0x20>)
 800356a:	6013      	str	r3, [r2, #0]
}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000028 	.word	0x20000028
 8003578:	200004f0 	.word	0x200004f0

0800357c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return uwTick;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <HAL_GetTick+0x10>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	200004f0 	.word	0x200004f0

08003590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff fff0 	bl	800357c <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d005      	beq.n	80035b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_Delay+0x44>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035b6:	bf00      	nop
 80035b8:	f7ff ffe0 	bl	800357c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d8f7      	bhi.n	80035b8 <HAL_Delay+0x28>
  {
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000028 	.word	0x20000028

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4906      	ldr	r1, [pc, #24]	; (8003670 <__NVIC_EnableIRQ+0x34>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	e000e100 	.word	0xe000e100

08003674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db0a      	blt.n	800369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	b2da      	uxtb	r2, r3
 800368c:	490c      	ldr	r1, [pc, #48]	; (80036c0 <__NVIC_SetPriority+0x4c>)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	440b      	add	r3, r1
 8003698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800369c:	e00a      	b.n	80036b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4908      	ldr	r1, [pc, #32]	; (80036c4 <__NVIC_SetPriority+0x50>)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	3b04      	subs	r3, #4
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	440b      	add	r3, r1
 80036b2:	761a      	strb	r2, [r3, #24]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	bf28      	it	cs
 80036e6:	2304      	movcs	r3, #4
 80036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d902      	bls.n	80036f8 <NVIC_EncodePriority+0x30>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3b03      	subs	r3, #3
 80036f6:	e000      	b.n	80036fa <NVIC_EncodePriority+0x32>
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	401a      	ands	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003710:	f04f 31ff 	mov.w	r1, #4294967295
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43d9      	mvns	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	4313      	orrs	r3, r2
         );
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800373c:	d301      	bcc.n	8003742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <SysTick_Config+0x40>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374a:	210f      	movs	r1, #15
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f7ff ff90 	bl	8003674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <SysTick_Config+0x40>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <SysTick_Config+0x40>)
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff2d 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003798:	f7ff ff42 	bl	8003620 <__NVIC_GetPriorityGrouping>
 800379c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff90 	bl	80036c8 <NVIC_EncodePriority>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff5f 	bl	8003674 <__NVIC_SetPriority>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff35 	bl	800363c <__NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffa2 	bl	800372c <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80037f6:	f000 f802 	bl	80037fe <HAL_SYSTICK_Callback>
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800381c:	2b02      	cmp	r3, #2
 800381e:	d008      	beq.n	8003832 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2204      	movs	r2, #4
 8003824:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e020      	b.n	8003874 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 020e 	bic.w	r2, r2, #14
 8003840:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	2101      	movs	r1, #1
 800385c:	fa01 f202 	lsl.w	r2, r1, r2
 8003860:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
	...

08003880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003892:	2b02      	cmp	r3, #2
 8003894:	d005      	beq.n	80038a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2204      	movs	r2, #4
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e051      	b.n	8003946 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 020e 	bic.w	r2, r2, #14
 80038b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_DMA_Abort_IT+0xd0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d029      	beq.n	8003920 <HAL_DMA_Abort_IT+0xa0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a20      	ldr	r2, [pc, #128]	; (8003954 <HAL_DMA_Abort_IT+0xd4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_DMA_Abort_IT+0x9c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_DMA_Abort_IT+0xd8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01a      	beq.n	8003916 <HAL_DMA_Abort_IT+0x96>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <HAL_DMA_Abort_IT+0xdc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d012      	beq.n	8003910 <HAL_DMA_Abort_IT+0x90>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_DMA_Abort_IT+0xe0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00a      	beq.n	800390a <HAL_DMA_Abort_IT+0x8a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_DMA_Abort_IT+0xe4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d102      	bne.n	8003904 <HAL_DMA_Abort_IT+0x84>
 80038fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003902:	e00e      	b.n	8003922 <HAL_DMA_Abort_IT+0xa2>
 8003904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003908:	e00b      	b.n	8003922 <HAL_DMA_Abort_IT+0xa2>
 800390a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800390e:	e008      	b.n	8003922 <HAL_DMA_Abort_IT+0xa2>
 8003910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003914:	e005      	b.n	8003922 <HAL_DMA_Abort_IT+0xa2>
 8003916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800391a:	e002      	b.n	8003922 <HAL_DMA_Abort_IT+0xa2>
 800391c:	2310      	movs	r3, #16
 800391e:	e000      	b.n	8003922 <HAL_DMA_Abort_IT+0xa2>
 8003920:	2301      	movs	r3, #1
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_DMA_Abort_IT+0xe8>)
 8003924:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
    } 
  }
  return status;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40020008 	.word	0x40020008
 8003954:	4002001c 	.word	0x4002001c
 8003958:	40020030 	.word	0x40020030
 800395c:	40020044 	.word	0x40020044
 8003960:	40020058 	.word	0x40020058
 8003964:	4002006c 	.word	0x4002006c
 8003968:	40020000 	.word	0x40020000

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b480      	push	{r7}
 800396e:	b08b      	sub	sp, #44	; 0x2c
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397e:	e169      	b.n	8003c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003980:	2201      	movs	r2, #1
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	429a      	cmp	r2, r3
 800399a:	f040 8158 	bne.w	8003c4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a9a      	ldr	r2, [pc, #616]	; (8003c0c <HAL_GPIO_Init+0x2a0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d05e      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039a8:	4a98      	ldr	r2, [pc, #608]	; (8003c0c <HAL_GPIO_Init+0x2a0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d875      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039ae:	4a98      	ldr	r2, [pc, #608]	; (8003c10 <HAL_GPIO_Init+0x2a4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d058      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039b4:	4a96      	ldr	r2, [pc, #600]	; (8003c10 <HAL_GPIO_Init+0x2a4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d86f      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039ba:	4a96      	ldr	r2, [pc, #600]	; (8003c14 <HAL_GPIO_Init+0x2a8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d052      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039c0:	4a94      	ldr	r2, [pc, #592]	; (8003c14 <HAL_GPIO_Init+0x2a8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d869      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039c6:	4a94      	ldr	r2, [pc, #592]	; (8003c18 <HAL_GPIO_Init+0x2ac>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04c      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039cc:	4a92      	ldr	r2, [pc, #584]	; (8003c18 <HAL_GPIO_Init+0x2ac>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d863      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039d2:	4a92      	ldr	r2, [pc, #584]	; (8003c1c <HAL_GPIO_Init+0x2b0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d046      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039d8:	4a90      	ldr	r2, [pc, #576]	; (8003c1c <HAL_GPIO_Init+0x2b0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d85d      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039de:	2b12      	cmp	r3, #18
 80039e0:	d82a      	bhi.n	8003a38 <HAL_GPIO_Init+0xcc>
 80039e2:	2b12      	cmp	r3, #18
 80039e4:	d859      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_GPIO_Init+0x80>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a67 	.word	0x08003a67
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a53 	.word	0x08003a53
 80039f8:	08003a95 	.word	0x08003a95
 80039fc:	08003a9b 	.word	0x08003a9b
 8003a00:	08003a9b 	.word	0x08003a9b
 8003a04:	08003a9b 	.word	0x08003a9b
 8003a08:	08003a9b 	.word	0x08003a9b
 8003a0c:	08003a9b 	.word	0x08003a9b
 8003a10:	08003a9b 	.word	0x08003a9b
 8003a14:	08003a9b 	.word	0x08003a9b
 8003a18:	08003a9b 	.word	0x08003a9b
 8003a1c:	08003a9b 	.word	0x08003a9b
 8003a20:	08003a9b 	.word	0x08003a9b
 8003a24:	08003a9b 	.word	0x08003a9b
 8003a28:	08003a9b 	.word	0x08003a9b
 8003a2c:	08003a9b 	.word	0x08003a9b
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	4a79      	ldr	r2, [pc, #484]	; (8003c20 <HAL_GPIO_Init+0x2b4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a3e:	e02c      	b.n	8003a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	623b      	str	r3, [r7, #32]
          break;
 8003a46:	e029      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	623b      	str	r3, [r7, #32]
          break;
 8003a50:	e024      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	3308      	adds	r3, #8
 8003a58:	623b      	str	r3, [r7, #32]
          break;
 8003a5a:	e01f      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	330c      	adds	r3, #12
 8003a62:	623b      	str	r3, [r7, #32]
          break;
 8003a64:	e01a      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	623b      	str	r3, [r7, #32]
          break;
 8003a72:	e013      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	611a      	str	r2, [r3, #16]
          break;
 8003a86:	e009      	b.n	8003a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a88:	2308      	movs	r3, #8
 8003a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	615a      	str	r2, [r3, #20]
          break;
 8003a92:	e003      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
          break;
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          break;
 8003a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2bff      	cmp	r3, #255	; 0xff
 8003aa0:	d801      	bhi.n	8003aa6 <HAL_GPIO_Init+0x13a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	e001      	b.n	8003aaa <HAL_GPIO_Init+0x13e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d802      	bhi.n	8003ab8 <HAL_GPIO_Init+0x14c>
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	e002      	b.n	8003abe <HAL_GPIO_Init+0x152>
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	3b08      	subs	r3, #8
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	210f      	movs	r1, #15
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	6a39      	ldr	r1, [r7, #32]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80b1 	beq.w	8003c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	4a4c      	ldr	r2, [pc, #304]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6193      	str	r3, [r2, #24]
 8003af8:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b04:	4a48      	ldr	r2, [pc, #288]	; (8003c28 <HAL_GPIO_Init+0x2bc>)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <HAL_GPIO_Init+0x2c0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_GPIO_Init+0x1ec>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3f      	ldr	r2, [pc, #252]	; (8003c30 <HAL_GPIO_Init+0x2c4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00d      	beq.n	8003b54 <HAL_GPIO_Init+0x1e8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3e      	ldr	r2, [pc, #248]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <HAL_GPIO_Init+0x1e4>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3d      	ldr	r2, [pc, #244]	; (8003c38 <HAL_GPIO_Init+0x2cc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_GPIO_Init+0x1e0>
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <HAL_GPIO_Init+0x1ee>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	e004      	b.n	8003b5a <HAL_GPIO_Init+0x1ee>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e002      	b.n	8003b5a <HAL_GPIO_Init+0x1ee>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_GPIO_Init+0x1ee>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	f002 0203 	and.w	r2, r2, #3
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	4093      	lsls	r3, r2
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b6a:	492f      	ldr	r1, [pc, #188]	; (8003c28 <HAL_GPIO_Init+0x2bc>)
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d006      	beq.n	8003b92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b84:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	492c      	ldr	r1, [pc, #176]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	e006      	b.n	8003ba0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b92:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	4928      	ldr	r1, [pc, #160]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4922      	ldr	r1, [pc, #136]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	491e      	ldr	r1, [pc, #120]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	4918      	ldr	r1, [pc, #96]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003be2:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	4914      	ldr	r1, [pc, #80]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d021      	beq.n	8003c40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	490e      	ldr	r1, [pc, #56]	; (8003c3c <HAL_GPIO_Init+0x2d0>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60cb      	str	r3, [r1, #12]
 8003c08:	e021      	b.n	8003c4e <HAL_GPIO_Init+0x2e2>
 8003c0a:	bf00      	nop
 8003c0c:	10320000 	.word	0x10320000
 8003c10:	10310000 	.word	0x10310000
 8003c14:	10220000 	.word	0x10220000
 8003c18:	10210000 	.word	0x10210000
 8003c1c:	10120000 	.word	0x10120000
 8003c20:	10110000 	.word	0x10110000
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40010800 	.word	0x40010800
 8003c30:	40010c00 	.word	0x40010c00
 8003c34:	40011000 	.word	0x40011000
 8003c38:	40011400 	.word	0x40011400
 8003c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3301      	adds	r3, #1
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f47f ae8e 	bne.w	8003980 <HAL_GPIO_Init+0x14>
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	372c      	adds	r7, #44	; 0x2c
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	40010400 	.word	0x40010400

08003c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
 8003c80:	4613      	mov	r3, r2
 8003c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c84:	787b      	ldrb	r3, [r7, #1]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8a:	887a      	ldrh	r2, [r7, #2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c90:	e003      	b.n	8003c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	041a      	lsls	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cba:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fb38 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e272      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8087 	beq.w	8003e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf4:	4b92      	ldr	r3, [pc, #584]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d00c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d00:	4b8f      	ldr	r3, [pc, #572]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d112      	bne.n	8003d32 <HAL_RCC_OscConfig+0x5e>
 8003d0c:	4b8c      	ldr	r3, [pc, #560]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1a:	4b89      	ldr	r3, [pc, #548]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d06c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x12c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d168      	bne.n	8003e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e24c      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x76>
 8003d3c:	4b80      	ldr	r3, [pc, #512]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7f      	ldr	r2, [pc, #508]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	e02e      	b.n	8003da8 <HAL_RCC_OscConfig+0xd4>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x98>
 8003d52:	4b7b      	ldr	r3, [pc, #492]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a7a      	ldr	r2, [pc, #488]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b78      	ldr	r3, [pc, #480]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a77      	ldr	r2, [pc, #476]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e01d      	b.n	8003da8 <HAL_RCC_OscConfig+0xd4>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0xbc>
 8003d76:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a71      	ldr	r2, [pc, #452]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6e      	ldr	r2, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0xd4>
 8003d90:	4b6b      	ldr	r3, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a6a      	ldr	r2, [pc, #424]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b68      	ldr	r3, [pc, #416]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a67      	ldr	r2, [pc, #412]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7ff fbe4 	bl	800357c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db8:	f7ff fbe0 	bl	800357c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e200      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b5d      	ldr	r3, [pc, #372]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0xe4>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7ff fbd0 	bl	800357c <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de0:	f7ff fbcc 	bl	800357c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e1ec      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x10c>
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d063      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e0e:	4b4c      	ldr	r3, [pc, #304]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e1a:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d11c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x18c>
 8003e26:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d116      	bne.n	8003e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e32:	4b43      	ldr	r3, [pc, #268]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_RCC_OscConfig+0x176>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e1c0      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4a:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4939      	ldr	r1, [pc, #228]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	e03a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7ff fb85 	bl	800357c <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e76:	f7ff fb81 	bl	800357c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e1a1      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e94:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4927      	ldr	r1, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eaa:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_OscConfig+0x270>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7ff fb64 	bl	800357c <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb8:	f7ff fb60 	bl	800357c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e180      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03a      	beq.n	8003f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d019      	beq.n	8003f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_RCC_OscConfig+0x274>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7ff fb44 	bl	800357c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7ff fb40 	bl	800357c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e160      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f16:	2001      	movs	r0, #1
 8003f18:	f000 fad8 	bl	80044cc <RCC_Delay>
 8003f1c:	e01c      	b.n	8003f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_RCC_OscConfig+0x274>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f24:	f7ff fb2a 	bl	800357c <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2a:	e00f      	b.n	8003f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7ff fb26 	bl	800357c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d908      	bls.n	8003f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e146      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	42420000 	.word	0x42420000
 8003f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	4b92      	ldr	r3, [pc, #584]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e9      	bne.n	8003f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a6 	beq.w	80040b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b8b      	ldr	r3, [pc, #556]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	4a87      	ldr	r2, [pc, #540]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	61d3      	str	r3, [r2, #28]
 8003f82:	4b85      	ldr	r3, [pc, #532]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f92:	4b82      	ldr	r3, [pc, #520]	; (800419c <HAL_RCC_OscConfig+0x4c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d118      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	4b7f      	ldr	r3, [pc, #508]	; (800419c <HAL_RCC_OscConfig+0x4c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a7e      	ldr	r2, [pc, #504]	; (800419c <HAL_RCC_OscConfig+0x4c8>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003faa:	f7ff fae7 	bl	800357c <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7ff fae3 	bl	800357c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	; 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e103      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	4b75      	ldr	r3, [pc, #468]	; (800419c <HAL_RCC_OscConfig+0x4c8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x312>
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6213      	str	r3, [r2, #32]
 8003fe4:	e02d      	b.n	8004042 <HAL_RCC_OscConfig+0x36e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0x334>
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a69      	ldr	r2, [pc, #420]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	6213      	str	r3, [r2, #32]
 8003ffa:	4b67      	ldr	r3, [pc, #412]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4a66      	ldr	r2, [pc, #408]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	6213      	str	r3, [r2, #32]
 8004006:	e01c      	b.n	8004042 <HAL_RCC_OscConfig+0x36e>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x356>
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4a60      	ldr	r2, [pc, #384]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4a5d      	ldr	r2, [pc, #372]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6213      	str	r3, [r2, #32]
 8004028:	e00b      	b.n	8004042 <HAL_RCC_OscConfig+0x36e>
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4a5a      	ldr	r2, [pc, #360]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6213      	str	r3, [r2, #32]
 8004036:	4b58      	ldr	r3, [pc, #352]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a57      	ldr	r2, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d015      	beq.n	8004076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404a:	f7ff fa97 	bl	800357c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004052:	f7ff fa93 	bl	800357c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0b1      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004068:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ee      	beq.n	8004052 <HAL_RCC_OscConfig+0x37e>
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7ff fa81 	bl	800357c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7ff fa7d 	bl	800357c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e09b      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ee      	bne.n	800407e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b3c      	ldr	r3, [pc, #240]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8087 	beq.w	80041ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d061      	beq.n	800418c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d146      	bne.n	800415e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7ff fa51 	bl	800357c <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040de:	f7ff fa4d 	bl	800357c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e06d      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f0:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004104:	d108      	bne.n	8004118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4921      	ldr	r1, [pc, #132]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a19      	ldr	r1, [r3, #32]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	430b      	orrs	r3, r1
 800412a:	491b      	ldr	r1, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7ff fa21 	bl	800357c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413e:	f7ff fa1d 	bl	800357c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e03d      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x46a>
 800415c:	e035      	b.n	80041ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7ff fa0a 	bl	800357c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7ff fa06 	bl	800357c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e026      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x498>
 800418a:	e01e      	b.n	80041ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e019      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
 80041a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x500>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d001      	beq.n	80041ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0d0      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b6a      	ldr	r3, [pc, #424]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d910      	bls.n	800421c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0207 	bic.w	r2, r3, #7
 8004202:	4965      	ldr	r1, [pc, #404]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0b8      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004234:	4b59      	ldr	r3, [pc, #356]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a58      	ldr	r2, [pc, #352]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800423e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a52      	ldr	r2, [pc, #328]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b50      	ldr	r3, [pc, #320]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	494d      	ldr	r1, [pc, #308]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d040      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d115      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07f      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e073      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e06b      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4936      	ldr	r1, [pc, #216]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c8:	f7ff f958 	bl	800357c <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7ff f954 	bl	800357c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e053      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d210      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 0207 	bic.w	r2, r3, #7
 800430e:	4922      	ldr	r1, [pc, #136]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e032      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4916      	ldr	r1, [pc, #88]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490e      	ldr	r1, [pc, #56]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004366:	f000 f821 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800436a:	4602      	mov	r2, r0
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	490a      	ldr	r1, [pc, #40]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004378:	5ccb      	ldrb	r3, [r1, r3]
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x1cc>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f8b6 	bl	80034f8 <HAL_InitTick>

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40022000 	.word	0x40022000
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800886c 	.word	0x0800886c
 80043a4:	20000020 	.word	0x20000020
 80043a8:	20000024 	.word	0x20000024

080043ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	b490      	push	{r4, r7}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043b2:	4b29      	ldr	r3, [pc, #164]	; (8004458 <HAL_RCC_GetSysClockFreq+0xac>)
 80043b4:	1d3c      	adds	r4, r7, #4
 80043b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043bc:	f240 2301 	movw	r3, #513	; 0x201
 80043c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043d6:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x40>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x46>
 80043ea:	e02b      	b.n	8004444 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ec:	4b1c      	ldr	r3, [pc, #112]	; (8004460 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043ee:	623b      	str	r3, [r7, #32]
      break;
 80043f0:	e02b      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3328      	adds	r3, #40	; 0x28
 80043fc:	443b      	add	r3, r7
 80043fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004402:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d012      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800440e:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	0c5b      	lsrs	r3, r3, #17
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	3328      	adds	r3, #40	; 0x28
 800441a:	443b      	add	r3, r7
 800441c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004426:	fb03 f202 	mul.w	r2, r3, r2
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
 8004432:	e004      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	623b      	str	r3, [r7, #32]
      break;
 8004442:	e002      	b.n	800444a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004446:	623b      	str	r3, [r7, #32]
      break;
 8004448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444a:	6a3b      	ldr	r3, [r7, #32]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3728      	adds	r7, #40	; 0x28
 8004450:	46bd      	mov	sp, r7
 8004452:	bc90      	pop	{r4, r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	08008850 	.word	0x08008850
 800445c:	40021000 	.word	0x40021000
 8004460:	007a1200 	.word	0x007a1200
 8004464:	003d0900 	.word	0x003d0900

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <HAL_RCC_GetHCLKFreq+0x10>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	20000020 	.word	0x20000020

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff2 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	0800887c 	.word	0x0800887c

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044a8:	f7ff ffde 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	0adb      	lsrs	r3, r3, #11
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	0800887c 	.word	0x0800887c

080044cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <RCC_Delay+0x34>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <RCC_Delay+0x38>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044e8:	bf00      	nop
  }
  while (Delay --);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e5a      	subs	r2, r3, #1
 80044ee:	60fa      	str	r2, [r7, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f9      	bne.n	80044e8 <RCC_Delay+0x1c>
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	20000020 	.word	0x20000020
 8004504:	10624dd3 	.word	0x10624dd3

08004508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e076      	b.n	8004608 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d108      	bne.n	8004534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452a:	d009      	beq.n	8004540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	e005      	b.n	8004540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd fde4 	bl	8002128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0c1a      	lsrs	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 0204 	and.w	r2, r2, #4
 80045e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	; 0x30
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800461e:	2301      	movs	r3, #1
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x26>
 8004632:	2302      	movs	r3, #2
 8004634:	e18a      	b.n	800494c <HAL_SPI_TransmitReceive+0x33c>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463e:	f7fe ff9d 	bl	800357c <HAL_GetTick>
 8004642:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800465c:	2b01      	cmp	r3, #1
 800465e:	d00f      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x70>
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d107      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x68>
 8004670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004674:	2b04      	cmp	r3, #4
 8004676:	d003      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004678:	2302      	movs	r3, #2
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800467e:	e15b      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x82>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x82>
 800468c:	887b      	ldrh	r3, [r7, #2]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004698:	e14e      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2205      	movs	r2, #5
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	887a      	ldrh	r2, [r7, #2]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d007      	beq.n	8004702 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004700:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470a:	d178      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_SPI_TransmitReceive+0x10a>
 8004714:	8b7b      	ldrh	r3, [r7, #26]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d166      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800473e:	e053      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d11b      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x176>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d016      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x176>
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d113      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d119      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x1b8>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d014      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	b292      	uxth	r2, r2
 80047aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	1c9a      	adds	r2, r3, #2
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c4:	2301      	movs	r3, #1
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c8:	f7fe fed8 	bl	800357c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d807      	bhi.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d003      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047e6:	e0a7      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1a6      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x130>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1a1      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x130>
 80047fc:	e07c      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_SPI_TransmitReceive+0x1fc>
 8004806:	8b7b      	ldrh	r3, [r7, #26]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d16b      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004832:	e057      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d11c      	bne.n	800487c <HAL_SPI_TransmitReceive+0x26c>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d017      	beq.n	800487c <HAL_SPI_TransmitReceive+0x26c>
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d114      	bne.n	800487c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b01      	cmp	r3, #1
 8004888:	d119      	bne.n	80048be <HAL_SPI_TransmitReceive+0x2ae>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d014      	beq.n	80048be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048ba:	2301      	movs	r3, #1
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048be:	f7fe fe5d 	bl	800357c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d803      	bhi.n	80048d6 <HAL_SPI_TransmitReceive+0x2c6>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x2cc>
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d103      	bne.n	80048e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048e2:	e029      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1a2      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x224>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d19d      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f8b1 	bl	8004a64 <SPI_EndRxTxTransaction>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004914:	e010      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10b      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	e000      	b.n	8004938 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800494c:	4618      	mov	r0, r3
 800494e:	3730      	adds	r7, #48	; 0x30
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004964:	f7fe fe0a 	bl	800357c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	4413      	add	r3, r2
 8004972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004974:	f7fe fe02 	bl	800357c <HAL_GetTick>
 8004978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800497a:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	015b      	lsls	r3, r3, #5
 8004980:	0d1b      	lsrs	r3, r3, #20
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800498a:	e054      	b.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d050      	beq.n	8004a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004994:	f7fe fdf2 	bl	800357c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d902      	bls.n	80049aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d13d      	bne.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c2:	d111      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	d004      	beq.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d6:	d107      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f0:	d10f      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e017      	b.n	8004a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d19b      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000020 	.word	0x20000020

08004a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff6a 	bl	8004954 <SPI_WaitFlagStateUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e000      	b.n	8004a98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e041      	b.n	8004b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe fa5e 	bl	8002f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 fa70 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e03a      	b.n	8004bce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_TIM_Base_Start_IT+0x98>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x58>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x58>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <HAL_TIM_Base_Start_IT+0x9c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x58>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800

08004be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0202 	mvn.w	r2, #2
 8004c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f9b1 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9a4 	bl	8004f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f9b3 	bl	8004fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0204 	mvn.w	r2, #4
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f987 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f97a 	bl	8004f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f989 	bl	8004fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0208 	mvn.w	r2, #8
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f95d 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f950 	bl	8004f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f95f 	bl	8004fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0210 	mvn.w	r2, #16
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2208      	movs	r2, #8
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f933 	bl	8004f8e <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f926 	bl	8004f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f935 	bl	8004fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0201 	mvn.w	r2, #1
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc fad8 	bl	8001318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d10e      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa77 	bl	8005282 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8f9 	bl	8004fb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0220 	mvn.w	r2, #32
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa42 	bl	8005270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_ConfigClockSource+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0b3      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x180>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d03e      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xd0>
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	f200 8087 	bhi.w	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	f000 8085 	beq.w	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d87f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e5c:	2b70      	cmp	r3, #112	; 0x70
 8004e5e:	d01a      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xa2>
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d87b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e64:	2b60      	cmp	r3, #96	; 0x60
 8004e66:	d050      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x116>
 8004e68:	2b60      	cmp	r3, #96	; 0x60
 8004e6a:	d877      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e6c:	2b50      	cmp	r3, #80	; 0x50
 8004e6e:	d03c      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0xf6>
 8004e70:	2b50      	cmp	r3, #80	; 0x50
 8004e72:	d873      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d058      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x136>
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d86f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	d064      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d86b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d060      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d867      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d05a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e94:	e062      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f000 f966 	bl	8005176 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e04e      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f000 f94f 	bl	8005176 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee6:	609a      	str	r2, [r3, #8]
      break;
 8004ee8:	e03b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 f8c6 	bl	8005088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2150      	movs	r1, #80	; 0x50
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f91d 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e02b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 f8e4 	bl	80050e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2160      	movs	r1, #96	; 0x60
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f90d 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004f28:	e01b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 f8a6 	bl	8005088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f8fd 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004f48:	e00b      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f000 f8f4 	bl	8005142 <TIM_ITRx_SetConfig>
        break;
 8004f5a:	e002      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <TIM_Base_SetConfig+0xb8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_Base_SetConfig+0x30>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe2:	d007      	beq.n	8004ff4 <TIM_Base_SetConfig+0x30>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a26      	ldr	r2, [pc, #152]	; (8005080 <TIM_Base_SetConfig+0xbc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_Base_SetConfig+0x30>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a25      	ldr	r2, [pc, #148]	; (8005084 <TIM_Base_SetConfig+0xc0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_Base_SetConfig+0xb8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0x62>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0x62>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <TIM_Base_SetConfig+0xbc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0x62>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a18      	ldr	r2, [pc, #96]	; (8005084 <TIM_Base_SetConfig+0xc0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <TIM_Base_SetConfig+0xb8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800

08005088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 030a 	bic.w	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr

080050e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0210 	bic.w	r2, r3, #16
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800510e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	f043 0307 	orr.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005190:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	431a      	orrs	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	609a      	str	r2, [r3, #8]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e046      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a10      	ldr	r2, [pc, #64]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800

08005270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e03f      	b.n	8005326 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fe f88e 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	; 0x24
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fc85 	bl	8005be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800530c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b08a      	sub	sp, #40	; 0x28
 8005332:	af02      	add	r7, sp, #8
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b20      	cmp	r3, #32
 800534c:	d17c      	bne.n	8005448 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_UART_Transmit+0x2c>
 8005354:	88fb      	ldrh	r3, [r7, #6]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e075      	b.n	800544a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_UART_Transmit+0x3e>
 8005368:	2302      	movs	r3, #2
 800536a:	e06e      	b.n	800544a <HAL_UART_Transmit+0x11c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2221      	movs	r2, #33	; 0x21
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005382:	f7fe f8fb 	bl	800357c <HAL_GetTick>
 8005386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d108      	bne.n	80053b0 <HAL_UART_Transmit+0x82>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d104      	bne.n	80053b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e003      	b.n	80053b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053c0:	e02a      	b.n	8005418 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fa38 	bl	8005842 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e036      	b.n	800544a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	3302      	adds	r3, #2
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e007      	b.n	800540a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	3301      	adds	r3, #1
 8005408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1cf      	bne.n	80053c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	2140      	movs	r1, #64	; 0x40
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fa08 	bl	8005842 <UART_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e006      	b.n	800544a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	e000      	b.n	800544a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005448:	2302      	movs	r3, #2
  }
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	4613      	mov	r3, r2
 800545e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b20      	cmp	r3, #32
 800546a:	d11d      	bne.n	80054a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_Receive_IT+0x26>
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e016      	b.n	80054aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_UART_Receive_IT+0x38>
 8005486:	2302      	movs	r3, #2
 8005488:	e00f      	b.n	80054aa <HAL_UART_Receive_IT+0x58>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	461a      	mov	r2, r3
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa19 	bl	80058d6 <UART_Start_Receive_IT>
 80054a4:	4603      	mov	r3, r0
 80054a6:	e000      	b.n	80054aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	; 0x28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_UART_IRQHandler+0x52>
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fac9 	bl	8005a96 <UART_Receive_IT>
      return;
 8005504:	e17b      	b.n	80057fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80b1 	beq.w	8005670 <HAL_UART_IRQHandler+0x1bc>
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <HAL_UART_IRQHandler+0x70>
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80a6 	beq.w	8005670 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_UART_IRQHandler+0x90>
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	f043 0201 	orr.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_UART_IRQHandler+0xb0>
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	f043 0202 	orr.w	r2, r3, #2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_UART_IRQHandler+0xd0>
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	f043 0204 	orr.w	r2, r3, #4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00f      	beq.n	80055ae <HAL_UART_IRQHandler+0xfa>
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_UART_IRQHandler+0xee>
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0208 	orr.w	r2, r3, #8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 811e 	beq.w	80057f4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <HAL_UART_IRQHandler+0x11e>
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fa62 	bl	8005a96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d102      	bne.n	80055fa <HAL_UART_IRQHandler+0x146>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d031      	beq.n	800565e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9a4 	bl	8005948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d023      	beq.n	8005656 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	2b00      	cmp	r3, #0
 8005624:	d013      	beq.n	800564e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	4a76      	ldr	r2, [pc, #472]	; (8005804 <HAL_UART_IRQHandler+0x350>)
 800562c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe f924 	bl	8003880 <HAL_DMA_Abort_IT>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	e00e      	b.n	800566c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f8e3 	bl	800581a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e00a      	b.n	800566c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8df 	bl	800581a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e006      	b.n	800566c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8db 	bl	800581a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800566a:	e0c3      	b.n	80057f4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	bf00      	nop
    return;
 800566e:	e0c1      	b.n	80057f4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 80a1 	bne.w	80057bc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 809b 	beq.w	80057bc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8095 	beq.w	80057bc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04e      	beq.n	8005754 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80056c0:	8a3b      	ldrh	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8098 	beq.w	80057f8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056cc:	8a3a      	ldrh	r2, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f080 8092 	bcs.w	80057f8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8a3a      	ldrh	r2, [r7, #16]
 80056d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d02b      	beq.n	800573c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005712:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0210 	bic.w	r2, r2, #16
 8005730:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe f867 	bl	800380a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	b29b      	uxth	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f86d 	bl	800582c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005752:	e051      	b.n	80057f8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800575c:	b29b      	uxth	r3, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d047      	beq.n	80057fc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800576c:	8a7b      	ldrh	r3, [r7, #18]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d044      	beq.n	80057fc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005780:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0210 	bic.w	r2, r2, #16
 80057ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057b0:	8a7b      	ldrh	r3, [r7, #18]
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f839 	bl	800582c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057ba:	e01f      	b.n	80057fc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_UART_IRQHandler+0x324>
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f8f9 	bl	80059c8 <UART_Transmit_IT>
    return;
 80057d6:	e012      	b.n	80057fe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00d      	beq.n	80057fe <HAL_UART_IRQHandler+0x34a>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f93a 	bl	8005a66 <UART_EndTransmit_IT>
    return;
 80057f2:	e004      	b.n	80057fe <HAL_UART_IRQHandler+0x34a>
    return;
 80057f4:	bf00      	nop
 80057f6:	e002      	b.n	80057fe <HAL_UART_IRQHandler+0x34a>
      return;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <HAL_UART_IRQHandler+0x34a>
      return;
 80057fc:	bf00      	nop
  }
}
 80057fe:	3728      	adds	r7, #40	; 0x28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	080059a1 	.word	0x080059a1

08005808 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	603b      	str	r3, [r7, #0]
 800584e:	4613      	mov	r3, r2
 8005850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005852:	e02c      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d028      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0x30>
 8005862:	f7fd fe8b 	bl	800357c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	429a      	cmp	r2, r3
 8005870:	d21d      	bcs.n	80058ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005880:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695a      	ldr	r2, [r3, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0201 	bic.w	r2, r2, #1
 8005890:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e00f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d0c3      	beq.n	8005854 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	4613      	mov	r3, r2
 80058e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2222      	movs	r2, #34	; 0x22
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800591a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0220 	orr.w	r2, r2, #32
 800593a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800595e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695a      	ldr	r2, [r3, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	2b01      	cmp	r3, #1
 8005976:	d107      	bne.n	8005988 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0210 	bic.w	r2, r2, #16
 8005986:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff ff2d 	bl	800581a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b21      	cmp	r3, #33	; 0x21
 80059da:	d13e      	bne.n	8005a5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e4:	d114      	bne.n	8005a10 <UART_Transmit_IT+0x48>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d110      	bne.n	8005a10 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]
 8005a0e:	e008      	b.n	8005a22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6211      	str	r1, [r2, #32]
 8005a1a:	781a      	ldrb	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10f      	bne.n	8005a56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e000      	b.n	8005a5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a5a:	2302      	movs	r3, #2
  }
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff febe 	bl	8005808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b22      	cmp	r3, #34	; 0x22
 8005aa8:	f040 8099 	bne.w	8005bde <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab4:	d117      	bne.n	8005ae6 <UART_Receive_IT+0x50>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d113      	bne.n	8005ae6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	1c9a      	adds	r2, r3, #2
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ae4:	e026      	b.n	8005b34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af8:	d007      	beq.n	8005b0a <UART_Receive_IT+0x74>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <UART_Receive_IT+0x82>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	e008      	b.n	8005b2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4619      	mov	r1, r3
 8005b42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d148      	bne.n	8005bda <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0220 	bic.w	r2, r2, #32
 8005b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d123      	bne.n	8005bd0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0210 	bic.w	r2, r2, #16
 8005b9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b10      	cmp	r3, #16
 8005baa:	d10a      	bne.n	8005bc2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe2f 	bl	800582c <HAL_UARTEx_RxEventCallback>
 8005bce:	e002      	b.n	8005bd6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fb fb91 	bl	80012f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e002      	b.n	8005be0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e000      	b.n	8005be0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c22:	f023 030c 	bic.w	r3, r3, #12
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <UART_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fe fc28 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	e002      	b.n	8005c5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c58:	f7fe fc10 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005c5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009a      	lsls	r2, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <UART_SetConfig+0x118>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	0119      	lsls	r1, r3, #4
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c94:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <UART_SetConfig+0x118>)
 8005c96:	fba3 0302 	umull	r0, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	2064      	movs	r0, #100	; 0x64
 8005c9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	3332      	adds	r3, #50	; 0x32
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <UART_SetConfig+0x118>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb4:	4419      	add	r1, r3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009a      	lsls	r2, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <UART_SetConfig+0x118>)
 8005cce:	fba3 0302 	umull	r0, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2064      	movs	r0, #100	; 0x64
 8005cd6:	fb00 f303 	mul.w	r3, r0, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	; 0x32
 8005ce0:	4a07      	ldr	r2, [pc, #28]	; (8005d00 <UART_SetConfig+0x118>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40013800 	.word	0x40013800
 8005d00:	51eb851f 	.word	0x51eb851f

08005d04 <atoi>:
 8005d04:	220a      	movs	r2, #10
 8005d06:	2100      	movs	r1, #0
 8005d08:	f000 bb58 	b.w	80063bc <strtol>

08005d0c <__errno>:
 8005d0c:	4b01      	ldr	r3, [pc, #4]	; (8005d14 <__errno+0x8>)
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	2000002c 	.word	0x2000002c

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	4d0c      	ldr	r5, [pc, #48]	; (8005d50 <__libc_init_array+0x38>)
 8005d1e:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	42a6      	cmp	r6, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	f002 fbac 	bl	8008484 <_init>
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	4d0a      	ldr	r5, [pc, #40]	; (8005d58 <__libc_init_array+0x40>)
 8005d30:	4c0a      	ldr	r4, [pc, #40]	; (8005d5c <__libc_init_array+0x44>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	42a6      	cmp	r6, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d40:	4798      	blx	r3
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4a:	4798      	blx	r3
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08008be8 	.word	0x08008be8
 8005d54:	08008be8 	.word	0x08008be8
 8005d58:	08008be8 	.word	0x08008be8
 8005d5c:	08008bec 	.word	0x08008bec

08005d60 <localtime>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <localtime+0x30>)
 8005d64:	4604      	mov	r4, r0
 8005d66:	681d      	ldr	r5, [r3, #0]
 8005d68:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005d6a:	b953      	cbnz	r3, 8005d82 <localtime+0x22>
 8005d6c:	2024      	movs	r0, #36	; 0x24
 8005d6e:	f000 f907 	bl	8005f80 <malloc>
 8005d72:	4602      	mov	r2, r0
 8005d74:	63e8      	str	r0, [r5, #60]	; 0x3c
 8005d76:	b920      	cbnz	r0, 8005d82 <localtime+0x22>
 8005d78:	2132      	movs	r1, #50	; 0x32
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <localtime+0x34>)
 8005d7c:	4806      	ldr	r0, [pc, #24]	; (8005d98 <localtime+0x38>)
 8005d7e:	f000 fd65 	bl	800684c <__assert_func>
 8005d82:	4620      	mov	r0, r4
 8005d84:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d8a:	f000 b807 	b.w	8005d9c <localtime_r>
 8005d8e:	bf00      	nop
 8005d90:	2000002c 	.word	0x2000002c
 8005d94:	08008888 	.word	0x08008888
 8005d98:	0800889f 	.word	0x0800889f

08005d9c <localtime_r>:
 8005d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	460c      	mov	r4, r1
 8005da2:	4680      	mov	r8, r0
 8005da4:	f000 fdc6 	bl	8006934 <__gettzinfo>
 8005da8:	4621      	mov	r1, r4
 8005daa:	4605      	mov	r5, r0
 8005dac:	4640      	mov	r0, r8
 8005dae:	f000 fdc5 	bl	800693c <gmtime_r>
 8005db2:	6943      	ldr	r3, [r0, #20]
 8005db4:	4604      	mov	r4, r0
 8005db6:	0799      	lsls	r1, r3, #30
 8005db8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8005dbc:	d105      	bne.n	8005dca <localtime_r+0x2e>
 8005dbe:	2264      	movs	r2, #100	; 0x64
 8005dc0:	fb97 f3f2 	sdiv	r3, r7, r2
 8005dc4:	fb02 7313 	mls	r3, r2, r3, r7
 8005dc8:	bb73      	cbnz	r3, 8005e28 <localtime_r+0x8c>
 8005dca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005dce:	fb97 f6f3 	sdiv	r6, r7, r3
 8005dd2:	fb03 7616 	mls	r6, r3, r6, r7
 8005dd6:	fab6 f386 	clz	r3, r6
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	2230      	movs	r2, #48	; 0x30
 8005dde:	4e66      	ldr	r6, [pc, #408]	; (8005f78 <localtime_r+0x1dc>)
 8005de0:	fb02 6603 	mla	r6, r2, r3, r6
 8005de4:	f000 fb9e 	bl	8006524 <__tz_lock>
 8005de8:	f000 fba8 	bl	800653c <_tzset_unlocked>
 8005dec:	4b63      	ldr	r3, [pc, #396]	; (8005f7c <localtime_r+0x1e0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	b34b      	cbz	r3, 8005e46 <localtime_r+0xaa>
 8005df2:	686b      	ldr	r3, [r5, #4]
 8005df4:	42bb      	cmp	r3, r7
 8005df6:	d119      	bne.n	8005e2c <localtime_r+0x90>
 8005df8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005dfc:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8005e00:	682f      	ldr	r7, [r5, #0]
 8005e02:	b9df      	cbnz	r7, 8005e3c <localtime_r+0xa0>
 8005e04:	4282      	cmp	r2, r0
 8005e06:	eb73 0101 	sbcs.w	r1, r3, r1
 8005e0a:	da23      	bge.n	8005e54 <localtime_r+0xb8>
 8005e0c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8005e10:	4282      	cmp	r2, r0
 8005e12:	eb73 0701 	sbcs.w	r7, r3, r1
 8005e16:	bfb4      	ite	lt
 8005e18:	2701      	movlt	r7, #1
 8005e1a:	2700      	movge	r7, #0
 8005e1c:	4282      	cmp	r2, r0
 8005e1e:	418b      	sbcs	r3, r1
 8005e20:	6227      	str	r7, [r4, #32]
 8005e22:	db19      	blt.n	8005e58 <localtime_r+0xbc>
 8005e24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005e26:	e018      	b.n	8005e5a <localtime_r+0xbe>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e7d7      	b.n	8005ddc <localtime_r+0x40>
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f000 facf 	bl	80063d0 <__tzcalc_limits>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d1e0      	bne.n	8005df8 <localtime_r+0x5c>
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3a:	e004      	b.n	8005e46 <localtime_r+0xaa>
 8005e3c:	4282      	cmp	r2, r0
 8005e3e:	eb73 0101 	sbcs.w	r1, r3, r1
 8005e42:	da02      	bge.n	8005e4a <localtime_r+0xae>
 8005e44:	2300      	movs	r3, #0
 8005e46:	6223      	str	r3, [r4, #32]
 8005e48:	e7ec      	b.n	8005e24 <localtime_r+0x88>
 8005e4a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8005e4e:	4282      	cmp	r2, r0
 8005e50:	418b      	sbcs	r3, r1
 8005e52:	daf7      	bge.n	8005e44 <localtime_r+0xa8>
 8005e54:	2301      	movs	r3, #1
 8005e56:	6223      	str	r3, [r4, #32]
 8005e58:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005e5a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005e5e:	fb93 f5f2 	sdiv	r5, r3, r2
 8005e62:	203c      	movs	r0, #60	; 0x3c
 8005e64:	fb02 3315 	mls	r3, r2, r5, r3
 8005e68:	fb93 f2f0 	sdiv	r2, r3, r0
 8005e6c:	fb00 3012 	mls	r0, r0, r2, r3
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	1a89      	subs	r1, r1, r2
 8005e76:	68a2      	ldr	r2, [r4, #8]
 8005e78:	1a1b      	subs	r3, r3, r0
 8005e7a:	1b52      	subs	r2, r2, r5
 8005e7c:	2b3b      	cmp	r3, #59	; 0x3b
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	6061      	str	r1, [r4, #4]
 8005e82:	60a2      	str	r2, [r4, #8]
 8005e84:	dd34      	ble.n	8005ef0 <localtime_r+0x154>
 8005e86:	3101      	adds	r1, #1
 8005e88:	6061      	str	r1, [r4, #4]
 8005e8a:	3b3c      	subs	r3, #60	; 0x3c
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	2b3b      	cmp	r3, #59	; 0x3b
 8005e92:	dd33      	ble.n	8005efc <localtime_r+0x160>
 8005e94:	3201      	adds	r2, #1
 8005e96:	60a2      	str	r2, [r4, #8]
 8005e98:	3b3c      	subs	r3, #60	; 0x3c
 8005e9a:	6063      	str	r3, [r4, #4]
 8005e9c:	68a3      	ldr	r3, [r4, #8]
 8005e9e:	2b17      	cmp	r3, #23
 8005ea0:	dd32      	ble.n	8005f08 <localtime_r+0x16c>
 8005ea2:	69e2      	ldr	r2, [r4, #28]
 8005ea4:	3b18      	subs	r3, #24
 8005ea6:	3201      	adds	r2, #1
 8005ea8:	61e2      	str	r2, [r4, #28]
 8005eaa:	69a2      	ldr	r2, [r4, #24]
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	3201      	adds	r2, #1
 8005eb0:	2a06      	cmp	r2, #6
 8005eb2:	bfc8      	it	gt
 8005eb4:	2200      	movgt	r2, #0
 8005eb6:	61a2      	str	r2, [r4, #24]
 8005eb8:	68e2      	ldr	r2, [r4, #12]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	3201      	adds	r2, #1
 8005ebe:	60e2      	str	r2, [r4, #12]
 8005ec0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8005ec4:	428a      	cmp	r2, r1
 8005ec6:	dd0e      	ble.n	8005ee6 <localtime_r+0x14a>
 8005ec8:	2b0b      	cmp	r3, #11
 8005eca:	eba2 0201 	sub.w	r2, r2, r1
 8005ece:	60e2      	str	r2, [r4, #12]
 8005ed0:	f103 0201 	add.w	r2, r3, #1
 8005ed4:	bf05      	ittet	eq
 8005ed6:	2200      	moveq	r2, #0
 8005ed8:	6963      	ldreq	r3, [r4, #20]
 8005eda:	6122      	strne	r2, [r4, #16]
 8005edc:	3301      	addeq	r3, #1
 8005ede:	bf02      	ittt	eq
 8005ee0:	6122      	streq	r2, [r4, #16]
 8005ee2:	6163      	streq	r3, [r4, #20]
 8005ee4:	61e2      	streq	r2, [r4, #28]
 8005ee6:	f000 fb23 	bl	8006530 <__tz_unlock>
 8005eea:	4620      	mov	r0, r4
 8005eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dacc      	bge.n	8005e8e <localtime_r+0xf2>
 8005ef4:	3901      	subs	r1, #1
 8005ef6:	6061      	str	r1, [r4, #4]
 8005ef8:	333c      	adds	r3, #60	; 0x3c
 8005efa:	e7c7      	b.n	8005e8c <localtime_r+0xf0>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dacd      	bge.n	8005e9c <localtime_r+0x100>
 8005f00:	3a01      	subs	r2, #1
 8005f02:	60a2      	str	r2, [r4, #8]
 8005f04:	333c      	adds	r3, #60	; 0x3c
 8005f06:	e7c8      	b.n	8005e9a <localtime_r+0xfe>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	daec      	bge.n	8005ee6 <localtime_r+0x14a>
 8005f0c:	69e2      	ldr	r2, [r4, #28]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	3a01      	subs	r2, #1
 8005f12:	61e2      	str	r2, [r4, #28]
 8005f14:	69a2      	ldr	r2, [r4, #24]
 8005f16:	60a3      	str	r3, [r4, #8]
 8005f18:	3a01      	subs	r2, #1
 8005f1a:	bf48      	it	mi
 8005f1c:	2206      	movmi	r2, #6
 8005f1e:	61a2      	str	r2, [r4, #24]
 8005f20:	68e2      	ldr	r2, [r4, #12]
 8005f22:	3a01      	subs	r2, #1
 8005f24:	60e2      	str	r2, [r4, #12]
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	d1dd      	bne.n	8005ee6 <localtime_r+0x14a>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	d405      	bmi.n	8005f3c <localtime_r+0x1a0>
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8005f38:	60e3      	str	r3, [r4, #12]
 8005f3a:	e7d4      	b.n	8005ee6 <localtime_r+0x14a>
 8005f3c:	230b      	movs	r3, #11
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	6963      	ldr	r3, [r4, #20]
 8005f42:	1e5a      	subs	r2, r3, #1
 8005f44:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8005f48:	6162      	str	r2, [r4, #20]
 8005f4a:	079a      	lsls	r2, r3, #30
 8005f4c:	d105      	bne.n	8005f5a <localtime_r+0x1be>
 8005f4e:	2164      	movs	r1, #100	; 0x64
 8005f50:	fb93 f2f1 	sdiv	r2, r3, r1
 8005f54:	fb01 3212 	mls	r2, r1, r2, r3
 8005f58:	b962      	cbnz	r2, 8005f74 <localtime_r+0x1d8>
 8005f5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f5e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f62:	fb02 3311 	mls	r3, r2, r1, r3
 8005f66:	fab3 f383 	clz	r3, r3
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005f70:	61e3      	str	r3, [r4, #28]
 8005f72:	e7de      	b.n	8005f32 <localtime_r+0x196>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e7f9      	b.n	8005f6c <localtime_r+0x1d0>
 8005f78:	080088fc 	.word	0x080088fc
 8005f7c:	20000518 	.word	0x20000518

08005f80 <malloc>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <malloc+0xc>)
 8005f82:	4601      	mov	r1, r0
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f000 b899 	b.w	80060bc <_malloc_r>
 8005f8a:	bf00      	nop
 8005f8c:	2000002c 	.word	0x2000002c

08005f90 <free>:
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <free+0xc>)
 8005f92:	4601      	mov	r1, r0
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f000 b829 	b.w	8005fec <_free_r>
 8005f9a:	bf00      	nop
 8005f9c:	2000002c 	.word	0x2000002c

08005fa0 <memcmp>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	3901      	subs	r1, #1
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4290      	cmp	r0, r2
 8005fa8:	d101      	bne.n	8005fae <memcmp+0xe>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e005      	b.n	8005fba <memcmp+0x1a>
 8005fae:	7803      	ldrb	r3, [r0, #0]
 8005fb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d001      	beq.n	8005fbc <memcmp+0x1c>
 8005fb8:	1b18      	subs	r0, r3, r4
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	e7f2      	b.n	8005fa6 <memcmp+0x6>

08005fc0 <memcpy>:
 8005fc0:	440a      	add	r2, r1
 8005fc2:	4291      	cmp	r1, r2
 8005fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fc8:	d100      	bne.n	8005fcc <memcpy+0xc>
 8005fca:	4770      	bx	lr
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd2:	4291      	cmp	r1, r2
 8005fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fd8:	d1f9      	bne.n	8005fce <memcpy+0xe>
 8005fda:	bd10      	pop	{r4, pc}

08005fdc <memset>:
 8005fdc:	4603      	mov	r3, r0
 8005fde:	4402      	add	r2, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <_free_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4605      	mov	r5, r0
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d040      	beq.n	8006076 <_free_r+0x8a>
 8005ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff8:	1f0c      	subs	r4, r1, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfb8      	it	lt
 8005ffe:	18e4      	addlt	r4, r4, r3
 8006000:	f000 fd50 	bl	8006aa4 <__malloc_lock>
 8006004:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <_free_r+0x8c>)
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	b933      	cbnz	r3, 8006018 <_free_r+0x2c>
 800600a:	6063      	str	r3, [r4, #4]
 800600c:	6014      	str	r4, [r2, #0]
 800600e:	4628      	mov	r0, r5
 8006010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006014:	f000 bd4c 	b.w	8006ab0 <__malloc_unlock>
 8006018:	42a3      	cmp	r3, r4
 800601a:	d908      	bls.n	800602e <_free_r+0x42>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	1821      	adds	r1, r4, r0
 8006020:	428b      	cmp	r3, r1
 8006022:	bf01      	itttt	eq
 8006024:	6819      	ldreq	r1, [r3, #0]
 8006026:	685b      	ldreq	r3, [r3, #4]
 8006028:	1809      	addeq	r1, r1, r0
 800602a:	6021      	streq	r1, [r4, #0]
 800602c:	e7ed      	b.n	800600a <_free_r+0x1e>
 800602e:	461a      	mov	r2, r3
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	b10b      	cbz	r3, 8006038 <_free_r+0x4c>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d9fa      	bls.n	800602e <_free_r+0x42>
 8006038:	6811      	ldr	r1, [r2, #0]
 800603a:	1850      	adds	r0, r2, r1
 800603c:	42a0      	cmp	r0, r4
 800603e:	d10b      	bne.n	8006058 <_free_r+0x6c>
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	4401      	add	r1, r0
 8006044:	1850      	adds	r0, r2, r1
 8006046:	4283      	cmp	r3, r0
 8006048:	6011      	str	r1, [r2, #0]
 800604a:	d1e0      	bne.n	800600e <_free_r+0x22>
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	4401      	add	r1, r0
 8006052:	6011      	str	r1, [r2, #0]
 8006054:	6053      	str	r3, [r2, #4]
 8006056:	e7da      	b.n	800600e <_free_r+0x22>
 8006058:	d902      	bls.n	8006060 <_free_r+0x74>
 800605a:	230c      	movs	r3, #12
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	e7d6      	b.n	800600e <_free_r+0x22>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	1821      	adds	r1, r4, r0
 8006064:	428b      	cmp	r3, r1
 8006066:	bf01      	itttt	eq
 8006068:	6819      	ldreq	r1, [r3, #0]
 800606a:	685b      	ldreq	r3, [r3, #4]
 800606c:	1809      	addeq	r1, r1, r0
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	6054      	str	r4, [r2, #4]
 8006074:	e7cb      	b.n	800600e <_free_r+0x22>
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	200004f4 	.word	0x200004f4

0800607c <sbrk_aligned>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4e0e      	ldr	r6, [pc, #56]	; (80060b8 <sbrk_aligned+0x3c>)
 8006080:	460c      	mov	r4, r1
 8006082:	6831      	ldr	r1, [r6, #0]
 8006084:	4605      	mov	r5, r0
 8006086:	b911      	cbnz	r1, 800608e <sbrk_aligned+0x12>
 8006088:	f000 f8ca 	bl	8006220 <_sbrk_r>
 800608c:	6030      	str	r0, [r6, #0]
 800608e:	4621      	mov	r1, r4
 8006090:	4628      	mov	r0, r5
 8006092:	f000 f8c5 	bl	8006220 <_sbrk_r>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d00a      	beq.n	80060b0 <sbrk_aligned+0x34>
 800609a:	1cc4      	adds	r4, r0, #3
 800609c:	f024 0403 	bic.w	r4, r4, #3
 80060a0:	42a0      	cmp	r0, r4
 80060a2:	d007      	beq.n	80060b4 <sbrk_aligned+0x38>
 80060a4:	1a21      	subs	r1, r4, r0
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f8ba 	bl	8006220 <_sbrk_r>
 80060ac:	3001      	adds	r0, #1
 80060ae:	d101      	bne.n	80060b4 <sbrk_aligned+0x38>
 80060b0:	f04f 34ff 	mov.w	r4, #4294967295
 80060b4:	4620      	mov	r0, r4
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	200004f8 	.word	0x200004f8

080060bc <_malloc_r>:
 80060bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c0:	1ccd      	adds	r5, r1, #3
 80060c2:	f025 0503 	bic.w	r5, r5, #3
 80060c6:	3508      	adds	r5, #8
 80060c8:	2d0c      	cmp	r5, #12
 80060ca:	bf38      	it	cc
 80060cc:	250c      	movcc	r5, #12
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	4607      	mov	r7, r0
 80060d2:	db01      	blt.n	80060d8 <_malloc_r+0x1c>
 80060d4:	42a9      	cmp	r1, r5
 80060d6:	d905      	bls.n	80060e4 <_malloc_r+0x28>
 80060d8:	230c      	movs	r3, #12
 80060da:	2600      	movs	r6, #0
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	4630      	mov	r0, r6
 80060e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e4:	4e2e      	ldr	r6, [pc, #184]	; (80061a0 <_malloc_r+0xe4>)
 80060e6:	f000 fcdd 	bl	8006aa4 <__malloc_lock>
 80060ea:	6833      	ldr	r3, [r6, #0]
 80060ec:	461c      	mov	r4, r3
 80060ee:	bb34      	cbnz	r4, 800613e <_malloc_r+0x82>
 80060f0:	4629      	mov	r1, r5
 80060f2:	4638      	mov	r0, r7
 80060f4:	f7ff ffc2 	bl	800607c <sbrk_aligned>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	4604      	mov	r4, r0
 80060fc:	d14d      	bne.n	800619a <_malloc_r+0xde>
 80060fe:	6834      	ldr	r4, [r6, #0]
 8006100:	4626      	mov	r6, r4
 8006102:	2e00      	cmp	r6, #0
 8006104:	d140      	bne.n	8006188 <_malloc_r+0xcc>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	4631      	mov	r1, r6
 800610a:	4638      	mov	r0, r7
 800610c:	eb04 0803 	add.w	r8, r4, r3
 8006110:	f000 f886 	bl	8006220 <_sbrk_r>
 8006114:	4580      	cmp	r8, r0
 8006116:	d13a      	bne.n	800618e <_malloc_r+0xd2>
 8006118:	6821      	ldr	r1, [r4, #0]
 800611a:	3503      	adds	r5, #3
 800611c:	1a6d      	subs	r5, r5, r1
 800611e:	f025 0503 	bic.w	r5, r5, #3
 8006122:	3508      	adds	r5, #8
 8006124:	2d0c      	cmp	r5, #12
 8006126:	bf38      	it	cc
 8006128:	250c      	movcc	r5, #12
 800612a:	4638      	mov	r0, r7
 800612c:	4629      	mov	r1, r5
 800612e:	f7ff ffa5 	bl	800607c <sbrk_aligned>
 8006132:	3001      	adds	r0, #1
 8006134:	d02b      	beq.n	800618e <_malloc_r+0xd2>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	442b      	add	r3, r5
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	e00e      	b.n	800615c <_malloc_r+0xa0>
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	1b52      	subs	r2, r2, r5
 8006142:	d41e      	bmi.n	8006182 <_malloc_r+0xc6>
 8006144:	2a0b      	cmp	r2, #11
 8006146:	d916      	bls.n	8006176 <_malloc_r+0xba>
 8006148:	1961      	adds	r1, r4, r5
 800614a:	42a3      	cmp	r3, r4
 800614c:	6025      	str	r5, [r4, #0]
 800614e:	bf18      	it	ne
 8006150:	6059      	strne	r1, [r3, #4]
 8006152:	6863      	ldr	r3, [r4, #4]
 8006154:	bf08      	it	eq
 8006156:	6031      	streq	r1, [r6, #0]
 8006158:	5162      	str	r2, [r4, r5]
 800615a:	604b      	str	r3, [r1, #4]
 800615c:	4638      	mov	r0, r7
 800615e:	f104 060b 	add.w	r6, r4, #11
 8006162:	f000 fca5 	bl	8006ab0 <__malloc_unlock>
 8006166:	f026 0607 	bic.w	r6, r6, #7
 800616a:	1d23      	adds	r3, r4, #4
 800616c:	1af2      	subs	r2, r6, r3
 800616e:	d0b6      	beq.n	80060de <_malloc_r+0x22>
 8006170:	1b9b      	subs	r3, r3, r6
 8006172:	50a3      	str	r3, [r4, r2]
 8006174:	e7b3      	b.n	80060de <_malloc_r+0x22>
 8006176:	6862      	ldr	r2, [r4, #4]
 8006178:	42a3      	cmp	r3, r4
 800617a:	bf0c      	ite	eq
 800617c:	6032      	streq	r2, [r6, #0]
 800617e:	605a      	strne	r2, [r3, #4]
 8006180:	e7ec      	b.n	800615c <_malloc_r+0xa0>
 8006182:	4623      	mov	r3, r4
 8006184:	6864      	ldr	r4, [r4, #4]
 8006186:	e7b2      	b.n	80060ee <_malloc_r+0x32>
 8006188:	4634      	mov	r4, r6
 800618a:	6876      	ldr	r6, [r6, #4]
 800618c:	e7b9      	b.n	8006102 <_malloc_r+0x46>
 800618e:	230c      	movs	r3, #12
 8006190:	4638      	mov	r0, r7
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	f000 fc8c 	bl	8006ab0 <__malloc_unlock>
 8006198:	e7a1      	b.n	80060de <_malloc_r+0x22>
 800619a:	6025      	str	r5, [r4, #0]
 800619c:	e7de      	b.n	800615c <_malloc_r+0xa0>
 800619e:	bf00      	nop
 80061a0:	200004f4 	.word	0x200004f4

080061a4 <rand>:
 80061a4:	4b16      	ldr	r3, [pc, #88]	; (8006200 <rand+0x5c>)
 80061a6:	b510      	push	{r4, lr}
 80061a8:	681c      	ldr	r4, [r3, #0]
 80061aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061ac:	b9b3      	cbnz	r3, 80061dc <rand+0x38>
 80061ae:	2018      	movs	r0, #24
 80061b0:	f7ff fee6 	bl	8005f80 <malloc>
 80061b4:	4602      	mov	r2, r0
 80061b6:	63a0      	str	r0, [r4, #56]	; 0x38
 80061b8:	b920      	cbnz	r0, 80061c4 <rand+0x20>
 80061ba:	214e      	movs	r1, #78	; 0x4e
 80061bc:	4b11      	ldr	r3, [pc, #68]	; (8006204 <rand+0x60>)
 80061be:	4812      	ldr	r0, [pc, #72]	; (8006208 <rand+0x64>)
 80061c0:	f000 fb44 	bl	800684c <__assert_func>
 80061c4:	4911      	ldr	r1, [pc, #68]	; (800620c <rand+0x68>)
 80061c6:	4b12      	ldr	r3, [pc, #72]	; (8006210 <rand+0x6c>)
 80061c8:	e9c0 1300 	strd	r1, r3, [r0]
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <rand+0x70>)
 80061ce:	2100      	movs	r1, #0
 80061d0:	6083      	str	r3, [r0, #8]
 80061d2:	230b      	movs	r3, #11
 80061d4:	8183      	strh	r3, [r0, #12]
 80061d6:	2001      	movs	r0, #1
 80061d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80061dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80061de:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <rand+0x74>)
 80061e0:	6920      	ldr	r0, [r4, #16]
 80061e2:	6963      	ldr	r3, [r4, #20]
 80061e4:	4342      	muls	r2, r0
 80061e6:	490d      	ldr	r1, [pc, #52]	; (800621c <rand+0x78>)
 80061e8:	fb01 2203 	mla	r2, r1, r3, r2
 80061ec:	fba0 0101 	umull	r0, r1, r0, r1
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	eb42 0001 	adc.w	r0, r2, r1
 80061f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80061fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061fe:	bd10      	pop	{r4, pc}
 8006200:	2000002c 	.word	0x2000002c
 8006204:	08008888 	.word	0x08008888
 8006208:	0800895c 	.word	0x0800895c
 800620c:	abcd330e 	.word	0xabcd330e
 8006210:	e66d1234 	.word	0xe66d1234
 8006214:	0005deec 	.word	0x0005deec
 8006218:	5851f42d 	.word	0x5851f42d
 800621c:	4c957f2d 	.word	0x4c957f2d

08006220 <_sbrk_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	2300      	movs	r3, #0
 8006224:	4d05      	ldr	r5, [pc, #20]	; (800623c <_sbrk_r+0x1c>)
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fc f8ca 	bl	80023c4 <_sbrk>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_sbrk_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_sbrk_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	20000528 	.word	0x20000528

08006240 <siprintf>:
 8006240:	b40e      	push	{r1, r2, r3}
 8006242:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006246:	b500      	push	{lr}
 8006248:	b09c      	sub	sp, #112	; 0x70
 800624a:	ab1d      	add	r3, sp, #116	; 0x74
 800624c:	9002      	str	r0, [sp, #8]
 800624e:	9006      	str	r0, [sp, #24]
 8006250:	9107      	str	r1, [sp, #28]
 8006252:	9104      	str	r1, [sp, #16]
 8006254:	4808      	ldr	r0, [pc, #32]	; (8006278 <siprintf+0x38>)
 8006256:	4909      	ldr	r1, [pc, #36]	; (800627c <siprintf+0x3c>)
 8006258:	f853 2b04 	ldr.w	r2, [r3], #4
 800625c:	9105      	str	r1, [sp, #20]
 800625e:	6800      	ldr	r0, [r0, #0]
 8006260:	a902      	add	r1, sp, #8
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	f000 fc86 	bl	8006b74 <_svfiprintf_r>
 8006268:	2200      	movs	r2, #0
 800626a:	9b02      	ldr	r3, [sp, #8]
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	b01c      	add	sp, #112	; 0x70
 8006270:	f85d eb04 	ldr.w	lr, [sp], #4
 8006274:	b003      	add	sp, #12
 8006276:	4770      	bx	lr
 8006278:	2000002c 	.word	0x2000002c
 800627c:	ffff0208 	.word	0xffff0208

08006280 <strchr>:
 8006280:	4603      	mov	r3, r0
 8006282:	b2c9      	uxtb	r1, r1
 8006284:	4618      	mov	r0, r3
 8006286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628a:	b112      	cbz	r2, 8006292 <strchr+0x12>
 800628c:	428a      	cmp	r2, r1
 800628e:	d1f9      	bne.n	8006284 <strchr+0x4>
 8006290:	4770      	bx	lr
 8006292:	2900      	cmp	r1, #0
 8006294:	bf18      	it	ne
 8006296:	2000      	movne	r0, #0
 8006298:	4770      	bx	lr

0800629a <strncpy>:
 800629a:	4603      	mov	r3, r0
 800629c:	b510      	push	{r4, lr}
 800629e:	3901      	subs	r1, #1
 80062a0:	b132      	cbz	r2, 80062b0 <strncpy+0x16>
 80062a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80062a6:	3a01      	subs	r2, #1
 80062a8:	f803 4b01 	strb.w	r4, [r3], #1
 80062ac:	2c00      	cmp	r4, #0
 80062ae:	d1f7      	bne.n	80062a0 <strncpy+0x6>
 80062b0:	2100      	movs	r1, #0
 80062b2:	441a      	add	r2, r3
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d100      	bne.n	80062ba <strncpy+0x20>
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	f803 1b01 	strb.w	r1, [r3], #1
 80062be:	e7f9      	b.n	80062b4 <strncpy+0x1a>

080062c0 <_strtol_l.constprop.0>:
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c6:	4680      	mov	r8, r0
 80062c8:	d001      	beq.n	80062ce <_strtol_l.constprop.0+0xe>
 80062ca:	2b24      	cmp	r3, #36	; 0x24
 80062cc:	d906      	bls.n	80062dc <_strtol_l.constprop.0+0x1c>
 80062ce:	f7ff fd1d 	bl	8005d0c <__errno>
 80062d2:	2316      	movs	r3, #22
 80062d4:	6003      	str	r3, [r0, #0]
 80062d6:	2000      	movs	r0, #0
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	460d      	mov	r5, r1
 80062de:	4f35      	ldr	r7, [pc, #212]	; (80063b4 <_strtol_l.constprop.0+0xf4>)
 80062e0:	4628      	mov	r0, r5
 80062e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062e6:	5de6      	ldrb	r6, [r4, r7]
 80062e8:	f016 0608 	ands.w	r6, r6, #8
 80062ec:	d1f8      	bne.n	80062e0 <_strtol_l.constprop.0+0x20>
 80062ee:	2c2d      	cmp	r4, #45	; 0x2d
 80062f0:	d12f      	bne.n	8006352 <_strtol_l.constprop.0+0x92>
 80062f2:	2601      	movs	r6, #1
 80062f4:	782c      	ldrb	r4, [r5, #0]
 80062f6:	1c85      	adds	r5, r0, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d057      	beq.n	80063ac <_strtol_l.constprop.0+0xec>
 80062fc:	2b10      	cmp	r3, #16
 80062fe:	d109      	bne.n	8006314 <_strtol_l.constprop.0+0x54>
 8006300:	2c30      	cmp	r4, #48	; 0x30
 8006302:	d107      	bne.n	8006314 <_strtol_l.constprop.0+0x54>
 8006304:	7828      	ldrb	r0, [r5, #0]
 8006306:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800630a:	2858      	cmp	r0, #88	; 0x58
 800630c:	d149      	bne.n	80063a2 <_strtol_l.constprop.0+0xe2>
 800630e:	2310      	movs	r3, #16
 8006310:	786c      	ldrb	r4, [r5, #1]
 8006312:	3502      	adds	r5, #2
 8006314:	2700      	movs	r7, #0
 8006316:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800631a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800631e:	fbbe f9f3 	udiv	r9, lr, r3
 8006322:	4638      	mov	r0, r7
 8006324:	fb03 ea19 	mls	sl, r3, r9, lr
 8006328:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800632c:	f1bc 0f09 	cmp.w	ip, #9
 8006330:	d814      	bhi.n	800635c <_strtol_l.constprop.0+0x9c>
 8006332:	4664      	mov	r4, ip
 8006334:	42a3      	cmp	r3, r4
 8006336:	dd22      	ble.n	800637e <_strtol_l.constprop.0+0xbe>
 8006338:	2f00      	cmp	r7, #0
 800633a:	db1d      	blt.n	8006378 <_strtol_l.constprop.0+0xb8>
 800633c:	4581      	cmp	r9, r0
 800633e:	d31b      	bcc.n	8006378 <_strtol_l.constprop.0+0xb8>
 8006340:	d101      	bne.n	8006346 <_strtol_l.constprop.0+0x86>
 8006342:	45a2      	cmp	sl, r4
 8006344:	db18      	blt.n	8006378 <_strtol_l.constprop.0+0xb8>
 8006346:	2701      	movs	r7, #1
 8006348:	fb00 4003 	mla	r0, r0, r3, r4
 800634c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006350:	e7ea      	b.n	8006328 <_strtol_l.constprop.0+0x68>
 8006352:	2c2b      	cmp	r4, #43	; 0x2b
 8006354:	bf04      	itt	eq
 8006356:	782c      	ldrbeq	r4, [r5, #0]
 8006358:	1c85      	addeq	r5, r0, #2
 800635a:	e7cd      	b.n	80062f8 <_strtol_l.constprop.0+0x38>
 800635c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006360:	f1bc 0f19 	cmp.w	ip, #25
 8006364:	d801      	bhi.n	800636a <_strtol_l.constprop.0+0xaa>
 8006366:	3c37      	subs	r4, #55	; 0x37
 8006368:	e7e4      	b.n	8006334 <_strtol_l.constprop.0+0x74>
 800636a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800636e:	f1bc 0f19 	cmp.w	ip, #25
 8006372:	d804      	bhi.n	800637e <_strtol_l.constprop.0+0xbe>
 8006374:	3c57      	subs	r4, #87	; 0x57
 8006376:	e7dd      	b.n	8006334 <_strtol_l.constprop.0+0x74>
 8006378:	f04f 37ff 	mov.w	r7, #4294967295
 800637c:	e7e6      	b.n	800634c <_strtol_l.constprop.0+0x8c>
 800637e:	2f00      	cmp	r7, #0
 8006380:	da07      	bge.n	8006392 <_strtol_l.constprop.0+0xd2>
 8006382:	2322      	movs	r3, #34	; 0x22
 8006384:	4670      	mov	r0, lr
 8006386:	f8c8 3000 	str.w	r3, [r8]
 800638a:	2a00      	cmp	r2, #0
 800638c:	d0a4      	beq.n	80062d8 <_strtol_l.constprop.0+0x18>
 800638e:	1e69      	subs	r1, r5, #1
 8006390:	e005      	b.n	800639e <_strtol_l.constprop.0+0xde>
 8006392:	b106      	cbz	r6, 8006396 <_strtol_l.constprop.0+0xd6>
 8006394:	4240      	negs	r0, r0
 8006396:	2a00      	cmp	r2, #0
 8006398:	d09e      	beq.n	80062d8 <_strtol_l.constprop.0+0x18>
 800639a:	2f00      	cmp	r7, #0
 800639c:	d1f7      	bne.n	800638e <_strtol_l.constprop.0+0xce>
 800639e:	6011      	str	r1, [r2, #0]
 80063a0:	e79a      	b.n	80062d8 <_strtol_l.constprop.0+0x18>
 80063a2:	2430      	movs	r4, #48	; 0x30
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1b5      	bne.n	8006314 <_strtol_l.constprop.0+0x54>
 80063a8:	2308      	movs	r3, #8
 80063aa:	e7b3      	b.n	8006314 <_strtol_l.constprop.0+0x54>
 80063ac:	2c30      	cmp	r4, #48	; 0x30
 80063ae:	d0a9      	beq.n	8006304 <_strtol_l.constprop.0+0x44>
 80063b0:	230a      	movs	r3, #10
 80063b2:	e7af      	b.n	8006314 <_strtol_l.constprop.0+0x54>
 80063b4:	08008a30 	.word	0x08008a30

080063b8 <_strtol_r>:
 80063b8:	f7ff bf82 	b.w	80062c0 <_strtol_l.constprop.0>

080063bc <strtol>:
 80063bc:	4613      	mov	r3, r2
 80063be:	460a      	mov	r2, r1
 80063c0:	4601      	mov	r1, r0
 80063c2:	4802      	ldr	r0, [pc, #8]	; (80063cc <strtol+0x10>)
 80063c4:	6800      	ldr	r0, [r0, #0]
 80063c6:	f7ff bf7b 	b.w	80062c0 <_strtol_l.constprop.0>
 80063ca:	bf00      	nop
 80063cc:	2000002c 	.word	0x2000002c

080063d0 <__tzcalc_limits>:
 80063d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	4605      	mov	r5, r0
 80063d6:	f000 faad 	bl	8006934 <__gettzinfo>
 80063da:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80063de:	429d      	cmp	r5, r3
 80063e0:	f340 809a 	ble.w	8006518 <__tzcalc_limits+0x148>
 80063e4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80063e8:	18ac      	adds	r4, r5, r2
 80063ea:	f240 126d 	movw	r2, #365	; 0x16d
 80063ee:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	fb02 4403 	mla	r4, r2, r3, r4
 80063f8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80063fc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8006400:	fb93 f3f2 	sdiv	r3, r3, r2
 8006404:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8006408:	441c      	add	r4, r3
 800640a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800640e:	186a      	adds	r2, r5, r1
 8006410:	fbb2 f2f3 	udiv	r2, r2, r3
 8006414:	fb95 fcf3 	sdiv	ip, r5, r3
 8006418:	4414      	add	r4, r2
 800641a:	2264      	movs	r2, #100	; 0x64
 800641c:	fb03 5c1c 	mls	ip, r3, ip, r5
 8006420:	fb95 f7f2 	sdiv	r7, r5, r2
 8006424:	fabc f68c 	clz	r6, ip
 8006428:	4601      	mov	r1, r0
 800642a:	fb02 5717 	mls	r7, r2, r7, r5
 800642e:	6045      	str	r5, [r0, #4]
 8006430:	0976      	lsrs	r6, r6, #5
 8006432:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8006436:	f005 0203 	and.w	r2, r5, #3
 800643a:	7a0d      	ldrb	r5, [r1, #8]
 800643c:	694b      	ldr	r3, [r1, #20]
 800643e:	2d4a      	cmp	r5, #74	; 0x4a
 8006440:	d12d      	bne.n	800649e <__tzcalc_limits+0xce>
 8006442:	eb04 0e03 	add.w	lr, r4, r3
 8006446:	b902      	cbnz	r2, 800644a <__tzcalc_limits+0x7a>
 8006448:	b917      	cbnz	r7, 8006450 <__tzcalc_limits+0x80>
 800644a:	f1bc 0f00 	cmp.w	ip, #0
 800644e:	d124      	bne.n	800649a <__tzcalc_limits+0xca>
 8006450:	2b3b      	cmp	r3, #59	; 0x3b
 8006452:	bfd4      	ite	le
 8006454:	2300      	movle	r3, #0
 8006456:	2301      	movgt	r3, #1
 8006458:	4473      	add	r3, lr
 800645a:	3b01      	subs	r3, #1
 800645c:	698d      	ldr	r5, [r1, #24]
 800645e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800651c <__tzcalc_limits+0x14c>
 8006462:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8006466:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800646a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800646c:	18ed      	adds	r5, r5, r3
 800646e:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8006472:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8006476:	3128      	adds	r1, #40	; 0x28
 8006478:	458b      	cmp	fp, r1
 800647a:	d1de      	bne.n	800643a <__tzcalc_limits+0x6a>
 800647c:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8006480:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8006484:	428c      	cmp	r4, r1
 8006486:	eb72 0303 	sbcs.w	r3, r2, r3
 800648a:	bfb4      	ite	lt
 800648c:	2301      	movlt	r3, #1
 800648e:	2300      	movge	r3, #0
 8006490:	6003      	str	r3, [r0, #0]
 8006492:	2001      	movs	r0, #1
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	2300      	movs	r3, #0
 800649c:	e7dc      	b.n	8006458 <__tzcalc_limits+0x88>
 800649e:	2d44      	cmp	r5, #68	; 0x44
 80064a0:	d101      	bne.n	80064a6 <__tzcalc_limits+0xd6>
 80064a2:	4423      	add	r3, r4
 80064a4:	e7da      	b.n	800645c <__tzcalc_limits+0x8c>
 80064a6:	bb8a      	cbnz	r2, 800650c <__tzcalc_limits+0x13c>
 80064a8:	2f00      	cmp	r7, #0
 80064aa:	bf0c      	ite	eq
 80064ac:	4635      	moveq	r5, r6
 80064ae:	2501      	movne	r5, #1
 80064b0:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80064b4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80064b8:	f04f 0800 	mov.w	r8, #0
 80064bc:	f8cd e004 	str.w	lr, [sp, #4]
 80064c0:	46a6      	mov	lr, r4
 80064c2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006520 <__tzcalc_limits+0x150>
 80064c6:	fb0a 9505 	mla	r5, sl, r5, r9
 80064ca:	3d04      	subs	r5, #4
 80064cc:	f8dd a004 	ldr.w	sl, [sp, #4]
 80064d0:	f108 0801 	add.w	r8, r8, #1
 80064d4:	45c2      	cmp	sl, r8
 80064d6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80064da:	dc19      	bgt.n	8006510 <__tzcalc_limits+0x140>
 80064dc:	f04f 0807 	mov.w	r8, #7
 80064e0:	f10e 0504 	add.w	r5, lr, #4
 80064e4:	fb95 f8f8 	sdiv	r8, r5, r8
 80064e8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80064ec:	eba5 0808 	sub.w	r8, r5, r8
 80064f0:	ebb3 0808 	subs.w	r8, r3, r8
 80064f4:	690b      	ldr	r3, [r1, #16]
 80064f6:	bf48      	it	mi
 80064f8:	f108 0807 	addmi.w	r8, r8, #7
 80064fc:	3b01      	subs	r3, #1
 80064fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006502:	4443      	add	r3, r8
 8006504:	454b      	cmp	r3, r9
 8006506:	da05      	bge.n	8006514 <__tzcalc_limits+0x144>
 8006508:	4473      	add	r3, lr
 800650a:	e7a7      	b.n	800645c <__tzcalc_limits+0x8c>
 800650c:	4635      	mov	r5, r6
 800650e:	e7cf      	b.n	80064b0 <__tzcalc_limits+0xe0>
 8006510:	44ce      	add	lr, r9
 8006512:	e7db      	b.n	80064cc <__tzcalc_limits+0xfc>
 8006514:	3b07      	subs	r3, #7
 8006516:	e7f5      	b.n	8006504 <__tzcalc_limits+0x134>
 8006518:	2000      	movs	r0, #0
 800651a:	e7bb      	b.n	8006494 <__tzcalc_limits+0xc4>
 800651c:	00015180 	.word	0x00015180
 8006520:	080088fc 	.word	0x080088fc

08006524 <__tz_lock>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__tz_lock+0x8>)
 8006526:	f000 bab8 	b.w	8006a9a <__retarget_lock_acquire>
 800652a:	bf00      	nop
 800652c:	20000524 	.word	0x20000524

08006530 <__tz_unlock>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__tz_unlock+0x8>)
 8006532:	f000 bab4 	b.w	8006a9e <__retarget_lock_release>
 8006536:	bf00      	nop
 8006538:	20000524 	.word	0x20000524

0800653c <_tzset_unlocked>:
 800653c:	4b01      	ldr	r3, [pc, #4]	; (8006544 <_tzset_unlocked+0x8>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	f000 b802 	b.w	8006548 <_tzset_unlocked_r>
 8006544:	2000002c 	.word	0x2000002c

08006548 <_tzset_unlocked_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	b08d      	sub	sp, #52	; 0x34
 800654e:	4607      	mov	r7, r0
 8006550:	f000 f9f0 	bl	8006934 <__gettzinfo>
 8006554:	49b1      	ldr	r1, [pc, #708]	; (800681c <_tzset_unlocked_r+0x2d4>)
 8006556:	4605      	mov	r5, r0
 8006558:	4638      	mov	r0, r7
 800655a:	f000 f9e3 	bl	8006924 <_getenv_r>
 800655e:	4eb0      	ldr	r6, [pc, #704]	; (8006820 <_tzset_unlocked_r+0x2d8>)
 8006560:	4604      	mov	r4, r0
 8006562:	b970      	cbnz	r0, 8006582 <_tzset_unlocked_r+0x3a>
 8006564:	4baf      	ldr	r3, [pc, #700]	; (8006824 <_tzset_unlocked_r+0x2dc>)
 8006566:	4ab0      	ldr	r2, [pc, #704]	; (8006828 <_tzset_unlocked_r+0x2e0>)
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	4bb0      	ldr	r3, [pc, #704]	; (800682c <_tzset_unlocked_r+0x2e4>)
 800656c:	6018      	str	r0, [r3, #0]
 800656e:	4bb0      	ldr	r3, [pc, #704]	; (8006830 <_tzset_unlocked_r+0x2e8>)
 8006570:	6830      	ldr	r0, [r6, #0]
 8006572:	e9c3 2200 	strd	r2, r2, [r3]
 8006576:	f7ff fd0b 	bl	8005f90 <free>
 800657a:	6034      	str	r4, [r6, #0]
 800657c:	b00d      	add	sp, #52	; 0x34
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	6831      	ldr	r1, [r6, #0]
 8006584:	2900      	cmp	r1, #0
 8006586:	d162      	bne.n	800664e <_tzset_unlocked_r+0x106>
 8006588:	6830      	ldr	r0, [r6, #0]
 800658a:	f7ff fd01 	bl	8005f90 <free>
 800658e:	4620      	mov	r0, r4
 8006590:	f7f9 fde6 	bl	8000160 <strlen>
 8006594:	1c41      	adds	r1, r0, #1
 8006596:	4638      	mov	r0, r7
 8006598:	f7ff fd90 	bl	80060bc <_malloc_r>
 800659c:	6030      	str	r0, [r6, #0]
 800659e:	2800      	cmp	r0, #0
 80065a0:	d15a      	bne.n	8006658 <_tzset_unlocked_r+0x110>
 80065a2:	7823      	ldrb	r3, [r4, #0]
 80065a4:	ae0a      	add	r6, sp, #40	; 0x28
 80065a6:	2b3a      	cmp	r3, #58	; 0x3a
 80065a8:	bf08      	it	eq
 80065aa:	3401      	addeq	r4, #1
 80065ac:	4633      	mov	r3, r6
 80065ae:	4620      	mov	r0, r4
 80065b0:	4aa0      	ldr	r2, [pc, #640]	; (8006834 <_tzset_unlocked_r+0x2ec>)
 80065b2:	49a1      	ldr	r1, [pc, #644]	; (8006838 <_tzset_unlocked_r+0x2f0>)
 80065b4:	f000 fecc 	bl	8007350 <siscanf>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	dddf      	ble.n	800657c <_tzset_unlocked_r+0x34>
 80065bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065be:	18e7      	adds	r7, r4, r3
 80065c0:	5ce3      	ldrb	r3, [r4, r3]
 80065c2:	2b2d      	cmp	r3, #45	; 0x2d
 80065c4:	d14c      	bne.n	8006660 <_tzset_unlocked_r+0x118>
 80065c6:	f04f 38ff 	mov.w	r8, #4294967295
 80065ca:	3701      	adds	r7, #1
 80065cc:	2400      	movs	r4, #0
 80065ce:	f10d 0a20 	add.w	sl, sp, #32
 80065d2:	f10d 0b1e 	add.w	fp, sp, #30
 80065d6:	4633      	mov	r3, r6
 80065d8:	4638      	mov	r0, r7
 80065da:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80065de:	4997      	ldr	r1, [pc, #604]	; (800683c <_tzset_unlocked_r+0x2f4>)
 80065e0:	9603      	str	r6, [sp, #12]
 80065e2:	f8cd b000 	str.w	fp, [sp]
 80065e6:	aa07      	add	r2, sp, #28
 80065e8:	f8ad 401e 	strh.w	r4, [sp, #30]
 80065ec:	f8ad 4020 	strh.w	r4, [sp, #32]
 80065f0:	f000 feae 	bl	8007350 <siscanf>
 80065f4:	42a0      	cmp	r0, r4
 80065f6:	ddc1      	ble.n	800657c <_tzset_unlocked_r+0x34>
 80065f8:	213c      	movs	r1, #60	; 0x3c
 80065fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80065fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006602:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8006840 <_tzset_unlocked_r+0x2f8>
 8006606:	fb01 3302 	mla	r3, r1, r2, r3
 800660a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800660e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006612:	fb01 3302 	mla	r3, r1, r2, r3
 8006616:	fb08 f303 	mul.w	r3, r8, r3
 800661a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8006830 <_tzset_unlocked_r+0x2e8>
 800661e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006620:	4b84      	ldr	r3, [pc, #528]	; (8006834 <_tzset_unlocked_r+0x2ec>)
 8006622:	464a      	mov	r2, r9
 8006624:	f8c8 3000 	str.w	r3, [r8]
 8006628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662a:	4983      	ldr	r1, [pc, #524]	; (8006838 <_tzset_unlocked_r+0x2f0>)
 800662c:	441f      	add	r7, r3
 800662e:	4638      	mov	r0, r7
 8006630:	4633      	mov	r3, r6
 8006632:	f000 fe8d 	bl	8007350 <siscanf>
 8006636:	42a0      	cmp	r0, r4
 8006638:	dc18      	bgt.n	800666c <_tzset_unlocked_r+0x124>
 800663a:	f8d8 3000 	ldr.w	r3, [r8]
 800663e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006640:	f8c8 3004 	str.w	r3, [r8, #4]
 8006644:	4b77      	ldr	r3, [pc, #476]	; (8006824 <_tzset_unlocked_r+0x2dc>)
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	4b78      	ldr	r3, [pc, #480]	; (800682c <_tzset_unlocked_r+0x2e4>)
 800664a:	601c      	str	r4, [r3, #0]
 800664c:	e796      	b.n	800657c <_tzset_unlocked_r+0x34>
 800664e:	f7f9 fd7d 	bl	800014c <strcmp>
 8006652:	2800      	cmp	r0, #0
 8006654:	d198      	bne.n	8006588 <_tzset_unlocked_r+0x40>
 8006656:	e791      	b.n	800657c <_tzset_unlocked_r+0x34>
 8006658:	4621      	mov	r1, r4
 800665a:	f000 fee8 	bl	800742e <strcpy>
 800665e:	e7a0      	b.n	80065a2 <_tzset_unlocked_r+0x5a>
 8006660:	2b2b      	cmp	r3, #43	; 0x2b
 8006662:	f04f 0801 	mov.w	r8, #1
 8006666:	bf08      	it	eq
 8006668:	3701      	addeq	r7, #1
 800666a:	e7af      	b.n	80065cc <_tzset_unlocked_r+0x84>
 800666c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666e:	f8c8 9004 	str.w	r9, [r8, #4]
 8006672:	18fc      	adds	r4, r7, r3
 8006674:	5cfb      	ldrb	r3, [r7, r3]
 8006676:	2b2d      	cmp	r3, #45	; 0x2d
 8006678:	f040 808c 	bne.w	8006794 <_tzset_unlocked_r+0x24c>
 800667c:	f04f 37ff 	mov.w	r7, #4294967295
 8006680:	3401      	adds	r4, #1
 8006682:	2300      	movs	r3, #0
 8006684:	4620      	mov	r0, r4
 8006686:	f8ad 301c 	strh.w	r3, [sp, #28]
 800668a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800668e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006692:	930a      	str	r3, [sp, #40]	; 0x28
 8006694:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006698:	4633      	mov	r3, r6
 800669a:	e9cd b600 	strd	fp, r6, [sp]
 800669e:	4967      	ldr	r1, [pc, #412]	; (800683c <_tzset_unlocked_r+0x2f4>)
 80066a0:	aa07      	add	r2, sp, #28
 80066a2:	f000 fe55 	bl	8007350 <siscanf>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	dc7a      	bgt.n	80067a0 <_tzset_unlocked_r+0x258>
 80066aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80066ac:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80066b0:	462f      	mov	r7, r5
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	652b      	str	r3, [r5, #80]	; 0x50
 80066b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ba:	441c      	add	r4, r3
 80066bc:	7823      	ldrb	r3, [r4, #0]
 80066be:	2b2c      	cmp	r3, #44	; 0x2c
 80066c0:	bf08      	it	eq
 80066c2:	3401      	addeq	r4, #1
 80066c4:	f894 8000 	ldrb.w	r8, [r4]
 80066c8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80066cc:	d17a      	bne.n	80067c4 <_tzset_unlocked_r+0x27c>
 80066ce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80066d2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80066d6:	ab09      	add	r3, sp, #36	; 0x24
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4620      	mov	r0, r4
 80066dc:	4633      	mov	r3, r6
 80066de:	4959      	ldr	r1, [pc, #356]	; (8006844 <_tzset_unlocked_r+0x2fc>)
 80066e0:	9603      	str	r6, [sp, #12]
 80066e2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80066e6:	f000 fe33 	bl	8007350 <siscanf>
 80066ea:	2803      	cmp	r0, #3
 80066ec:	f47f af46 	bne.w	800657c <_tzset_unlocked_r+0x34>
 80066f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80066f4:	1e4b      	subs	r3, r1, #1
 80066f6:	2b0b      	cmp	r3, #11
 80066f8:	f63f af40 	bhi.w	800657c <_tzset_unlocked_r+0x34>
 80066fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006700:	1e53      	subs	r3, r2, #1
 8006702:	2b04      	cmp	r3, #4
 8006704:	f63f af3a 	bhi.w	800657c <_tzset_unlocked_r+0x34>
 8006708:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800670c:	2b06      	cmp	r3, #6
 800670e:	f63f af35 	bhi.w	800657c <_tzset_unlocked_r+0x34>
 8006712:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006716:	f887 8008 	strb.w	r8, [r7, #8]
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671e:	eb04 0803 	add.w	r8, r4, r3
 8006722:	2302      	movs	r3, #2
 8006724:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006728:	2300      	movs	r3, #0
 800672a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800672e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006732:	930a      	str	r3, [sp, #40]	; 0x28
 8006734:	f898 3000 	ldrb.w	r3, [r8]
 8006738:	2b2f      	cmp	r3, #47	; 0x2f
 800673a:	d109      	bne.n	8006750 <_tzset_unlocked_r+0x208>
 800673c:	4633      	mov	r3, r6
 800673e:	4640      	mov	r0, r8
 8006740:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006744:	e9cd b600 	strd	fp, r6, [sp]
 8006748:	493f      	ldr	r1, [pc, #252]	; (8006848 <_tzset_unlocked_r+0x300>)
 800674a:	aa07      	add	r2, sp, #28
 800674c:	f000 fe00 	bl	8007350 <siscanf>
 8006750:	213c      	movs	r1, #60	; 0x3c
 8006752:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006756:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800675a:	3728      	adds	r7, #40	; 0x28
 800675c:	fb01 3302 	mla	r3, r1, r2, r3
 8006760:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006764:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006768:	fb01 3302 	mla	r3, r1, r2, r3
 800676c:	f847 3c10 	str.w	r3, [r7, #-16]
 8006770:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006772:	4444      	add	r4, r8
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	d021      	beq.n	80067be <_tzset_unlocked_r+0x276>
 800677a:	6868      	ldr	r0, [r5, #4]
 800677c:	f7ff fe28 	bl	80063d0 <__tzcalc_limits>
 8006780:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006782:	4b28      	ldr	r3, [pc, #160]	; (8006824 <_tzset_unlocked_r+0x2dc>)
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	bf18      	it	ne
 800678c:	2301      	movne	r3, #1
 800678e:	4a27      	ldr	r2, [pc, #156]	; (800682c <_tzset_unlocked_r+0x2e4>)
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e6f3      	b.n	800657c <_tzset_unlocked_r+0x34>
 8006794:	2b2b      	cmp	r3, #43	; 0x2b
 8006796:	f04f 0701 	mov.w	r7, #1
 800679a:	bf08      	it	eq
 800679c:	3401      	addeq	r4, #1
 800679e:	e770      	b.n	8006682 <_tzset_unlocked_r+0x13a>
 80067a0:	213c      	movs	r1, #60	; 0x3c
 80067a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80067a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80067aa:	fb01 3302 	mla	r3, r1, r2, r3
 80067ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80067b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80067b6:	fb01 3302 	mla	r3, r1, r2, r3
 80067ba:	437b      	muls	r3, r7
 80067bc:	e778      	b.n	80066b0 <_tzset_unlocked_r+0x168>
 80067be:	f04f 0901 	mov.w	r9, #1
 80067c2:	e77b      	b.n	80066bc <_tzset_unlocked_r+0x174>
 80067c4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80067c8:	bf0a      	itet	eq
 80067ca:	4643      	moveq	r3, r8
 80067cc:	2344      	movne	r3, #68	; 0x44
 80067ce:	3401      	addeq	r4, #1
 80067d0:	220a      	movs	r2, #10
 80067d2:	4620      	mov	r0, r4
 80067d4:	a90b      	add	r1, sp, #44	; 0x2c
 80067d6:	9305      	str	r3, [sp, #20]
 80067d8:	f000 feba 	bl	8007550 <strtoul>
 80067dc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80067e0:	9b05      	ldr	r3, [sp, #20]
 80067e2:	45a0      	cmp	r8, r4
 80067e4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80067e8:	d114      	bne.n	8006814 <_tzset_unlocked_r+0x2cc>
 80067ea:	234d      	movs	r3, #77	; 0x4d
 80067ec:	f1b9 0f00 	cmp.w	r9, #0
 80067f0:	d107      	bne.n	8006802 <_tzset_unlocked_r+0x2ba>
 80067f2:	2103      	movs	r1, #3
 80067f4:	722b      	strb	r3, [r5, #8]
 80067f6:	2302      	movs	r3, #2
 80067f8:	f8c5 9014 	str.w	r9, [r5, #20]
 80067fc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8006800:	e78f      	b.n	8006722 <_tzset_unlocked_r+0x1da>
 8006802:	220b      	movs	r2, #11
 8006804:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006808:	2301      	movs	r3, #1
 800680a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800680e:	2300      	movs	r3, #0
 8006810:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006812:	e786      	b.n	8006722 <_tzset_unlocked_r+0x1da>
 8006814:	b280      	uxth	r0, r0
 8006816:	723b      	strb	r3, [r7, #8]
 8006818:	6178      	str	r0, [r7, #20]
 800681a:	e782      	b.n	8006722 <_tzset_unlocked_r+0x1da>
 800681c:	080089b7 	.word	0x080089b7
 8006820:	20000514 	.word	0x20000514
 8006824:	2000051c 	.word	0x2000051c
 8006828:	080089ba 	.word	0x080089ba
 800682c:	20000518 	.word	0x20000518
 8006830:	20000090 	.word	0x20000090
 8006834:	20000507 	.word	0x20000507
 8006838:	080089be 	.word	0x080089be
 800683c:	080089e1 	.word	0x080089e1
 8006840:	200004fc 	.word	0x200004fc
 8006844:	080089cd 	.word	0x080089cd
 8006848:	080089e0 	.word	0x080089e0

0800684c <__assert_func>:
 800684c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800684e:	4614      	mov	r4, r2
 8006850:	461a      	mov	r2, r3
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <__assert_func+0x2c>)
 8006854:	4605      	mov	r5, r0
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68d8      	ldr	r0, [r3, #12]
 800685a:	b14c      	cbz	r4, 8006870 <__assert_func+0x24>
 800685c:	4b07      	ldr	r3, [pc, #28]	; (800687c <__assert_func+0x30>)
 800685e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006862:	9100      	str	r1, [sp, #0]
 8006864:	462b      	mov	r3, r5
 8006866:	4906      	ldr	r1, [pc, #24]	; (8006880 <__assert_func+0x34>)
 8006868:	f000 f80e 	bl	8006888 <fiprintf>
 800686c:	f000 ff4c 	bl	8007708 <abort>
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <__assert_func+0x38>)
 8006872:	461c      	mov	r4, r3
 8006874:	e7f3      	b.n	800685e <__assert_func+0x12>
 8006876:	bf00      	nop
 8006878:	2000002c 	.word	0x2000002c
 800687c:	080089f3 	.word	0x080089f3
 8006880:	08008a00 	.word	0x08008a00
 8006884:	08008a2e 	.word	0x08008a2e

08006888 <fiprintf>:
 8006888:	b40e      	push	{r1, r2, r3}
 800688a:	b503      	push	{r0, r1, lr}
 800688c:	4601      	mov	r1, r0
 800688e:	ab03      	add	r3, sp, #12
 8006890:	4805      	ldr	r0, [pc, #20]	; (80068a8 <fiprintf+0x20>)
 8006892:	f853 2b04 	ldr.w	r2, [r3], #4
 8006896:	6800      	ldr	r0, [r0, #0]
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f000 fa93 	bl	8006dc4 <_vfiprintf_r>
 800689e:	b002      	add	sp, #8
 80068a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a4:	b003      	add	sp, #12
 80068a6:	4770      	bx	lr
 80068a8:	2000002c 	.word	0x2000002c

080068ac <_findenv_r>:
 80068ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8006920 <_findenv_r+0x74>
 80068b4:	4607      	mov	r7, r0
 80068b6:	4689      	mov	r9, r1
 80068b8:	4616      	mov	r6, r2
 80068ba:	f000 ff3d 	bl	8007738 <__env_lock>
 80068be:	f8da 4000 	ldr.w	r4, [sl]
 80068c2:	b134      	cbz	r4, 80068d2 <_findenv_r+0x26>
 80068c4:	464b      	mov	r3, r9
 80068c6:	4698      	mov	r8, r3
 80068c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068cc:	b13a      	cbz	r2, 80068de <_findenv_r+0x32>
 80068ce:	2a3d      	cmp	r2, #61	; 0x3d
 80068d0:	d1f9      	bne.n	80068c6 <_findenv_r+0x1a>
 80068d2:	4638      	mov	r0, r7
 80068d4:	f000 ff36 	bl	8007744 <__env_unlock>
 80068d8:	2000      	movs	r0, #0
 80068da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068de:	eba8 0809 	sub.w	r8, r8, r9
 80068e2:	46a3      	mov	fp, r4
 80068e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d0f2      	beq.n	80068d2 <_findenv_r+0x26>
 80068ec:	4642      	mov	r2, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f000 fda5 	bl	800743e <strncmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d1f4      	bne.n	80068e2 <_findenv_r+0x36>
 80068f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80068fc:	eb03 0508 	add.w	r5, r3, r8
 8006900:	f813 3008 	ldrb.w	r3, [r3, r8]
 8006904:	2b3d      	cmp	r3, #61	; 0x3d
 8006906:	d1ec      	bne.n	80068e2 <_findenv_r+0x36>
 8006908:	f8da 3000 	ldr.w	r3, [sl]
 800690c:	4638      	mov	r0, r7
 800690e:	ebab 0303 	sub.w	r3, fp, r3
 8006912:	109b      	asrs	r3, r3, #2
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	f000 ff15 	bl	8007744 <__env_unlock>
 800691a:	1c68      	adds	r0, r5, #1
 800691c:	e7dd      	b.n	80068da <_findenv_r+0x2e>
 800691e:	bf00      	nop
 8006920:	2000001c 	.word	0x2000001c

08006924 <_getenv_r>:
 8006924:	b507      	push	{r0, r1, r2, lr}
 8006926:	aa01      	add	r2, sp, #4
 8006928:	f7ff ffc0 	bl	80068ac <_findenv_r>
 800692c:	b003      	add	sp, #12
 800692e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006934 <__gettzinfo>:
 8006934:	4800      	ldr	r0, [pc, #0]	; (8006938 <__gettzinfo+0x4>)
 8006936:	4770      	bx	lr
 8006938:	20000098 	.word	0x20000098

0800693c <gmtime_r>:
 800693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006940:	e9d0 6700 	ldrd	r6, r7, [r0]
 8006944:	460c      	mov	r4, r1
 8006946:	2300      	movs	r3, #0
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	4a4e      	ldr	r2, [pc, #312]	; (8006a88 <gmtime_r+0x14c>)
 800694e:	f7f9 fc0f 	bl	8000170 <__aeabi_ldivmod>
 8006952:	4639      	mov	r1, r7
 8006954:	4605      	mov	r5, r0
 8006956:	2300      	movs	r3, #0
 8006958:	4630      	mov	r0, r6
 800695a:	4a4b      	ldr	r2, [pc, #300]	; (8006a88 <gmtime_r+0x14c>)
 800695c:	f7f9 fc08 	bl	8000170 <__aeabi_ldivmod>
 8006960:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8006964:	2a00      	cmp	r2, #0
 8006966:	bfbc      	itt	lt
 8006968:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800696c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8006970:	fbb2 f1f0 	udiv	r1, r2, r0
 8006974:	fb00 2211 	mls	r2, r0, r1, r2
 8006978:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800697c:	60a1      	str	r1, [r4, #8]
 800697e:	fbb2 f1f0 	udiv	r1, r2, r0
 8006982:	fb00 2211 	mls	r2, r0, r1, r2
 8006986:	6061      	str	r1, [r4, #4]
 8006988:	f04f 0107 	mov.w	r1, #7
 800698c:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 8006990:	bfac      	ite	ge
 8006992:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 8006996:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800699a:	6022      	str	r2, [r4, #0]
 800699c:	1cda      	adds	r2, r3, #3
 800699e:	fb92 f1f1 	sdiv	r1, r2, r1
 80069a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80069a6:	1a52      	subs	r2, r2, r1
 80069a8:	bf48      	it	mi
 80069aa:	3207      	addmi	r2, #7
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	4d37      	ldr	r5, [pc, #220]	; (8006a8c <gmtime_r+0x150>)
 80069b0:	61a2      	str	r2, [r4, #24]
 80069b2:	bfbd      	ittte	lt
 80069b4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80069b8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80069bc:	fb92 f5f5 	sdivlt	r5, r2, r5
 80069c0:	fb93 f5f5 	sdivge	r5, r3, r5
 80069c4:	4832      	ldr	r0, [pc, #200]	; (8006a90 <gmtime_r+0x154>)
 80069c6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80069ca:	fb00 3005 	mla	r0, r0, r5, r3
 80069ce:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80069d2:	fbb0 f2f2 	udiv	r2, r0, r2
 80069d6:	fbb0 f1f3 	udiv	r1, r0, r3
 80069da:	4402      	add	r2, r0
 80069dc:	1a52      	subs	r2, r2, r1
 80069de:	492d      	ldr	r1, [pc, #180]	; (8006a94 <gmtime_r+0x158>)
 80069e0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80069e4:	fbb0 f1f1 	udiv	r1, r0, r1
 80069e8:	1a52      	subs	r2, r2, r1
 80069ea:	fbb2 f1fc 	udiv	r1, r2, ip
 80069ee:	2764      	movs	r7, #100	; 0x64
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80069f8:	2299      	movs	r2, #153	; 0x99
 80069fa:	1af3      	subs	r3, r6, r3
 80069fc:	4403      	add	r3, r0
 80069fe:	fb0c 3311 	mls	r3, ip, r1, r3
 8006a02:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8006a06:	f10e 0e02 	add.w	lr, lr, #2
 8006a0a:	fbbe f0f2 	udiv	r0, lr, r2
 8006a0e:	f04f 0805 	mov.w	r8, #5
 8006a12:	4342      	muls	r2, r0
 8006a14:	3202      	adds	r2, #2
 8006a16:	fbb2 f2f8 	udiv	r2, r2, r8
 8006a1a:	f103 0c01 	add.w	ip, r3, #1
 8006a1e:	ebac 0c02 	sub.w	ip, ip, r2
 8006a22:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8006a26:	4596      	cmp	lr, r2
 8006a28:	bf94      	ite	ls
 8006a2a:	2202      	movls	r2, #2
 8006a2c:	f06f 0209 	mvnhi.w	r2, #9
 8006a30:	4410      	add	r0, r2
 8006a32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a36:	fb02 1505 	mla	r5, r2, r5, r1
 8006a3a:	2801      	cmp	r0, #1
 8006a3c:	bf98      	it	ls
 8006a3e:	3501      	addls	r5, #1
 8006a40:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8006a44:	d30d      	bcc.n	8006a62 <gmtime_r+0x126>
 8006a46:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006a4a:	61e3      	str	r3, [r4, #28]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8006a52:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8006a56:	f8c4 c00c 	str.w	ip, [r4, #12]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	6223      	str	r3, [r4, #32]
 8006a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a62:	078a      	lsls	r2, r1, #30
 8006a64:	d102      	bne.n	8006a6c <gmtime_r+0x130>
 8006a66:	fb07 1616 	mls	r6, r7, r6, r1
 8006a6a:	b95e      	cbnz	r6, 8006a84 <gmtime_r+0x148>
 8006a6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a70:	fbb1 f6f2 	udiv	r6, r1, r2
 8006a74:	fb02 1216 	mls	r2, r2, r6, r1
 8006a78:	fab2 f282 	clz	r2, r2
 8006a7c:	0952      	lsrs	r2, r2, #5
 8006a7e:	333b      	adds	r3, #59	; 0x3b
 8006a80:	4413      	add	r3, r2
 8006a82:	e7e2      	b.n	8006a4a <gmtime_r+0x10e>
 8006a84:	2201      	movs	r2, #1
 8006a86:	e7fa      	b.n	8006a7e <gmtime_r+0x142>
 8006a88:	00015180 	.word	0x00015180
 8006a8c:	00023ab1 	.word	0x00023ab1
 8006a90:	fffdc54f 	.word	0xfffdc54f
 8006a94:	00023ab0 	.word	0x00023ab0

08006a98 <__retarget_lock_init_recursive>:
 8006a98:	4770      	bx	lr

08006a9a <__retarget_lock_acquire>:
 8006a9a:	4770      	bx	lr

08006a9c <__retarget_lock_acquire_recursive>:
 8006a9c:	4770      	bx	lr

08006a9e <__retarget_lock_release>:
 8006a9e:	4770      	bx	lr

08006aa0 <__retarget_lock_release_recursive>:
 8006aa0:	4770      	bx	lr
	...

08006aa4 <__malloc_lock>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <__malloc_lock+0x8>)
 8006aa6:	f7ff bff9 	b.w	8006a9c <__retarget_lock_acquire_recursive>
 8006aaa:	bf00      	nop
 8006aac:	20000521 	.word	0x20000521

08006ab0 <__malloc_unlock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	; (8006ab8 <__malloc_unlock+0x8>)
 8006ab2:	f7ff bff5 	b.w	8006aa0 <__retarget_lock_release_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	20000521 	.word	0x20000521

08006abc <__ssputs_r>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	688e      	ldr	r6, [r1, #8]
 8006ac2:	4682      	mov	sl, r0
 8006ac4:	429e      	cmp	r6, r3
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	4690      	mov	r8, r2
 8006aca:	461f      	mov	r7, r3
 8006acc:	d838      	bhi.n	8006b40 <__ssputs_r+0x84>
 8006ace:	898a      	ldrh	r2, [r1, #12]
 8006ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ad4:	d032      	beq.n	8006b3c <__ssputs_r+0x80>
 8006ad6:	6825      	ldr	r5, [r4, #0]
 8006ad8:	6909      	ldr	r1, [r1, #16]
 8006ada:	3301      	adds	r3, #1
 8006adc:	eba5 0901 	sub.w	r9, r5, r1
 8006ae0:	6965      	ldr	r5, [r4, #20]
 8006ae2:	444b      	add	r3, r9
 8006ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aec:	106d      	asrs	r5, r5, #1
 8006aee:	429d      	cmp	r5, r3
 8006af0:	bf38      	it	cc
 8006af2:	461d      	movcc	r5, r3
 8006af4:	0553      	lsls	r3, r2, #21
 8006af6:	d531      	bpl.n	8006b5c <__ssputs_r+0xa0>
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7ff fadf 	bl	80060bc <_malloc_r>
 8006afe:	4606      	mov	r6, r0
 8006b00:	b950      	cbnz	r0, 8006b18 <__ssputs_r+0x5c>
 8006b02:	230c      	movs	r3, #12
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	f8ca 3000 	str.w	r3, [sl]
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b12:	81a3      	strh	r3, [r4, #12]
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	464a      	mov	r2, r9
 8006b1a:	6921      	ldr	r1, [r4, #16]
 8006b1c:	f7ff fa50 	bl	8005fc0 <memcpy>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	6126      	str	r6, [r4, #16]
 8006b2e:	444e      	add	r6, r9
 8006b30:	6026      	str	r6, [r4, #0]
 8006b32:	463e      	mov	r6, r7
 8006b34:	6165      	str	r5, [r4, #20]
 8006b36:	eba5 0509 	sub.w	r5, r5, r9
 8006b3a:	60a5      	str	r5, [r4, #8]
 8006b3c:	42be      	cmp	r6, r7
 8006b3e:	d900      	bls.n	8006b42 <__ssputs_r+0x86>
 8006b40:	463e      	mov	r6, r7
 8006b42:	4632      	mov	r2, r6
 8006b44:	4641      	mov	r1, r8
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	f001 f83c 	bl	8007bc4 <memmove>
 8006b4c:	68a3      	ldr	r3, [r4, #8]
 8006b4e:	2000      	movs	r0, #0
 8006b50:	1b9b      	subs	r3, r3, r6
 8006b52:	60a3      	str	r3, [r4, #8]
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	4433      	add	r3, r6
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	e7db      	b.n	8006b14 <__ssputs_r+0x58>
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	f001 f84b 	bl	8007bf8 <_realloc_r>
 8006b62:	4606      	mov	r6, r0
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d1e1      	bne.n	8006b2c <__ssputs_r+0x70>
 8006b68:	4650      	mov	r0, sl
 8006b6a:	6921      	ldr	r1, [r4, #16]
 8006b6c:	f7ff fa3e 	bl	8005fec <_free_r>
 8006b70:	e7c7      	b.n	8006b02 <__ssputs_r+0x46>
	...

08006b74 <_svfiprintf_r>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	4698      	mov	r8, r3
 8006b7a:	898b      	ldrh	r3, [r1, #12]
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	061b      	lsls	r3, r3, #24
 8006b80:	460d      	mov	r5, r1
 8006b82:	4614      	mov	r4, r2
 8006b84:	b09d      	sub	sp, #116	; 0x74
 8006b86:	d50e      	bpl.n	8006ba6 <_svfiprintf_r+0x32>
 8006b88:	690b      	ldr	r3, [r1, #16]
 8006b8a:	b963      	cbnz	r3, 8006ba6 <_svfiprintf_r+0x32>
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	f7ff fa95 	bl	80060bc <_malloc_r>
 8006b92:	6028      	str	r0, [r5, #0]
 8006b94:	6128      	str	r0, [r5, #16]
 8006b96:	b920      	cbnz	r0, 8006ba2 <_svfiprintf_r+0x2e>
 8006b98:	230c      	movs	r3, #12
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	e0d1      	b.n	8006d46 <_svfiprintf_r+0x1d2>
 8006ba2:	2340      	movs	r3, #64	; 0x40
 8006ba4:	616b      	str	r3, [r5, #20]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8006baa:	2320      	movs	r3, #32
 8006bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bb0:	2330      	movs	r3, #48	; 0x30
 8006bb2:	f04f 0901 	mov.w	r9, #1
 8006bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d60 <_svfiprintf_r+0x1ec>
 8006bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	469a      	mov	sl, r3
 8006bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bca:	b10a      	cbz	r2, 8006bd0 <_svfiprintf_r+0x5c>
 8006bcc:	2a25      	cmp	r2, #37	; 0x25
 8006bce:	d1f9      	bne.n	8006bc4 <_svfiprintf_r+0x50>
 8006bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8006bd4:	d00b      	beq.n	8006bee <_svfiprintf_r+0x7a>
 8006bd6:	465b      	mov	r3, fp
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	4638      	mov	r0, r7
 8006bde:	f7ff ff6d 	bl	8006abc <__ssputs_r>
 8006be2:	3001      	adds	r0, #1
 8006be4:	f000 80aa 	beq.w	8006d3c <_svfiprintf_r+0x1c8>
 8006be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bea:	445a      	add	r2, fp
 8006bec:	9209      	str	r2, [sp, #36]	; 0x24
 8006bee:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80a2 	beq.w	8006d3c <_svfiprintf_r+0x1c8>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c02:	f10a 0a01 	add.w	sl, sl, #1
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	9307      	str	r3, [sp, #28]
 8006c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c10:	4654      	mov	r4, sl
 8006c12:	2205      	movs	r2, #5
 8006c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c18:	4851      	ldr	r0, [pc, #324]	; (8006d60 <_svfiprintf_r+0x1ec>)
 8006c1a:	f000 ffc5 	bl	8007ba8 <memchr>
 8006c1e:	9a04      	ldr	r2, [sp, #16]
 8006c20:	b9d8      	cbnz	r0, 8006c5a <_svfiprintf_r+0xe6>
 8006c22:	06d0      	lsls	r0, r2, #27
 8006c24:	bf44      	itt	mi
 8006c26:	2320      	movmi	r3, #32
 8006c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c2c:	0711      	lsls	r1, r2, #28
 8006c2e:	bf44      	itt	mi
 8006c30:	232b      	movmi	r3, #43	; 0x2b
 8006c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c36:	f89a 3000 	ldrb.w	r3, [sl]
 8006c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c3c:	d015      	beq.n	8006c6a <_svfiprintf_r+0xf6>
 8006c3e:	4654      	mov	r4, sl
 8006c40:	2000      	movs	r0, #0
 8006c42:	f04f 0c0a 	mov.w	ip, #10
 8006c46:	9a07      	ldr	r2, [sp, #28]
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c4e:	3b30      	subs	r3, #48	; 0x30
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	d94e      	bls.n	8006cf2 <_svfiprintf_r+0x17e>
 8006c54:	b1b0      	cbz	r0, 8006c84 <_svfiprintf_r+0x110>
 8006c56:	9207      	str	r2, [sp, #28]
 8006c58:	e014      	b.n	8006c84 <_svfiprintf_r+0x110>
 8006c5a:	eba0 0308 	sub.w	r3, r0, r8
 8006c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c62:	4313      	orrs	r3, r2
 8006c64:	46a2      	mov	sl, r4
 8006c66:	9304      	str	r3, [sp, #16]
 8006c68:	e7d2      	b.n	8006c10 <_svfiprintf_r+0x9c>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	1d19      	adds	r1, r3, #4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	9103      	str	r1, [sp, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfbb      	ittet	lt
 8006c76:	425b      	neglt	r3, r3
 8006c78:	f042 0202 	orrlt.w	r2, r2, #2
 8006c7c:	9307      	strge	r3, [sp, #28]
 8006c7e:	9307      	strlt	r3, [sp, #28]
 8006c80:	bfb8      	it	lt
 8006c82:	9204      	strlt	r2, [sp, #16]
 8006c84:	7823      	ldrb	r3, [r4, #0]
 8006c86:	2b2e      	cmp	r3, #46	; 0x2e
 8006c88:	d10c      	bne.n	8006ca4 <_svfiprintf_r+0x130>
 8006c8a:	7863      	ldrb	r3, [r4, #1]
 8006c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c8e:	d135      	bne.n	8006cfc <_svfiprintf_r+0x188>
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	3402      	adds	r4, #2
 8006c94:	1d1a      	adds	r2, r3, #4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	9203      	str	r2, [sp, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bfb8      	it	lt
 8006c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ca2:	9305      	str	r3, [sp, #20]
 8006ca4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006d64 <_svfiprintf_r+0x1f0>
 8006ca8:	2203      	movs	r2, #3
 8006caa:	4650      	mov	r0, sl
 8006cac:	7821      	ldrb	r1, [r4, #0]
 8006cae:	f000 ff7b 	bl	8007ba8 <memchr>
 8006cb2:	b140      	cbz	r0, 8006cc6 <_svfiprintf_r+0x152>
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	eba0 000a 	sub.w	r0, r0, sl
 8006cba:	fa03 f000 	lsl.w	r0, r3, r0
 8006cbe:	9b04      	ldr	r3, [sp, #16]
 8006cc0:	3401      	adds	r4, #1
 8006cc2:	4303      	orrs	r3, r0
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cca:	2206      	movs	r2, #6
 8006ccc:	4826      	ldr	r0, [pc, #152]	; (8006d68 <_svfiprintf_r+0x1f4>)
 8006cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cd2:	f000 ff69 	bl	8007ba8 <memchr>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d038      	beq.n	8006d4c <_svfiprintf_r+0x1d8>
 8006cda:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <_svfiprintf_r+0x1f8>)
 8006cdc:	bb1b      	cbnz	r3, 8006d26 <_svfiprintf_r+0x1b2>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	3307      	adds	r3, #7
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cec:	4433      	add	r3, r6
 8006cee:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf0:	e767      	b.n	8006bc2 <_svfiprintf_r+0x4e>
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cfa:	e7a5      	b.n	8006c48 <_svfiprintf_r+0xd4>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f04f 0c0a 	mov.w	ip, #10
 8006d02:	4619      	mov	r1, r3
 8006d04:	3401      	adds	r4, #1
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d0e:	3a30      	subs	r2, #48	; 0x30
 8006d10:	2a09      	cmp	r2, #9
 8006d12:	d903      	bls.n	8006d1c <_svfiprintf_r+0x1a8>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0c5      	beq.n	8006ca4 <_svfiprintf_r+0x130>
 8006d18:	9105      	str	r1, [sp, #20]
 8006d1a:	e7c3      	b.n	8006ca4 <_svfiprintf_r+0x130>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	2301      	movs	r3, #1
 8006d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d24:	e7f0      	b.n	8006d08 <_svfiprintf_r+0x194>
 8006d26:	ab03      	add	r3, sp, #12
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <_svfiprintf_r+0x1fc>)
 8006d30:	a904      	add	r1, sp, #16
 8006d32:	f3af 8000 	nop.w
 8006d36:	1c42      	adds	r2, r0, #1
 8006d38:	4606      	mov	r6, r0
 8006d3a:	d1d6      	bne.n	8006cea <_svfiprintf_r+0x176>
 8006d3c:	89ab      	ldrh	r3, [r5, #12]
 8006d3e:	065b      	lsls	r3, r3, #25
 8006d40:	f53f af2c 	bmi.w	8006b9c <_svfiprintf_r+0x28>
 8006d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d46:	b01d      	add	sp, #116	; 0x74
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	ab03      	add	r3, sp, #12
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4638      	mov	r0, r7
 8006d54:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <_svfiprintf_r+0x1fc>)
 8006d56:	a904      	add	r1, sp, #16
 8006d58:	f000 f9d4 	bl	8007104 <_printf_i>
 8006d5c:	e7eb      	b.n	8006d36 <_svfiprintf_r+0x1c2>
 8006d5e:	bf00      	nop
 8006d60:	08008b30 	.word	0x08008b30
 8006d64:	08008b36 	.word	0x08008b36
 8006d68:	08008b3a 	.word	0x08008b3a
 8006d6c:	00000000 	.word	0x00000000
 8006d70:	08006abd 	.word	0x08006abd

08006d74 <__sfputc_r>:
 8006d74:	6893      	ldr	r3, [r2, #8]
 8006d76:	b410      	push	{r4}
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	6093      	str	r3, [r2, #8]
 8006d7e:	da07      	bge.n	8006d90 <__sfputc_r+0x1c>
 8006d80:	6994      	ldr	r4, [r2, #24]
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	db01      	blt.n	8006d8a <__sfputc_r+0x16>
 8006d86:	290a      	cmp	r1, #10
 8006d88:	d102      	bne.n	8006d90 <__sfputc_r+0x1c>
 8006d8a:	bc10      	pop	{r4}
 8006d8c:	f000 bbea 	b.w	8007564 <__swbuf_r>
 8006d90:	6813      	ldr	r3, [r2, #0]
 8006d92:	1c58      	adds	r0, r3, #1
 8006d94:	6010      	str	r0, [r2, #0]
 8006d96:	7019      	strb	r1, [r3, #0]
 8006d98:	4608      	mov	r0, r1
 8006d9a:	bc10      	pop	{r4}
 8006d9c:	4770      	bx	lr

08006d9e <__sfputs_r>:
 8006d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da0:	4606      	mov	r6, r0
 8006da2:	460f      	mov	r7, r1
 8006da4:	4614      	mov	r4, r2
 8006da6:	18d5      	adds	r5, r2, r3
 8006da8:	42ac      	cmp	r4, r5
 8006daa:	d101      	bne.n	8006db0 <__sfputs_r+0x12>
 8006dac:	2000      	movs	r0, #0
 8006dae:	e007      	b.n	8006dc0 <__sfputs_r+0x22>
 8006db0:	463a      	mov	r2, r7
 8006db2:	4630      	mov	r0, r6
 8006db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db8:	f7ff ffdc 	bl	8006d74 <__sfputc_r>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d1f3      	bne.n	8006da8 <__sfputs_r+0xa>
 8006dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dc4 <_vfiprintf_r>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	460d      	mov	r5, r1
 8006dca:	4614      	mov	r4, r2
 8006dcc:	4698      	mov	r8, r3
 8006dce:	4606      	mov	r6, r0
 8006dd0:	b09d      	sub	sp, #116	; 0x74
 8006dd2:	b118      	cbz	r0, 8006ddc <_vfiprintf_r+0x18>
 8006dd4:	6983      	ldr	r3, [r0, #24]
 8006dd6:	b90b      	cbnz	r3, 8006ddc <_vfiprintf_r+0x18>
 8006dd8:	f000 fdd0 	bl	800797c <__sinit>
 8006ddc:	4b89      	ldr	r3, [pc, #548]	; (8007004 <_vfiprintf_r+0x240>)
 8006dde:	429d      	cmp	r5, r3
 8006de0:	d11b      	bne.n	8006e1a <_vfiprintf_r+0x56>
 8006de2:	6875      	ldr	r5, [r6, #4]
 8006de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006de6:	07d9      	lsls	r1, r3, #31
 8006de8:	d405      	bmi.n	8006df6 <_vfiprintf_r+0x32>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	059a      	lsls	r2, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <_vfiprintf_r+0x32>
 8006df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df2:	f7ff fe53 	bl	8006a9c <__retarget_lock_acquire_recursive>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	071b      	lsls	r3, r3, #28
 8006dfa:	d501      	bpl.n	8006e00 <_vfiprintf_r+0x3c>
 8006dfc:	692b      	ldr	r3, [r5, #16]
 8006dfe:	b9eb      	cbnz	r3, 8006e3c <_vfiprintf_r+0x78>
 8006e00:	4629      	mov	r1, r5
 8006e02:	4630      	mov	r0, r6
 8006e04:	f000 fc12 	bl	800762c <__swsetup_r>
 8006e08:	b1c0      	cbz	r0, 8006e3c <_vfiprintf_r+0x78>
 8006e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e0c:	07dc      	lsls	r4, r3, #31
 8006e0e:	d50e      	bpl.n	8006e2e <_vfiprintf_r+0x6a>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	b01d      	add	sp, #116	; 0x74
 8006e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1a:	4b7b      	ldr	r3, [pc, #492]	; (8007008 <_vfiprintf_r+0x244>)
 8006e1c:	429d      	cmp	r5, r3
 8006e1e:	d101      	bne.n	8006e24 <_vfiprintf_r+0x60>
 8006e20:	68b5      	ldr	r5, [r6, #8]
 8006e22:	e7df      	b.n	8006de4 <_vfiprintf_r+0x20>
 8006e24:	4b79      	ldr	r3, [pc, #484]	; (800700c <_vfiprintf_r+0x248>)
 8006e26:	429d      	cmp	r5, r3
 8006e28:	bf08      	it	eq
 8006e2a:	68f5      	ldreq	r5, [r6, #12]
 8006e2c:	e7da      	b.n	8006de4 <_vfiprintf_r+0x20>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	0598      	lsls	r0, r3, #22
 8006e32:	d4ed      	bmi.n	8006e10 <_vfiprintf_r+0x4c>
 8006e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e36:	f7ff fe33 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006e3a:	e7e9      	b.n	8006e10 <_vfiprintf_r+0x4c>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e40:	2320      	movs	r3, #32
 8006e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e46:	2330      	movs	r3, #48	; 0x30
 8006e48:	f04f 0901 	mov.w	r9, #1
 8006e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007010 <_vfiprintf_r+0x24c>
 8006e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e58:	4623      	mov	r3, r4
 8006e5a:	469a      	mov	sl, r3
 8006e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e60:	b10a      	cbz	r2, 8006e66 <_vfiprintf_r+0xa2>
 8006e62:	2a25      	cmp	r2, #37	; 0x25
 8006e64:	d1f9      	bne.n	8006e5a <_vfiprintf_r+0x96>
 8006e66:	ebba 0b04 	subs.w	fp, sl, r4
 8006e6a:	d00b      	beq.n	8006e84 <_vfiprintf_r+0xc0>
 8006e6c:	465b      	mov	r3, fp
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ff93 	bl	8006d9e <__sfputs_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f000 80aa 	beq.w	8006fd2 <_vfiprintf_r+0x20e>
 8006e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e80:	445a      	add	r2, fp
 8006e82:	9209      	str	r2, [sp, #36]	; 0x24
 8006e84:	f89a 3000 	ldrb.w	r3, [sl]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80a2 	beq.w	8006fd2 <_vfiprintf_r+0x20e>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e98:	f10a 0a01 	add.w	sl, sl, #1
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ea6:	4654      	mov	r4, sl
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eae:	4858      	ldr	r0, [pc, #352]	; (8007010 <_vfiprintf_r+0x24c>)
 8006eb0:	f000 fe7a 	bl	8007ba8 <memchr>
 8006eb4:	9a04      	ldr	r2, [sp, #16]
 8006eb6:	b9d8      	cbnz	r0, 8006ef0 <_vfiprintf_r+0x12c>
 8006eb8:	06d1      	lsls	r1, r2, #27
 8006eba:	bf44      	itt	mi
 8006ebc:	2320      	movmi	r3, #32
 8006ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ec2:	0713      	lsls	r3, r2, #28
 8006ec4:	bf44      	itt	mi
 8006ec6:	232b      	movmi	r3, #43	; 0x2b
 8006ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed2:	d015      	beq.n	8006f00 <_vfiprintf_r+0x13c>
 8006ed4:	4654      	mov	r4, sl
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	f04f 0c0a 	mov.w	ip, #10
 8006edc:	9a07      	ldr	r2, [sp, #28]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee4:	3b30      	subs	r3, #48	; 0x30
 8006ee6:	2b09      	cmp	r3, #9
 8006ee8:	d94e      	bls.n	8006f88 <_vfiprintf_r+0x1c4>
 8006eea:	b1b0      	cbz	r0, 8006f1a <_vfiprintf_r+0x156>
 8006eec:	9207      	str	r2, [sp, #28]
 8006eee:	e014      	b.n	8006f1a <_vfiprintf_r+0x156>
 8006ef0:	eba0 0308 	sub.w	r3, r0, r8
 8006ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	46a2      	mov	sl, r4
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	e7d2      	b.n	8006ea6 <_vfiprintf_r+0xe2>
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	1d19      	adds	r1, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9103      	str	r1, [sp, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bfbb      	ittet	lt
 8006f0c:	425b      	neglt	r3, r3
 8006f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f12:	9307      	strge	r3, [sp, #28]
 8006f14:	9307      	strlt	r3, [sp, #28]
 8006f16:	bfb8      	it	lt
 8006f18:	9204      	strlt	r2, [sp, #16]
 8006f1a:	7823      	ldrb	r3, [r4, #0]
 8006f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f1e:	d10c      	bne.n	8006f3a <_vfiprintf_r+0x176>
 8006f20:	7863      	ldrb	r3, [r4, #1]
 8006f22:	2b2a      	cmp	r3, #42	; 0x2a
 8006f24:	d135      	bne.n	8006f92 <_vfiprintf_r+0x1ce>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	3402      	adds	r4, #2
 8006f2a:	1d1a      	adds	r2, r3, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	9203      	str	r2, [sp, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfb8      	it	lt
 8006f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007014 <_vfiprintf_r+0x250>
 8006f3e:	2203      	movs	r2, #3
 8006f40:	4650      	mov	r0, sl
 8006f42:	7821      	ldrb	r1, [r4, #0]
 8006f44:	f000 fe30 	bl	8007ba8 <memchr>
 8006f48:	b140      	cbz	r0, 8006f5c <_vfiprintf_r+0x198>
 8006f4a:	2340      	movs	r3, #64	; 0x40
 8006f4c:	eba0 000a 	sub.w	r0, r0, sl
 8006f50:	fa03 f000 	lsl.w	r0, r3, r0
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	3401      	adds	r4, #1
 8006f58:	4303      	orrs	r3, r0
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f60:	2206      	movs	r2, #6
 8006f62:	482d      	ldr	r0, [pc, #180]	; (8007018 <_vfiprintf_r+0x254>)
 8006f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f68:	f000 fe1e 	bl	8007ba8 <memchr>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d03f      	beq.n	8006ff0 <_vfiprintf_r+0x22c>
 8006f70:	4b2a      	ldr	r3, [pc, #168]	; (800701c <_vfiprintf_r+0x258>)
 8006f72:	bb1b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x1f8>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	3307      	adds	r3, #7
 8006f78:	f023 0307 	bic.w	r3, r3, #7
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f82:	443b      	add	r3, r7
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	e767      	b.n	8006e58 <_vfiprintf_r+0x94>
 8006f88:	460c      	mov	r4, r1
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f90:	e7a5      	b.n	8006ede <_vfiprintf_r+0x11a>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f04f 0c0a 	mov.w	ip, #10
 8006f98:	4619      	mov	r1, r3
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa4:	3a30      	subs	r2, #48	; 0x30
 8006fa6:	2a09      	cmp	r2, #9
 8006fa8:	d903      	bls.n	8006fb2 <_vfiprintf_r+0x1ee>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0c5      	beq.n	8006f3a <_vfiprintf_r+0x176>
 8006fae:	9105      	str	r1, [sp, #20]
 8006fb0:	e7c3      	b.n	8006f3a <_vfiprintf_r+0x176>
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fba:	e7f0      	b.n	8006f9e <_vfiprintf_r+0x1da>
 8006fbc:	ab03      	add	r3, sp, #12
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4b16      	ldr	r3, [pc, #88]	; (8007020 <_vfiprintf_r+0x25c>)
 8006fc6:	a904      	add	r1, sp, #16
 8006fc8:	f3af 8000 	nop.w
 8006fcc:	4607      	mov	r7, r0
 8006fce:	1c78      	adds	r0, r7, #1
 8006fd0:	d1d6      	bne.n	8006f80 <_vfiprintf_r+0x1bc>
 8006fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	d405      	bmi.n	8006fe4 <_vfiprintf_r+0x220>
 8006fd8:	89ab      	ldrh	r3, [r5, #12]
 8006fda:	059a      	lsls	r2, r3, #22
 8006fdc:	d402      	bmi.n	8006fe4 <_vfiprintf_r+0x220>
 8006fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe0:	f7ff fd5e 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006fe4:	89ab      	ldrh	r3, [r5, #12]
 8006fe6:	065b      	lsls	r3, r3, #25
 8006fe8:	f53f af12 	bmi.w	8006e10 <_vfiprintf_r+0x4c>
 8006fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fee:	e711      	b.n	8006e14 <_vfiprintf_r+0x50>
 8006ff0:	ab03      	add	r3, sp, #12
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <_vfiprintf_r+0x25c>)
 8006ffa:	a904      	add	r1, sp, #16
 8006ffc:	f000 f882 	bl	8007104 <_printf_i>
 8007000:	e7e4      	b.n	8006fcc <_vfiprintf_r+0x208>
 8007002:	bf00      	nop
 8007004:	08008b84 	.word	0x08008b84
 8007008:	08008ba4 	.word	0x08008ba4
 800700c:	08008b64 	.word	0x08008b64
 8007010:	08008b30 	.word	0x08008b30
 8007014:	08008b36 	.word	0x08008b36
 8007018:	08008b3a 	.word	0x08008b3a
 800701c:	00000000 	.word	0x00000000
 8007020:	08006d9f 	.word	0x08006d9f

08007024 <_printf_common>:
 8007024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007028:	4616      	mov	r6, r2
 800702a:	4699      	mov	r9, r3
 800702c:	688a      	ldr	r2, [r1, #8]
 800702e:	690b      	ldr	r3, [r1, #16]
 8007030:	4607      	mov	r7, r0
 8007032:	4293      	cmp	r3, r2
 8007034:	bfb8      	it	lt
 8007036:	4613      	movlt	r3, r2
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800703e:	460c      	mov	r4, r1
 8007040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007044:	b10a      	cbz	r2, 800704a <_printf_common+0x26>
 8007046:	3301      	adds	r3, #1
 8007048:	6033      	str	r3, [r6, #0]
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	0699      	lsls	r1, r3, #26
 800704e:	bf42      	ittt	mi
 8007050:	6833      	ldrmi	r3, [r6, #0]
 8007052:	3302      	addmi	r3, #2
 8007054:	6033      	strmi	r3, [r6, #0]
 8007056:	6825      	ldr	r5, [r4, #0]
 8007058:	f015 0506 	ands.w	r5, r5, #6
 800705c:	d106      	bne.n	800706c <_printf_common+0x48>
 800705e:	f104 0a19 	add.w	sl, r4, #25
 8007062:	68e3      	ldr	r3, [r4, #12]
 8007064:	6832      	ldr	r2, [r6, #0]
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	42ab      	cmp	r3, r5
 800706a:	dc28      	bgt.n	80070be <_printf_common+0x9a>
 800706c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007070:	1e13      	subs	r3, r2, #0
 8007072:	6822      	ldr	r2, [r4, #0]
 8007074:	bf18      	it	ne
 8007076:	2301      	movne	r3, #1
 8007078:	0692      	lsls	r2, r2, #26
 800707a:	d42d      	bmi.n	80070d8 <_printf_common+0xb4>
 800707c:	4649      	mov	r1, r9
 800707e:	4638      	mov	r0, r7
 8007080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007084:	47c0      	blx	r8
 8007086:	3001      	adds	r0, #1
 8007088:	d020      	beq.n	80070cc <_printf_common+0xa8>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	68e5      	ldr	r5, [r4, #12]
 800708e:	f003 0306 	and.w	r3, r3, #6
 8007092:	2b04      	cmp	r3, #4
 8007094:	bf18      	it	ne
 8007096:	2500      	movne	r5, #0
 8007098:	6832      	ldr	r2, [r6, #0]
 800709a:	f04f 0600 	mov.w	r6, #0
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	bf08      	it	eq
 80070a2:	1aad      	subeq	r5, r5, r2
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	bf08      	it	eq
 80070a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bfc4      	itt	gt
 80070b0:	1a9b      	subgt	r3, r3, r2
 80070b2:	18ed      	addgt	r5, r5, r3
 80070b4:	341a      	adds	r4, #26
 80070b6:	42b5      	cmp	r5, r6
 80070b8:	d11a      	bne.n	80070f0 <_printf_common+0xcc>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e008      	b.n	80070d0 <_printf_common+0xac>
 80070be:	2301      	movs	r3, #1
 80070c0:	4652      	mov	r2, sl
 80070c2:	4649      	mov	r1, r9
 80070c4:	4638      	mov	r0, r7
 80070c6:	47c0      	blx	r8
 80070c8:	3001      	adds	r0, #1
 80070ca:	d103      	bne.n	80070d4 <_printf_common+0xb0>
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d4:	3501      	adds	r5, #1
 80070d6:	e7c4      	b.n	8007062 <_printf_common+0x3e>
 80070d8:	2030      	movs	r0, #48	; 0x30
 80070da:	18e1      	adds	r1, r4, r3
 80070dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070e6:	4422      	add	r2, r4
 80070e8:	3302      	adds	r3, #2
 80070ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070ee:	e7c5      	b.n	800707c <_printf_common+0x58>
 80070f0:	2301      	movs	r3, #1
 80070f2:	4622      	mov	r2, r4
 80070f4:	4649      	mov	r1, r9
 80070f6:	4638      	mov	r0, r7
 80070f8:	47c0      	blx	r8
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0e6      	beq.n	80070cc <_printf_common+0xa8>
 80070fe:	3601      	adds	r6, #1
 8007100:	e7d9      	b.n	80070b6 <_printf_common+0x92>
	...

08007104 <_printf_i>:
 8007104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007108:	7e0f      	ldrb	r7, [r1, #24]
 800710a:	4691      	mov	r9, r2
 800710c:	2f78      	cmp	r7, #120	; 0x78
 800710e:	4680      	mov	r8, r0
 8007110:	460c      	mov	r4, r1
 8007112:	469a      	mov	sl, r3
 8007114:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800711a:	d807      	bhi.n	800712c <_printf_i+0x28>
 800711c:	2f62      	cmp	r7, #98	; 0x62
 800711e:	d80a      	bhi.n	8007136 <_printf_i+0x32>
 8007120:	2f00      	cmp	r7, #0
 8007122:	f000 80d9 	beq.w	80072d8 <_printf_i+0x1d4>
 8007126:	2f58      	cmp	r7, #88	; 0x58
 8007128:	f000 80a4 	beq.w	8007274 <_printf_i+0x170>
 800712c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007134:	e03a      	b.n	80071ac <_printf_i+0xa8>
 8007136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800713a:	2b15      	cmp	r3, #21
 800713c:	d8f6      	bhi.n	800712c <_printf_i+0x28>
 800713e:	a101      	add	r1, pc, #4	; (adr r1, 8007144 <_printf_i+0x40>)
 8007140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007144:	0800719d 	.word	0x0800719d
 8007148:	080071b1 	.word	0x080071b1
 800714c:	0800712d 	.word	0x0800712d
 8007150:	0800712d 	.word	0x0800712d
 8007154:	0800712d 	.word	0x0800712d
 8007158:	0800712d 	.word	0x0800712d
 800715c:	080071b1 	.word	0x080071b1
 8007160:	0800712d 	.word	0x0800712d
 8007164:	0800712d 	.word	0x0800712d
 8007168:	0800712d 	.word	0x0800712d
 800716c:	0800712d 	.word	0x0800712d
 8007170:	080072bf 	.word	0x080072bf
 8007174:	080071e1 	.word	0x080071e1
 8007178:	080072a1 	.word	0x080072a1
 800717c:	0800712d 	.word	0x0800712d
 8007180:	0800712d 	.word	0x0800712d
 8007184:	080072e1 	.word	0x080072e1
 8007188:	0800712d 	.word	0x0800712d
 800718c:	080071e1 	.word	0x080071e1
 8007190:	0800712d 	.word	0x0800712d
 8007194:	0800712d 	.word	0x0800712d
 8007198:	080072a9 	.word	0x080072a9
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	1d1a      	adds	r2, r3, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	602a      	str	r2, [r5, #0]
 80071a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0a4      	b.n	80072fa <_printf_i+0x1f6>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	6829      	ldr	r1, [r5, #0]
 80071b4:	0606      	lsls	r6, r0, #24
 80071b6:	f101 0304 	add.w	r3, r1, #4
 80071ba:	d50a      	bpl.n	80071d2 <_printf_i+0xce>
 80071bc:	680e      	ldr	r6, [r1, #0]
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	2e00      	cmp	r6, #0
 80071c2:	da03      	bge.n	80071cc <_printf_i+0xc8>
 80071c4:	232d      	movs	r3, #45	; 0x2d
 80071c6:	4276      	negs	r6, r6
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071cc:	230a      	movs	r3, #10
 80071ce:	485e      	ldr	r0, [pc, #376]	; (8007348 <_printf_i+0x244>)
 80071d0:	e019      	b.n	8007206 <_printf_i+0x102>
 80071d2:	680e      	ldr	r6, [r1, #0]
 80071d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	bf18      	it	ne
 80071dc:	b236      	sxthne	r6, r6
 80071de:	e7ef      	b.n	80071c0 <_printf_i+0xbc>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1d19      	adds	r1, r3, #4
 80071e6:	6029      	str	r1, [r5, #0]
 80071e8:	0601      	lsls	r1, r0, #24
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0xec>
 80071ec:	681e      	ldr	r6, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0xf2>
 80071f0:	0646      	lsls	r6, r0, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0xe8>
 80071f4:	881e      	ldrh	r6, [r3, #0]
 80071f6:	2f6f      	cmp	r7, #111	; 0x6f
 80071f8:	bf0c      	ite	eq
 80071fa:	2308      	moveq	r3, #8
 80071fc:	230a      	movne	r3, #10
 80071fe:	4852      	ldr	r0, [pc, #328]	; (8007348 <_printf_i+0x244>)
 8007200:	2100      	movs	r1, #0
 8007202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007206:	6865      	ldr	r5, [r4, #4]
 8007208:	2d00      	cmp	r5, #0
 800720a:	bfa8      	it	ge
 800720c:	6821      	ldrge	r1, [r4, #0]
 800720e:	60a5      	str	r5, [r4, #8]
 8007210:	bfa4      	itt	ge
 8007212:	f021 0104 	bicge.w	r1, r1, #4
 8007216:	6021      	strge	r1, [r4, #0]
 8007218:	b90e      	cbnz	r6, 800721e <_printf_i+0x11a>
 800721a:	2d00      	cmp	r5, #0
 800721c:	d04d      	beq.n	80072ba <_printf_i+0x1b6>
 800721e:	4615      	mov	r5, r2
 8007220:	fbb6 f1f3 	udiv	r1, r6, r3
 8007224:	fb03 6711 	mls	r7, r3, r1, r6
 8007228:	5dc7      	ldrb	r7, [r0, r7]
 800722a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800722e:	4637      	mov	r7, r6
 8007230:	42bb      	cmp	r3, r7
 8007232:	460e      	mov	r6, r1
 8007234:	d9f4      	bls.n	8007220 <_printf_i+0x11c>
 8007236:	2b08      	cmp	r3, #8
 8007238:	d10b      	bne.n	8007252 <_printf_i+0x14e>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	07de      	lsls	r6, r3, #31
 800723e:	d508      	bpl.n	8007252 <_printf_i+0x14e>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	6861      	ldr	r1, [r4, #4]
 8007244:	4299      	cmp	r1, r3
 8007246:	bfde      	ittt	le
 8007248:	2330      	movle	r3, #48	; 0x30
 800724a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800724e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007252:	1b52      	subs	r2, r2, r5
 8007254:	6122      	str	r2, [r4, #16]
 8007256:	464b      	mov	r3, r9
 8007258:	4621      	mov	r1, r4
 800725a:	4640      	mov	r0, r8
 800725c:	f8cd a000 	str.w	sl, [sp]
 8007260:	aa03      	add	r2, sp, #12
 8007262:	f7ff fedf 	bl	8007024 <_printf_common>
 8007266:	3001      	adds	r0, #1
 8007268:	d14c      	bne.n	8007304 <_printf_i+0x200>
 800726a:	f04f 30ff 	mov.w	r0, #4294967295
 800726e:	b004      	add	sp, #16
 8007270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007274:	4834      	ldr	r0, [pc, #208]	; (8007348 <_printf_i+0x244>)
 8007276:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800727a:	6829      	ldr	r1, [r5, #0]
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007282:	6029      	str	r1, [r5, #0]
 8007284:	061d      	lsls	r5, r3, #24
 8007286:	d514      	bpl.n	80072b2 <_printf_i+0x1ae>
 8007288:	07df      	lsls	r7, r3, #31
 800728a:	bf44      	itt	mi
 800728c:	f043 0320 	orrmi.w	r3, r3, #32
 8007290:	6023      	strmi	r3, [r4, #0]
 8007292:	b91e      	cbnz	r6, 800729c <_printf_i+0x198>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	f023 0320 	bic.w	r3, r3, #32
 800729a:	6023      	str	r3, [r4, #0]
 800729c:	2310      	movs	r3, #16
 800729e:	e7af      	b.n	8007200 <_printf_i+0xfc>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	f043 0320 	orr.w	r3, r3, #32
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	2378      	movs	r3, #120	; 0x78
 80072aa:	4828      	ldr	r0, [pc, #160]	; (800734c <_printf_i+0x248>)
 80072ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072b0:	e7e3      	b.n	800727a <_printf_i+0x176>
 80072b2:	0659      	lsls	r1, r3, #25
 80072b4:	bf48      	it	mi
 80072b6:	b2b6      	uxthmi	r6, r6
 80072b8:	e7e6      	b.n	8007288 <_printf_i+0x184>
 80072ba:	4615      	mov	r5, r2
 80072bc:	e7bb      	b.n	8007236 <_printf_i+0x132>
 80072be:	682b      	ldr	r3, [r5, #0]
 80072c0:	6826      	ldr	r6, [r4, #0]
 80072c2:	1d18      	adds	r0, r3, #4
 80072c4:	6961      	ldr	r1, [r4, #20]
 80072c6:	6028      	str	r0, [r5, #0]
 80072c8:	0635      	lsls	r5, r6, #24
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	d501      	bpl.n	80072d2 <_printf_i+0x1ce>
 80072ce:	6019      	str	r1, [r3, #0]
 80072d0:	e002      	b.n	80072d8 <_printf_i+0x1d4>
 80072d2:	0670      	lsls	r0, r6, #25
 80072d4:	d5fb      	bpl.n	80072ce <_printf_i+0x1ca>
 80072d6:	8019      	strh	r1, [r3, #0]
 80072d8:	2300      	movs	r3, #0
 80072da:	4615      	mov	r5, r2
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	e7ba      	b.n	8007256 <_printf_i+0x152>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	2100      	movs	r1, #0
 80072e4:	1d1a      	adds	r2, r3, #4
 80072e6:	602a      	str	r2, [r5, #0]
 80072e8:	681d      	ldr	r5, [r3, #0]
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	4628      	mov	r0, r5
 80072ee:	f000 fc5b 	bl	8007ba8 <memchr>
 80072f2:	b108      	cbz	r0, 80072f8 <_printf_i+0x1f4>
 80072f4:	1b40      	subs	r0, r0, r5
 80072f6:	6060      	str	r0, [r4, #4]
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	6123      	str	r3, [r4, #16]
 80072fc:	2300      	movs	r3, #0
 80072fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007302:	e7a8      	b.n	8007256 <_printf_i+0x152>
 8007304:	462a      	mov	r2, r5
 8007306:	4649      	mov	r1, r9
 8007308:	4640      	mov	r0, r8
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	47d0      	blx	sl
 800730e:	3001      	adds	r0, #1
 8007310:	d0ab      	beq.n	800726a <_printf_i+0x166>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	079b      	lsls	r3, r3, #30
 8007316:	d413      	bmi.n	8007340 <_printf_i+0x23c>
 8007318:	68e0      	ldr	r0, [r4, #12]
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	4298      	cmp	r0, r3
 800731e:	bfb8      	it	lt
 8007320:	4618      	movlt	r0, r3
 8007322:	e7a4      	b.n	800726e <_printf_i+0x16a>
 8007324:	2301      	movs	r3, #1
 8007326:	4632      	mov	r2, r6
 8007328:	4649      	mov	r1, r9
 800732a:	4640      	mov	r0, r8
 800732c:	47d0      	blx	sl
 800732e:	3001      	adds	r0, #1
 8007330:	d09b      	beq.n	800726a <_printf_i+0x166>
 8007332:	3501      	adds	r5, #1
 8007334:	68e3      	ldr	r3, [r4, #12]
 8007336:	9903      	ldr	r1, [sp, #12]
 8007338:	1a5b      	subs	r3, r3, r1
 800733a:	42ab      	cmp	r3, r5
 800733c:	dcf2      	bgt.n	8007324 <_printf_i+0x220>
 800733e:	e7eb      	b.n	8007318 <_printf_i+0x214>
 8007340:	2500      	movs	r5, #0
 8007342:	f104 0619 	add.w	r6, r4, #25
 8007346:	e7f5      	b.n	8007334 <_printf_i+0x230>
 8007348:	08008b41 	.word	0x08008b41
 800734c:	08008b52 	.word	0x08008b52

08007350 <siscanf>:
 8007350:	b40e      	push	{r1, r2, r3}
 8007352:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007356:	b530      	push	{r4, r5, lr}
 8007358:	b09c      	sub	sp, #112	; 0x70
 800735a:	ac1f      	add	r4, sp, #124	; 0x7c
 800735c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007360:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	9006      	str	r0, [sp, #24]
 8007368:	f7f8 fefa 	bl	8000160 <strlen>
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <siscanf+0x4c>)
 800736e:	9003      	str	r0, [sp, #12]
 8007370:	930b      	str	r3, [sp, #44]	; 0x2c
 8007372:	2300      	movs	r3, #0
 8007374:	930f      	str	r3, [sp, #60]	; 0x3c
 8007376:	9314      	str	r3, [sp, #80]	; 0x50
 8007378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800737c:	9007      	str	r0, [sp, #28]
 800737e:	4808      	ldr	r0, [pc, #32]	; (80073a0 <siscanf+0x50>)
 8007380:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007384:	462a      	mov	r2, r5
 8007386:	4623      	mov	r3, r4
 8007388:	a902      	add	r1, sp, #8
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9401      	str	r4, [sp, #4]
 800738e:	f000 fcbd 	bl	8007d0c <__ssvfiscanf_r>
 8007392:	b01c      	add	sp, #112	; 0x70
 8007394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	2000002c 	.word	0x2000002c

080073a4 <__sread>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	f000 ff7a 	bl	80082a4 <_read_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	bfab      	itete	ge
 80073b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073b6:	89a3      	ldrhlt	r3, [r4, #12]
 80073b8:	181b      	addge	r3, r3, r0
 80073ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073be:	bfac      	ite	ge
 80073c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073c2:	81a3      	strhlt	r3, [r4, #12]
 80073c4:	bd10      	pop	{r4, pc}

080073c6 <__seofread>:
 80073c6:	2000      	movs	r0, #0
 80073c8:	4770      	bx	lr

080073ca <__swrite>:
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	461f      	mov	r7, r3
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	4605      	mov	r5, r0
 80073d4:	05db      	lsls	r3, r3, #23
 80073d6:	460c      	mov	r4, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d505      	bpl.n	80073e8 <__swrite+0x1e>
 80073dc:	2302      	movs	r3, #2
 80073de:	2200      	movs	r2, #0
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	f000 fb68 	bl	8007ab8 <_lseek_r>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	4632      	mov	r2, r6
 80073ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	4628      	mov	r0, r5
 80073f4:	463b      	mov	r3, r7
 80073f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f000 b903 	b.w	8007608 <_write_r>

08007402 <__sseek>:
 8007402:	b510      	push	{r4, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 fb55 	bl	8007ab8 <_lseek_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	bf15      	itete	ne
 8007414:	6560      	strne	r0, [r4, #84]	; 0x54
 8007416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800741e:	81a3      	strheq	r3, [r4, #12]
 8007420:	bf18      	it	ne
 8007422:	81a3      	strhne	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__sclose>:
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 b975 	b.w	8007718 <_close_r>

0800742e <strcpy>:
 800742e:	4603      	mov	r3, r0
 8007430:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007434:	f803 2b01 	strb.w	r2, [r3], #1
 8007438:	2a00      	cmp	r2, #0
 800743a:	d1f9      	bne.n	8007430 <strcpy+0x2>
 800743c:	4770      	bx	lr

0800743e <strncmp>:
 800743e:	4603      	mov	r3, r0
 8007440:	b510      	push	{r4, lr}
 8007442:	b172      	cbz	r2, 8007462 <strncmp+0x24>
 8007444:	3901      	subs	r1, #1
 8007446:	1884      	adds	r4, r0, r2
 8007448:	f813 0b01 	ldrb.w	r0, [r3], #1
 800744c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007450:	4290      	cmp	r0, r2
 8007452:	d101      	bne.n	8007458 <strncmp+0x1a>
 8007454:	42a3      	cmp	r3, r4
 8007456:	d101      	bne.n	800745c <strncmp+0x1e>
 8007458:	1a80      	subs	r0, r0, r2
 800745a:	bd10      	pop	{r4, pc}
 800745c:	2800      	cmp	r0, #0
 800745e:	d1f3      	bne.n	8007448 <strncmp+0xa>
 8007460:	e7fa      	b.n	8007458 <strncmp+0x1a>
 8007462:	4610      	mov	r0, r2
 8007464:	e7f9      	b.n	800745a <strncmp+0x1c>
	...

08007468 <_strtoul_l.constprop.0>:
 8007468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800746c:	4686      	mov	lr, r0
 800746e:	460d      	mov	r5, r1
 8007470:	4f35      	ldr	r7, [pc, #212]	; (8007548 <_strtoul_l.constprop.0+0xe0>)
 8007472:	4628      	mov	r0, r5
 8007474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007478:	5de6      	ldrb	r6, [r4, r7]
 800747a:	f016 0608 	ands.w	r6, r6, #8
 800747e:	d1f8      	bne.n	8007472 <_strtoul_l.constprop.0+0xa>
 8007480:	2c2d      	cmp	r4, #45	; 0x2d
 8007482:	d12f      	bne.n	80074e4 <_strtoul_l.constprop.0+0x7c>
 8007484:	2601      	movs	r6, #1
 8007486:	782c      	ldrb	r4, [r5, #0]
 8007488:	1c85      	adds	r5, r0, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d057      	beq.n	800753e <_strtoul_l.constprop.0+0xd6>
 800748e:	2b10      	cmp	r3, #16
 8007490:	d109      	bne.n	80074a6 <_strtoul_l.constprop.0+0x3e>
 8007492:	2c30      	cmp	r4, #48	; 0x30
 8007494:	d107      	bne.n	80074a6 <_strtoul_l.constprop.0+0x3e>
 8007496:	7828      	ldrb	r0, [r5, #0]
 8007498:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800749c:	2858      	cmp	r0, #88	; 0x58
 800749e:	d149      	bne.n	8007534 <_strtoul_l.constprop.0+0xcc>
 80074a0:	2310      	movs	r3, #16
 80074a2:	786c      	ldrb	r4, [r5, #1]
 80074a4:	3502      	adds	r5, #2
 80074a6:	f04f 38ff 	mov.w	r8, #4294967295
 80074aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80074ae:	2700      	movs	r7, #0
 80074b0:	fb03 f908 	mul.w	r9, r3, r8
 80074b4:	4638      	mov	r0, r7
 80074b6:	ea6f 0909 	mvn.w	r9, r9
 80074ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80074be:	f1bc 0f09 	cmp.w	ip, #9
 80074c2:	d814      	bhi.n	80074ee <_strtoul_l.constprop.0+0x86>
 80074c4:	4664      	mov	r4, ip
 80074c6:	42a3      	cmp	r3, r4
 80074c8:	dd22      	ble.n	8007510 <_strtoul_l.constprop.0+0xa8>
 80074ca:	2f00      	cmp	r7, #0
 80074cc:	db1d      	blt.n	800750a <_strtoul_l.constprop.0+0xa2>
 80074ce:	4580      	cmp	r8, r0
 80074d0:	d31b      	bcc.n	800750a <_strtoul_l.constprop.0+0xa2>
 80074d2:	d101      	bne.n	80074d8 <_strtoul_l.constprop.0+0x70>
 80074d4:	45a1      	cmp	r9, r4
 80074d6:	db18      	blt.n	800750a <_strtoul_l.constprop.0+0xa2>
 80074d8:	2701      	movs	r7, #1
 80074da:	fb00 4003 	mla	r0, r0, r3, r4
 80074de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074e2:	e7ea      	b.n	80074ba <_strtoul_l.constprop.0+0x52>
 80074e4:	2c2b      	cmp	r4, #43	; 0x2b
 80074e6:	bf04      	itt	eq
 80074e8:	782c      	ldrbeq	r4, [r5, #0]
 80074ea:	1c85      	addeq	r5, r0, #2
 80074ec:	e7cd      	b.n	800748a <_strtoul_l.constprop.0+0x22>
 80074ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80074f2:	f1bc 0f19 	cmp.w	ip, #25
 80074f6:	d801      	bhi.n	80074fc <_strtoul_l.constprop.0+0x94>
 80074f8:	3c37      	subs	r4, #55	; 0x37
 80074fa:	e7e4      	b.n	80074c6 <_strtoul_l.constprop.0+0x5e>
 80074fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007500:	f1bc 0f19 	cmp.w	ip, #25
 8007504:	d804      	bhi.n	8007510 <_strtoul_l.constprop.0+0xa8>
 8007506:	3c57      	subs	r4, #87	; 0x57
 8007508:	e7dd      	b.n	80074c6 <_strtoul_l.constprop.0+0x5e>
 800750a:	f04f 37ff 	mov.w	r7, #4294967295
 800750e:	e7e6      	b.n	80074de <_strtoul_l.constprop.0+0x76>
 8007510:	2f00      	cmp	r7, #0
 8007512:	da07      	bge.n	8007524 <_strtoul_l.constprop.0+0xbc>
 8007514:	2322      	movs	r3, #34	; 0x22
 8007516:	f04f 30ff 	mov.w	r0, #4294967295
 800751a:	f8ce 3000 	str.w	r3, [lr]
 800751e:	b932      	cbnz	r2, 800752e <_strtoul_l.constprop.0+0xc6>
 8007520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007524:	b106      	cbz	r6, 8007528 <_strtoul_l.constprop.0+0xc0>
 8007526:	4240      	negs	r0, r0
 8007528:	2a00      	cmp	r2, #0
 800752a:	d0f9      	beq.n	8007520 <_strtoul_l.constprop.0+0xb8>
 800752c:	b107      	cbz	r7, 8007530 <_strtoul_l.constprop.0+0xc8>
 800752e:	1e69      	subs	r1, r5, #1
 8007530:	6011      	str	r1, [r2, #0]
 8007532:	e7f5      	b.n	8007520 <_strtoul_l.constprop.0+0xb8>
 8007534:	2430      	movs	r4, #48	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1b5      	bne.n	80074a6 <_strtoul_l.constprop.0+0x3e>
 800753a:	2308      	movs	r3, #8
 800753c:	e7b3      	b.n	80074a6 <_strtoul_l.constprop.0+0x3e>
 800753e:	2c30      	cmp	r4, #48	; 0x30
 8007540:	d0a9      	beq.n	8007496 <_strtoul_l.constprop.0+0x2e>
 8007542:	230a      	movs	r3, #10
 8007544:	e7af      	b.n	80074a6 <_strtoul_l.constprop.0+0x3e>
 8007546:	bf00      	nop
 8007548:	08008a30 	.word	0x08008a30

0800754c <_strtoul_r>:
 800754c:	f7ff bf8c 	b.w	8007468 <_strtoul_l.constprop.0>

08007550 <strtoul>:
 8007550:	4613      	mov	r3, r2
 8007552:	460a      	mov	r2, r1
 8007554:	4601      	mov	r1, r0
 8007556:	4802      	ldr	r0, [pc, #8]	; (8007560 <strtoul+0x10>)
 8007558:	6800      	ldr	r0, [r0, #0]
 800755a:	f7ff bf85 	b.w	8007468 <_strtoul_l.constprop.0>
 800755e:	bf00      	nop
 8007560:	2000002c 	.word	0x2000002c

08007564 <__swbuf_r>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	460e      	mov	r6, r1
 8007568:	4614      	mov	r4, r2
 800756a:	4605      	mov	r5, r0
 800756c:	b118      	cbz	r0, 8007576 <__swbuf_r+0x12>
 800756e:	6983      	ldr	r3, [r0, #24]
 8007570:	b90b      	cbnz	r3, 8007576 <__swbuf_r+0x12>
 8007572:	f000 fa03 	bl	800797c <__sinit>
 8007576:	4b21      	ldr	r3, [pc, #132]	; (80075fc <__swbuf_r+0x98>)
 8007578:	429c      	cmp	r4, r3
 800757a:	d12b      	bne.n	80075d4 <__swbuf_r+0x70>
 800757c:	686c      	ldr	r4, [r5, #4]
 800757e:	69a3      	ldr	r3, [r4, #24]
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	071a      	lsls	r2, r3, #28
 8007586:	d52f      	bpl.n	80075e8 <__swbuf_r+0x84>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	b36b      	cbz	r3, 80075e8 <__swbuf_r+0x84>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	6820      	ldr	r0, [r4, #0]
 8007590:	b2f6      	uxtb	r6, r6
 8007592:	1ac0      	subs	r0, r0, r3
 8007594:	6963      	ldr	r3, [r4, #20]
 8007596:	4637      	mov	r7, r6
 8007598:	4283      	cmp	r3, r0
 800759a:	dc04      	bgt.n	80075a6 <__swbuf_r+0x42>
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f958 	bl	8007854 <_fflush_r>
 80075a4:	bb30      	cbnz	r0, 80075f4 <__swbuf_r+0x90>
 80075a6:	68a3      	ldr	r3, [r4, #8]
 80075a8:	3001      	adds	r0, #1
 80075aa:	3b01      	subs	r3, #1
 80075ac:	60a3      	str	r3, [r4, #8]
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	1c5a      	adds	r2, r3, #1
 80075b2:	6022      	str	r2, [r4, #0]
 80075b4:	701e      	strb	r6, [r3, #0]
 80075b6:	6963      	ldr	r3, [r4, #20]
 80075b8:	4283      	cmp	r3, r0
 80075ba:	d004      	beq.n	80075c6 <__swbuf_r+0x62>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	07db      	lsls	r3, r3, #31
 80075c0:	d506      	bpl.n	80075d0 <__swbuf_r+0x6c>
 80075c2:	2e0a      	cmp	r6, #10
 80075c4:	d104      	bne.n	80075d0 <__swbuf_r+0x6c>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 f943 	bl	8007854 <_fflush_r>
 80075ce:	b988      	cbnz	r0, 80075f4 <__swbuf_r+0x90>
 80075d0:	4638      	mov	r0, r7
 80075d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <__swbuf_r+0x9c>)
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d101      	bne.n	80075de <__swbuf_r+0x7a>
 80075da:	68ac      	ldr	r4, [r5, #8]
 80075dc:	e7cf      	b.n	800757e <__swbuf_r+0x1a>
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <__swbuf_r+0xa0>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	bf08      	it	eq
 80075e4:	68ec      	ldreq	r4, [r5, #12]
 80075e6:	e7ca      	b.n	800757e <__swbuf_r+0x1a>
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f81e 	bl	800762c <__swsetup_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d0cb      	beq.n	800758c <__swbuf_r+0x28>
 80075f4:	f04f 37ff 	mov.w	r7, #4294967295
 80075f8:	e7ea      	b.n	80075d0 <__swbuf_r+0x6c>
 80075fa:	bf00      	nop
 80075fc:	08008b84 	.word	0x08008b84
 8007600:	08008ba4 	.word	0x08008ba4
 8007604:	08008b64 	.word	0x08008b64

08007608 <_write_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	2200      	movs	r2, #0
 8007612:	4d05      	ldr	r5, [pc, #20]	; (8007628 <_write_r+0x20>)
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7fa fe88 	bl	800232c <_write>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_write_r+0x1e>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_write_r+0x1e>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000528 	.word	0x20000528

0800762c <__swsetup_r>:
 800762c:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <__swsetup_r+0xcc>)
 800762e:	b570      	push	{r4, r5, r6, lr}
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	4606      	mov	r6, r0
 8007634:	460c      	mov	r4, r1
 8007636:	b125      	cbz	r5, 8007642 <__swsetup_r+0x16>
 8007638:	69ab      	ldr	r3, [r5, #24]
 800763a:	b913      	cbnz	r3, 8007642 <__swsetup_r+0x16>
 800763c:	4628      	mov	r0, r5
 800763e:	f000 f99d 	bl	800797c <__sinit>
 8007642:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <__swsetup_r+0xd0>)
 8007644:	429c      	cmp	r4, r3
 8007646:	d10f      	bne.n	8007668 <__swsetup_r+0x3c>
 8007648:	686c      	ldr	r4, [r5, #4]
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007650:	0719      	lsls	r1, r3, #28
 8007652:	d42c      	bmi.n	80076ae <__swsetup_r+0x82>
 8007654:	06dd      	lsls	r5, r3, #27
 8007656:	d411      	bmi.n	800767c <__swsetup_r+0x50>
 8007658:	2309      	movs	r3, #9
 800765a:	6033      	str	r3, [r6, #0]
 800765c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	e03e      	b.n	80076e6 <__swsetup_r+0xba>
 8007668:	4b25      	ldr	r3, [pc, #148]	; (8007700 <__swsetup_r+0xd4>)
 800766a:	429c      	cmp	r4, r3
 800766c:	d101      	bne.n	8007672 <__swsetup_r+0x46>
 800766e:	68ac      	ldr	r4, [r5, #8]
 8007670:	e7eb      	b.n	800764a <__swsetup_r+0x1e>
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <__swsetup_r+0xd8>)
 8007674:	429c      	cmp	r4, r3
 8007676:	bf08      	it	eq
 8007678:	68ec      	ldreq	r4, [r5, #12]
 800767a:	e7e6      	b.n	800764a <__swsetup_r+0x1e>
 800767c:	0758      	lsls	r0, r3, #29
 800767e:	d512      	bpl.n	80076a6 <__swsetup_r+0x7a>
 8007680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007682:	b141      	cbz	r1, 8007696 <__swsetup_r+0x6a>
 8007684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007688:	4299      	cmp	r1, r3
 800768a:	d002      	beq.n	8007692 <__swsetup_r+0x66>
 800768c:	4630      	mov	r0, r6
 800768e:	f7fe fcad 	bl	8005fec <_free_r>
 8007692:	2300      	movs	r3, #0
 8007694:	6363      	str	r3, [r4, #52]	; 0x34
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	2300      	movs	r3, #0
 80076a0:	6063      	str	r3, [r4, #4]
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f043 0308 	orr.w	r3, r3, #8
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	b94b      	cbnz	r3, 80076c6 <__swsetup_r+0x9a>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076bc:	d003      	beq.n	80076c6 <__swsetup_r+0x9a>
 80076be:	4621      	mov	r1, r4
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 fa31 	bl	8007b28 <__smakebuf_r>
 80076c6:	89a0      	ldrh	r0, [r4, #12]
 80076c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076cc:	f010 0301 	ands.w	r3, r0, #1
 80076d0:	d00a      	beq.n	80076e8 <__swsetup_r+0xbc>
 80076d2:	2300      	movs	r3, #0
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	6963      	ldr	r3, [r4, #20]
 80076d8:	425b      	negs	r3, r3
 80076da:	61a3      	str	r3, [r4, #24]
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	b943      	cbnz	r3, 80076f2 <__swsetup_r+0xc6>
 80076e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076e4:	d1ba      	bne.n	800765c <__swsetup_r+0x30>
 80076e6:	bd70      	pop	{r4, r5, r6, pc}
 80076e8:	0781      	lsls	r1, r0, #30
 80076ea:	bf58      	it	pl
 80076ec:	6963      	ldrpl	r3, [r4, #20]
 80076ee:	60a3      	str	r3, [r4, #8]
 80076f0:	e7f4      	b.n	80076dc <__swsetup_r+0xb0>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e7f7      	b.n	80076e6 <__swsetup_r+0xba>
 80076f6:	bf00      	nop
 80076f8:	2000002c 	.word	0x2000002c
 80076fc:	08008b84 	.word	0x08008b84
 8007700:	08008ba4 	.word	0x08008ba4
 8007704:	08008b64 	.word	0x08008b64

08007708 <abort>:
 8007708:	2006      	movs	r0, #6
 800770a:	b508      	push	{r3, lr}
 800770c:	f000 fe3c 	bl	8008388 <raise>
 8007710:	2001      	movs	r0, #1
 8007712:	f7fa fde4 	bl	80022de <_exit>
	...

08007718 <_close_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	2300      	movs	r3, #0
 800771c:	4d05      	ldr	r5, [pc, #20]	; (8007734 <_close_r+0x1c>)
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fa fe1e 	bl	8002364 <_close>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_close_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_close_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20000528 	.word	0x20000528

08007738 <__env_lock>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__env_lock+0x8>)
 800773a:	f7ff b9af 	b.w	8006a9c <__retarget_lock_acquire_recursive>
 800773e:	bf00      	nop
 8007740:	20000520 	.word	0x20000520

08007744 <__env_unlock>:
 8007744:	4801      	ldr	r0, [pc, #4]	; (800774c <__env_unlock+0x8>)
 8007746:	f7ff b9ab 	b.w	8006aa0 <__retarget_lock_release_recursive>
 800774a:	bf00      	nop
 800774c:	20000520 	.word	0x20000520

08007750 <__sflush_r>:
 8007750:	898a      	ldrh	r2, [r1, #12]
 8007752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007754:	4605      	mov	r5, r0
 8007756:	0710      	lsls	r0, r2, #28
 8007758:	460c      	mov	r4, r1
 800775a:	d457      	bmi.n	800780c <__sflush_r+0xbc>
 800775c:	684b      	ldr	r3, [r1, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dc04      	bgt.n	800776c <__sflush_r+0x1c>
 8007762:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	dc01      	bgt.n	800776c <__sflush_r+0x1c>
 8007768:	2000      	movs	r0, #0
 800776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776e:	2e00      	cmp	r6, #0
 8007770:	d0fa      	beq.n	8007768 <__sflush_r+0x18>
 8007772:	2300      	movs	r3, #0
 8007774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007778:	682f      	ldr	r7, [r5, #0]
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	d032      	beq.n	80077e4 <__sflush_r+0x94>
 800777e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	075a      	lsls	r2, r3, #29
 8007784:	d505      	bpl.n	8007792 <__sflush_r+0x42>
 8007786:	6863      	ldr	r3, [r4, #4]
 8007788:	1ac0      	subs	r0, r0, r3
 800778a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800778c:	b10b      	cbz	r3, 8007792 <__sflush_r+0x42>
 800778e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007790:	1ac0      	subs	r0, r0, r3
 8007792:	2300      	movs	r3, #0
 8007794:	4602      	mov	r2, r0
 8007796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007798:	4628      	mov	r0, r5
 800779a:	6a21      	ldr	r1, [r4, #32]
 800779c:	47b0      	blx	r6
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	d106      	bne.n	80077b2 <__sflush_r+0x62>
 80077a4:	6829      	ldr	r1, [r5, #0]
 80077a6:	291d      	cmp	r1, #29
 80077a8:	d82c      	bhi.n	8007804 <__sflush_r+0xb4>
 80077aa:	4a29      	ldr	r2, [pc, #164]	; (8007850 <__sflush_r+0x100>)
 80077ac:	40ca      	lsrs	r2, r1
 80077ae:	07d6      	lsls	r6, r2, #31
 80077b0:	d528      	bpl.n	8007804 <__sflush_r+0xb4>
 80077b2:	2200      	movs	r2, #0
 80077b4:	6062      	str	r2, [r4, #4]
 80077b6:	6922      	ldr	r2, [r4, #16]
 80077b8:	04d9      	lsls	r1, r3, #19
 80077ba:	6022      	str	r2, [r4, #0]
 80077bc:	d504      	bpl.n	80077c8 <__sflush_r+0x78>
 80077be:	1c42      	adds	r2, r0, #1
 80077c0:	d101      	bne.n	80077c6 <__sflush_r+0x76>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b903      	cbnz	r3, 80077c8 <__sflush_r+0x78>
 80077c6:	6560      	str	r0, [r4, #84]	; 0x54
 80077c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ca:	602f      	str	r7, [r5, #0]
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d0cb      	beq.n	8007768 <__sflush_r+0x18>
 80077d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077d4:	4299      	cmp	r1, r3
 80077d6:	d002      	beq.n	80077de <__sflush_r+0x8e>
 80077d8:	4628      	mov	r0, r5
 80077da:	f7fe fc07 	bl	8005fec <_free_r>
 80077de:	2000      	movs	r0, #0
 80077e0:	6360      	str	r0, [r4, #52]	; 0x34
 80077e2:	e7c2      	b.n	800776a <__sflush_r+0x1a>
 80077e4:	6a21      	ldr	r1, [r4, #32]
 80077e6:	2301      	movs	r3, #1
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b0      	blx	r6
 80077ec:	1c41      	adds	r1, r0, #1
 80077ee:	d1c7      	bne.n	8007780 <__sflush_r+0x30>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0c4      	beq.n	8007780 <__sflush_r+0x30>
 80077f6:	2b1d      	cmp	r3, #29
 80077f8:	d001      	beq.n	80077fe <__sflush_r+0xae>
 80077fa:	2b16      	cmp	r3, #22
 80077fc:	d101      	bne.n	8007802 <__sflush_r+0xb2>
 80077fe:	602f      	str	r7, [r5, #0]
 8007800:	e7b2      	b.n	8007768 <__sflush_r+0x18>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	e7ae      	b.n	800776a <__sflush_r+0x1a>
 800780c:	690f      	ldr	r7, [r1, #16]
 800780e:	2f00      	cmp	r7, #0
 8007810:	d0aa      	beq.n	8007768 <__sflush_r+0x18>
 8007812:	0793      	lsls	r3, r2, #30
 8007814:	bf18      	it	ne
 8007816:	2300      	movne	r3, #0
 8007818:	680e      	ldr	r6, [r1, #0]
 800781a:	bf08      	it	eq
 800781c:	694b      	ldreq	r3, [r1, #20]
 800781e:	1bf6      	subs	r6, r6, r7
 8007820:	600f      	str	r7, [r1, #0]
 8007822:	608b      	str	r3, [r1, #8]
 8007824:	2e00      	cmp	r6, #0
 8007826:	dd9f      	ble.n	8007768 <__sflush_r+0x18>
 8007828:	4633      	mov	r3, r6
 800782a:	463a      	mov	r2, r7
 800782c:	4628      	mov	r0, r5
 800782e:	6a21      	ldr	r1, [r4, #32]
 8007830:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007834:	47e0      	blx	ip
 8007836:	2800      	cmp	r0, #0
 8007838:	dc06      	bgt.n	8007848 <__sflush_r+0xf8>
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007844:	81a3      	strh	r3, [r4, #12]
 8007846:	e790      	b.n	800776a <__sflush_r+0x1a>
 8007848:	4407      	add	r7, r0
 800784a:	1a36      	subs	r6, r6, r0
 800784c:	e7ea      	b.n	8007824 <__sflush_r+0xd4>
 800784e:	bf00      	nop
 8007850:	20400001 	.word	0x20400001

08007854 <_fflush_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	690b      	ldr	r3, [r1, #16]
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b913      	cbnz	r3, 8007864 <_fflush_r+0x10>
 800785e:	2500      	movs	r5, #0
 8007860:	4628      	mov	r0, r5
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	b118      	cbz	r0, 800786e <_fflush_r+0x1a>
 8007866:	6983      	ldr	r3, [r0, #24]
 8007868:	b90b      	cbnz	r3, 800786e <_fflush_r+0x1a>
 800786a:	f000 f887 	bl	800797c <__sinit>
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <_fflush_r+0x6c>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d11b      	bne.n	80078ac <_fflush_r+0x58>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0ef      	beq.n	800785e <_fflush_r+0xa>
 800787e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007880:	07d0      	lsls	r0, r2, #31
 8007882:	d404      	bmi.n	800788e <_fflush_r+0x3a>
 8007884:	0599      	lsls	r1, r3, #22
 8007886:	d402      	bmi.n	800788e <_fflush_r+0x3a>
 8007888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788a:	f7ff f907 	bl	8006a9c <__retarget_lock_acquire_recursive>
 800788e:	4628      	mov	r0, r5
 8007890:	4621      	mov	r1, r4
 8007892:	f7ff ff5d 	bl	8007750 <__sflush_r>
 8007896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007898:	4605      	mov	r5, r0
 800789a:	07da      	lsls	r2, r3, #31
 800789c:	d4e0      	bmi.n	8007860 <_fflush_r+0xc>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	059b      	lsls	r3, r3, #22
 80078a2:	d4dd      	bmi.n	8007860 <_fflush_r+0xc>
 80078a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078a6:	f7ff f8fb 	bl	8006aa0 <__retarget_lock_release_recursive>
 80078aa:	e7d9      	b.n	8007860 <_fflush_r+0xc>
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_fflush_r+0x70>)
 80078ae:	429c      	cmp	r4, r3
 80078b0:	d101      	bne.n	80078b6 <_fflush_r+0x62>
 80078b2:	68ac      	ldr	r4, [r5, #8]
 80078b4:	e7df      	b.n	8007876 <_fflush_r+0x22>
 80078b6:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <_fflush_r+0x74>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	bf08      	it	eq
 80078bc:	68ec      	ldreq	r4, [r5, #12]
 80078be:	e7da      	b.n	8007876 <_fflush_r+0x22>
 80078c0:	08008b84 	.word	0x08008b84
 80078c4:	08008ba4 	.word	0x08008ba4
 80078c8:	08008b64 	.word	0x08008b64

080078cc <std>:
 80078cc:	2300      	movs	r3, #0
 80078ce:	b510      	push	{r4, lr}
 80078d0:	4604      	mov	r4, r0
 80078d2:	e9c0 3300 	strd	r3, r3, [r0]
 80078d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078da:	6083      	str	r3, [r0, #8]
 80078dc:	8181      	strh	r1, [r0, #12]
 80078de:	6643      	str	r3, [r0, #100]	; 0x64
 80078e0:	81c2      	strh	r2, [r0, #14]
 80078e2:	6183      	str	r3, [r0, #24]
 80078e4:	4619      	mov	r1, r3
 80078e6:	2208      	movs	r2, #8
 80078e8:	305c      	adds	r0, #92	; 0x5c
 80078ea:	f7fe fb77 	bl	8005fdc <memset>
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <std+0x38>)
 80078f0:	6224      	str	r4, [r4, #32]
 80078f2:	6263      	str	r3, [r4, #36]	; 0x24
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <std+0x3c>)
 80078f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <std+0x40>)
 80078fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <std+0x44>)
 80078fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007900:	bd10      	pop	{r4, pc}
 8007902:	bf00      	nop
 8007904:	080073a5 	.word	0x080073a5
 8007908:	080073cb 	.word	0x080073cb
 800790c:	08007403 	.word	0x08007403
 8007910:	08007427 	.word	0x08007427

08007914 <_cleanup_r>:
 8007914:	4901      	ldr	r1, [pc, #4]	; (800791c <_cleanup_r+0x8>)
 8007916:	f000 b8af 	b.w	8007a78 <_fwalk_reent>
 800791a:	bf00      	nop
 800791c:	08007855 	.word	0x08007855

08007920 <__sfmoreglue>:
 8007920:	2268      	movs	r2, #104	; 0x68
 8007922:	b570      	push	{r4, r5, r6, lr}
 8007924:	1e4d      	subs	r5, r1, #1
 8007926:	4355      	muls	r5, r2
 8007928:	460e      	mov	r6, r1
 800792a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800792e:	f7fe fbc5 	bl	80060bc <_malloc_r>
 8007932:	4604      	mov	r4, r0
 8007934:	b140      	cbz	r0, 8007948 <__sfmoreglue+0x28>
 8007936:	2100      	movs	r1, #0
 8007938:	e9c0 1600 	strd	r1, r6, [r0]
 800793c:	300c      	adds	r0, #12
 800793e:	60a0      	str	r0, [r4, #8]
 8007940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007944:	f7fe fb4a 	bl	8005fdc <memset>
 8007948:	4620      	mov	r0, r4
 800794a:	bd70      	pop	{r4, r5, r6, pc}

0800794c <__sfp_lock_acquire>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__sfp_lock_acquire+0x8>)
 800794e:	f7ff b8a5 	b.w	8006a9c <__retarget_lock_acquire_recursive>
 8007952:	bf00      	nop
 8007954:	20000522 	.word	0x20000522

08007958 <__sfp_lock_release>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__sfp_lock_release+0x8>)
 800795a:	f7ff b8a1 	b.w	8006aa0 <__retarget_lock_release_recursive>
 800795e:	bf00      	nop
 8007960:	20000522 	.word	0x20000522

08007964 <__sinit_lock_acquire>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__sinit_lock_acquire+0x8>)
 8007966:	f7ff b899 	b.w	8006a9c <__retarget_lock_acquire_recursive>
 800796a:	bf00      	nop
 800796c:	20000523 	.word	0x20000523

08007970 <__sinit_lock_release>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__sinit_lock_release+0x8>)
 8007972:	f7ff b895 	b.w	8006aa0 <__retarget_lock_release_recursive>
 8007976:	bf00      	nop
 8007978:	20000523 	.word	0x20000523

0800797c <__sinit>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4604      	mov	r4, r0
 8007980:	f7ff fff0 	bl	8007964 <__sinit_lock_acquire>
 8007984:	69a3      	ldr	r3, [r4, #24]
 8007986:	b11b      	cbz	r3, 8007990 <__sinit+0x14>
 8007988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800798c:	f7ff bff0 	b.w	8007970 <__sinit_lock_release>
 8007990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007994:	6523      	str	r3, [r4, #80]	; 0x50
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <__sinit+0x68>)
 8007998:	4a13      	ldr	r2, [pc, #76]	; (80079e8 <__sinit+0x6c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	62a2      	str	r2, [r4, #40]	; 0x28
 800799e:	42a3      	cmp	r3, r4
 80079a0:	bf08      	it	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	4620      	mov	r0, r4
 80079a6:	bf08      	it	eq
 80079a8:	61a3      	streq	r3, [r4, #24]
 80079aa:	f000 f81f 	bl	80079ec <__sfp>
 80079ae:	6060      	str	r0, [r4, #4]
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 f81b 	bl	80079ec <__sfp>
 80079b6:	60a0      	str	r0, [r4, #8]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f817 	bl	80079ec <__sfp>
 80079be:	2200      	movs	r2, #0
 80079c0:	2104      	movs	r1, #4
 80079c2:	60e0      	str	r0, [r4, #12]
 80079c4:	6860      	ldr	r0, [r4, #4]
 80079c6:	f7ff ff81 	bl	80078cc <std>
 80079ca:	2201      	movs	r2, #1
 80079cc:	2109      	movs	r1, #9
 80079ce:	68a0      	ldr	r0, [r4, #8]
 80079d0:	f7ff ff7c 	bl	80078cc <std>
 80079d4:	2202      	movs	r2, #2
 80079d6:	2112      	movs	r1, #18
 80079d8:	68e0      	ldr	r0, [r4, #12]
 80079da:	f7ff ff77 	bl	80078cc <std>
 80079de:	2301      	movs	r3, #1
 80079e0:	61a3      	str	r3, [r4, #24]
 80079e2:	e7d1      	b.n	8007988 <__sinit+0xc>
 80079e4:	08008884 	.word	0x08008884
 80079e8:	08007915 	.word	0x08007915

080079ec <__sfp>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	4607      	mov	r7, r0
 80079f0:	f7ff ffac 	bl	800794c <__sfp_lock_acquire>
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <__sfp+0x84>)
 80079f6:	681e      	ldr	r6, [r3, #0]
 80079f8:	69b3      	ldr	r3, [r6, #24]
 80079fa:	b913      	cbnz	r3, 8007a02 <__sfp+0x16>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff ffbd 	bl	800797c <__sinit>
 8007a02:	3648      	adds	r6, #72	; 0x48
 8007a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	d503      	bpl.n	8007a14 <__sfp+0x28>
 8007a0c:	6833      	ldr	r3, [r6, #0]
 8007a0e:	b30b      	cbz	r3, 8007a54 <__sfp+0x68>
 8007a10:	6836      	ldr	r6, [r6, #0]
 8007a12:	e7f7      	b.n	8007a04 <__sfp+0x18>
 8007a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a18:	b9d5      	cbnz	r5, 8007a50 <__sfp+0x64>
 8007a1a:	4b16      	ldr	r3, [pc, #88]	; (8007a74 <__sfp+0x88>)
 8007a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a20:	60e3      	str	r3, [r4, #12]
 8007a22:	6665      	str	r5, [r4, #100]	; 0x64
 8007a24:	f7ff f838 	bl	8006a98 <__retarget_lock_init_recursive>
 8007a28:	f7ff ff96 	bl	8007958 <__sfp_lock_release>
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	4629      	mov	r1, r5
 8007a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a38:	6025      	str	r5, [r4, #0]
 8007a3a:	61a5      	str	r5, [r4, #24]
 8007a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a40:	f7fe facc 	bl	8005fdc <memset>
 8007a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a50:	3468      	adds	r4, #104	; 0x68
 8007a52:	e7d9      	b.n	8007a08 <__sfp+0x1c>
 8007a54:	2104      	movs	r1, #4
 8007a56:	4638      	mov	r0, r7
 8007a58:	f7ff ff62 	bl	8007920 <__sfmoreglue>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	6030      	str	r0, [r6, #0]
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d1d5      	bne.n	8007a10 <__sfp+0x24>
 8007a64:	f7ff ff78 	bl	8007958 <__sfp_lock_release>
 8007a68:	230c      	movs	r3, #12
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	e7ee      	b.n	8007a4c <__sfp+0x60>
 8007a6e:	bf00      	nop
 8007a70:	08008884 	.word	0x08008884
 8007a74:	ffff0001 	.word	0xffff0001

08007a78 <_fwalk_reent>:
 8007a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	4688      	mov	r8, r1
 8007a80:	2700      	movs	r7, #0
 8007a82:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a8e:	d505      	bpl.n	8007a9c <_fwalk_reent+0x24>
 8007a90:	6824      	ldr	r4, [r4, #0]
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	d1f7      	bne.n	8007a86 <_fwalk_reent+0xe>
 8007a96:	4638      	mov	r0, r7
 8007a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9c:	89ab      	ldrh	r3, [r5, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d907      	bls.n	8007ab2 <_fwalk_reent+0x3a>
 8007aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	d003      	beq.n	8007ab2 <_fwalk_reent+0x3a>
 8007aaa:	4629      	mov	r1, r5
 8007aac:	4630      	mov	r0, r6
 8007aae:	47c0      	blx	r8
 8007ab0:	4307      	orrs	r7, r0
 8007ab2:	3568      	adds	r5, #104	; 0x68
 8007ab4:	e7e9      	b.n	8007a8a <_fwalk_reent+0x12>
	...

08007ab8 <_lseek_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4d05      	ldr	r5, [pc, #20]	; (8007ad8 <_lseek_r+0x20>)
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7fa fc70 	bl	80023ac <_lseek>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_lseek_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_lseek_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20000528 	.word	0x20000528

08007adc <__swhatbuf_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	460e      	mov	r6, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	461d      	mov	r5, r3
 8007aea:	b096      	sub	sp, #88	; 0x58
 8007aec:	da08      	bge.n	8007b00 <__swhatbuf_r+0x24>
 8007aee:	2200      	movs	r2, #0
 8007af0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	061a      	lsls	r2, r3, #24
 8007af8:	d410      	bmi.n	8007b1c <__swhatbuf_r+0x40>
 8007afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007afe:	e00e      	b.n	8007b1e <__swhatbuf_r+0x42>
 8007b00:	466a      	mov	r2, sp
 8007b02:	f000 fc95 	bl	8008430 <_fstat_r>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	dbf1      	blt.n	8007aee <__swhatbuf_r+0x12>
 8007b0a:	9a01      	ldr	r2, [sp, #4]
 8007b0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b14:	425a      	negs	r2, r3
 8007b16:	415a      	adcs	r2, r3
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	e7ee      	b.n	8007afa <__swhatbuf_r+0x1e>
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	2000      	movs	r0, #0
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	b016      	add	sp, #88	; 0x58
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b28 <__smakebuf_r>:
 8007b28:	898b      	ldrh	r3, [r1, #12]
 8007b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2c:	079d      	lsls	r5, r3, #30
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d507      	bpl.n	8007b44 <__smakebuf_r+0x1c>
 8007b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	b002      	add	sp, #8
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	466a      	mov	r2, sp
 8007b46:	ab01      	add	r3, sp, #4
 8007b48:	f7ff ffc8 	bl	8007adc <__swhatbuf_r>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7fe fab3 	bl	80060bc <_malloc_r>
 8007b56:	b948      	cbnz	r0, 8007b6c <__smakebuf_r+0x44>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	059a      	lsls	r2, r3, #22
 8007b5e:	d4ef      	bmi.n	8007b40 <__smakebuf_r+0x18>
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7e3      	b.n	8007b34 <__smakebuf_r+0xc>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__smakebuf_r+0x7c>)
 8007b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	6120      	str	r0, [r4, #16]
 8007b7e:	6163      	str	r3, [r4, #20]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	b15b      	cbz	r3, 8007b9c <__smakebuf_r+0x74>
 8007b84:	4630      	mov	r0, r6
 8007b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8a:	f000 fc63 	bl	8008454 <_isatty_r>
 8007b8e:	b128      	cbz	r0, 8007b9c <__smakebuf_r+0x74>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	89a0      	ldrh	r0, [r4, #12]
 8007b9e:	4305      	orrs	r5, r0
 8007ba0:	81a5      	strh	r5, [r4, #12]
 8007ba2:	e7cd      	b.n	8007b40 <__smakebuf_r+0x18>
 8007ba4:	08007915 	.word	0x08007915

08007ba8 <memchr>:
 8007ba8:	4603      	mov	r3, r0
 8007baa:	b510      	push	{r4, lr}
 8007bac:	b2c9      	uxtb	r1, r1
 8007bae:	4402      	add	r2, r0
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	d101      	bne.n	8007bba <memchr+0x12>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e003      	b.n	8007bc2 <memchr+0x1a>
 8007bba:	7804      	ldrb	r4, [r0, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	428c      	cmp	r4, r1
 8007bc0:	d1f6      	bne.n	8007bb0 <memchr+0x8>
 8007bc2:	bd10      	pop	{r4, pc}

08007bc4 <memmove>:
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	eb01 0402 	add.w	r4, r1, r2
 8007bcc:	d902      	bls.n	8007bd4 <memmove+0x10>
 8007bce:	4284      	cmp	r4, r0
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	d807      	bhi.n	8007be4 <memmove+0x20>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	42a1      	cmp	r1, r4
 8007bd8:	d008      	beq.n	8007bec <memmove+0x28>
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be2:	e7f8      	b.n	8007bd6 <memmove+0x12>
 8007be4:	4601      	mov	r1, r0
 8007be6:	4402      	add	r2, r0
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d100      	bne.n	8007bee <memmove+0x2a>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf6:	e7f7      	b.n	8007be8 <memmove+0x24>

08007bf8 <_realloc_r>:
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4614      	mov	r4, r2
 8007c00:	460e      	mov	r6, r1
 8007c02:	b921      	cbnz	r1, 8007c0e <_realloc_r+0x16>
 8007c04:	4611      	mov	r1, r2
 8007c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	f7fe ba57 	b.w	80060bc <_malloc_r>
 8007c0e:	b92a      	cbnz	r2, 8007c1c <_realloc_r+0x24>
 8007c10:	f7fe f9ec 	bl	8005fec <_free_r>
 8007c14:	4625      	mov	r5, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	f000 fc2a 	bl	8008474 <_malloc_usable_size_r>
 8007c20:	4284      	cmp	r4, r0
 8007c22:	4607      	mov	r7, r0
 8007c24:	d802      	bhi.n	8007c2c <_realloc_r+0x34>
 8007c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c2a:	d812      	bhi.n	8007c52 <_realloc_r+0x5a>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7fe fa44 	bl	80060bc <_malloc_r>
 8007c34:	4605      	mov	r5, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0ed      	beq.n	8007c16 <_realloc_r+0x1e>
 8007c3a:	42bc      	cmp	r4, r7
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	4631      	mov	r1, r6
 8007c40:	bf28      	it	cs
 8007c42:	463a      	movcs	r2, r7
 8007c44:	f7fe f9bc 	bl	8005fc0 <memcpy>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7fe f9ce 	bl	8005fec <_free_r>
 8007c50:	e7e1      	b.n	8007c16 <_realloc_r+0x1e>
 8007c52:	4635      	mov	r5, r6
 8007c54:	e7df      	b.n	8007c16 <_realloc_r+0x1e>

08007c56 <_sungetc_r>:
 8007c56:	b538      	push	{r3, r4, r5, lr}
 8007c58:	1c4b      	adds	r3, r1, #1
 8007c5a:	4614      	mov	r4, r2
 8007c5c:	d103      	bne.n	8007c66 <_sungetc_r+0x10>
 8007c5e:	f04f 35ff 	mov.w	r5, #4294967295
 8007c62:	4628      	mov	r0, r5
 8007c64:	bd38      	pop	{r3, r4, r5, pc}
 8007c66:	8993      	ldrh	r3, [r2, #12]
 8007c68:	b2cd      	uxtb	r5, r1
 8007c6a:	f023 0320 	bic.w	r3, r3, #32
 8007c6e:	8193      	strh	r3, [r2, #12]
 8007c70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	b18b      	cbz	r3, 8007c9a <_sungetc_r+0x44>
 8007c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	dd08      	ble.n	8007c8e <_sungetc_r+0x38>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	1e5a      	subs	r2, r3, #1
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007c86:	6863      	ldr	r3, [r4, #4]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	6063      	str	r3, [r4, #4]
 8007c8c:	e7e9      	b.n	8007c62 <_sungetc_r+0xc>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	f000 fb96 	bl	80083c0 <__submore>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d0f1      	beq.n	8007c7c <_sungetc_r+0x26>
 8007c98:	e7e1      	b.n	8007c5e <_sungetc_r+0x8>
 8007c9a:	6921      	ldr	r1, [r4, #16]
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	b151      	cbz	r1, 8007cb6 <_sungetc_r+0x60>
 8007ca0:	4299      	cmp	r1, r3
 8007ca2:	d208      	bcs.n	8007cb6 <_sungetc_r+0x60>
 8007ca4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007ca8:	42a9      	cmp	r1, r5
 8007caa:	d104      	bne.n	8007cb6 <_sungetc_r+0x60>
 8007cac:	3b01      	subs	r3, #1
 8007cae:	3201      	adds	r2, #1
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	6062      	str	r2, [r4, #4]
 8007cb4:	e7d5      	b.n	8007c62 <_sungetc_r+0xc>
 8007cb6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cbe:	6363      	str	r3, [r4, #52]	; 0x34
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cc4:	4623      	mov	r3, r4
 8007cc6:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e7dc      	b.n	8007c8a <_sungetc_r+0x34>

08007cd0 <__ssrefill_r>:
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007cd6:	b169      	cbz	r1, 8007cf4 <__ssrefill_r+0x24>
 8007cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cdc:	4299      	cmp	r1, r3
 8007cde:	d001      	beq.n	8007ce4 <__ssrefill_r+0x14>
 8007ce0:	f7fe f984 	bl	8005fec <_free_r>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cea:	6063      	str	r3, [r4, #4]
 8007cec:	b113      	cbz	r3, 8007cf4 <__ssrefill_r+0x24>
 8007cee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd10      	pop	{r4, pc}
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	6023      	str	r3, [r4, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	f043 0320 	orr.w	r3, r3, #32
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	e7f3      	b.n	8007cf2 <__ssrefill_r+0x22>
	...

08007d0c <__ssvfiscanf_r>:
 8007d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d10:	460c      	mov	r4, r1
 8007d12:	2100      	movs	r1, #0
 8007d14:	4606      	mov	r6, r0
 8007d16:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007d1a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007d1e:	49a7      	ldr	r1, [pc, #668]	; (8007fbc <__ssvfiscanf_r+0x2b0>)
 8007d20:	f10d 0804 	add.w	r8, sp, #4
 8007d24:	91a0      	str	r1, [sp, #640]	; 0x280
 8007d26:	49a6      	ldr	r1, [pc, #664]	; (8007fc0 <__ssvfiscanf_r+0x2b4>)
 8007d28:	4fa6      	ldr	r7, [pc, #664]	; (8007fc4 <__ssvfiscanf_r+0x2b8>)
 8007d2a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8007fc8 <__ssvfiscanf_r+0x2bc>
 8007d2e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007d32:	91a1      	str	r1, [sp, #644]	; 0x284
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	7813      	ldrb	r3, [r2, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 815c 	beq.w	8007ff6 <__ssvfiscanf_r+0x2ea>
 8007d3e:	5dd9      	ldrb	r1, [r3, r7]
 8007d40:	1c55      	adds	r5, r2, #1
 8007d42:	f011 0108 	ands.w	r1, r1, #8
 8007d46:	d019      	beq.n	8007d7c <__ssvfiscanf_r+0x70>
 8007d48:	6863      	ldr	r3, [r4, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dd0f      	ble.n	8007d6e <__ssvfiscanf_r+0x62>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	5cba      	ldrb	r2, [r7, r2]
 8007d54:	0712      	lsls	r2, r2, #28
 8007d56:	d401      	bmi.n	8007d5c <__ssvfiscanf_r+0x50>
 8007d58:	462a      	mov	r2, r5
 8007d5a:	e7ec      	b.n	8007d36 <__ssvfiscanf_r+0x2a>
 8007d5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007d5e:	3301      	adds	r3, #1
 8007d60:	3201      	adds	r2, #1
 8007d62:	9245      	str	r2, [sp, #276]	; 0x114
 8007d64:	6862      	ldr	r2, [r4, #4]
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	3a01      	subs	r2, #1
 8007d6a:	6062      	str	r2, [r4, #4]
 8007d6c:	e7ec      	b.n	8007d48 <__ssvfiscanf_r+0x3c>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d74:	4798      	blx	r3
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d0e9      	beq.n	8007d4e <__ssvfiscanf_r+0x42>
 8007d7a:	e7ed      	b.n	8007d58 <__ssvfiscanf_r+0x4c>
 8007d7c:	2b25      	cmp	r3, #37	; 0x25
 8007d7e:	d012      	beq.n	8007da6 <__ssvfiscanf_r+0x9a>
 8007d80:	469a      	mov	sl, r3
 8007d82:	6863      	ldr	r3, [r4, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f340 8094 	ble.w	8007eb2 <__ssvfiscanf_r+0x1a6>
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	7813      	ldrb	r3, [r2, #0]
 8007d8e:	4553      	cmp	r3, sl
 8007d90:	f040 8131 	bne.w	8007ff6 <__ssvfiscanf_r+0x2ea>
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	3201      	adds	r2, #1
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	6063      	str	r3, [r4, #4]
 8007d9c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007d9e:	6022      	str	r2, [r4, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	9345      	str	r3, [sp, #276]	; 0x114
 8007da4:	e7d8      	b.n	8007d58 <__ssvfiscanf_r+0x4c>
 8007da6:	9141      	str	r1, [sp, #260]	; 0x104
 8007da8:	9143      	str	r1, [sp, #268]	; 0x10c
 8007daa:	7853      	ldrb	r3, [r2, #1]
 8007dac:	2b2a      	cmp	r3, #42	; 0x2a
 8007dae:	bf04      	itt	eq
 8007db0:	2310      	moveq	r3, #16
 8007db2:	1c95      	addeq	r5, r2, #2
 8007db4:	f04f 020a 	mov.w	r2, #10
 8007db8:	bf08      	it	eq
 8007dba:	9341      	streq	r3, [sp, #260]	; 0x104
 8007dbc:	46aa      	mov	sl, r5
 8007dbe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007dc2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d91d      	bls.n	8007e06 <__ssvfiscanf_r+0xfa>
 8007dca:	2203      	movs	r2, #3
 8007dcc:	487e      	ldr	r0, [pc, #504]	; (8007fc8 <__ssvfiscanf_r+0x2bc>)
 8007dce:	f7ff feeb 	bl	8007ba8 <memchr>
 8007dd2:	b140      	cbz	r0, 8007de6 <__ssvfiscanf_r+0xda>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4655      	mov	r5, sl
 8007dd8:	eba0 0009 	sub.w	r0, r0, r9
 8007ddc:	fa03 f000 	lsl.w	r0, r3, r0
 8007de0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007de2:	4318      	orrs	r0, r3
 8007de4:	9041      	str	r0, [sp, #260]	; 0x104
 8007de6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007dea:	2b78      	cmp	r3, #120	; 0x78
 8007dec:	d806      	bhi.n	8007dfc <__ssvfiscanf_r+0xf0>
 8007dee:	2b57      	cmp	r3, #87	; 0x57
 8007df0:	d810      	bhi.n	8007e14 <__ssvfiscanf_r+0x108>
 8007df2:	2b25      	cmp	r3, #37	; 0x25
 8007df4:	d0c4      	beq.n	8007d80 <__ssvfiscanf_r+0x74>
 8007df6:	d857      	bhi.n	8007ea8 <__ssvfiscanf_r+0x19c>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d065      	beq.n	8007ec8 <__ssvfiscanf_r+0x1bc>
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e00:	230a      	movs	r3, #10
 8007e02:	9342      	str	r3, [sp, #264]	; 0x108
 8007e04:	e072      	b.n	8007eec <__ssvfiscanf_r+0x1e0>
 8007e06:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007e08:	4655      	mov	r5, sl
 8007e0a:	fb02 1103 	mla	r1, r2, r3, r1
 8007e0e:	3930      	subs	r1, #48	; 0x30
 8007e10:	9143      	str	r1, [sp, #268]	; 0x10c
 8007e12:	e7d3      	b.n	8007dbc <__ssvfiscanf_r+0xb0>
 8007e14:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007e18:	2a20      	cmp	r2, #32
 8007e1a:	d8ef      	bhi.n	8007dfc <__ssvfiscanf_r+0xf0>
 8007e1c:	a101      	add	r1, pc, #4	; (adr r1, 8007e24 <__ssvfiscanf_r+0x118>)
 8007e1e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007ed7 	.word	0x08007ed7
 8007e28:	08007dfd 	.word	0x08007dfd
 8007e2c:	08007dfd 	.word	0x08007dfd
 8007e30:	08007f35 	.word	0x08007f35
 8007e34:	08007dfd 	.word	0x08007dfd
 8007e38:	08007dfd 	.word	0x08007dfd
 8007e3c:	08007dfd 	.word	0x08007dfd
 8007e40:	08007dfd 	.word	0x08007dfd
 8007e44:	08007dfd 	.word	0x08007dfd
 8007e48:	08007dfd 	.word	0x08007dfd
 8007e4c:	08007dfd 	.word	0x08007dfd
 8007e50:	08007f4b 	.word	0x08007f4b
 8007e54:	08007f21 	.word	0x08007f21
 8007e58:	08007eaf 	.word	0x08007eaf
 8007e5c:	08007eaf 	.word	0x08007eaf
 8007e60:	08007eaf 	.word	0x08007eaf
 8007e64:	08007dfd 	.word	0x08007dfd
 8007e68:	08007f25 	.word	0x08007f25
 8007e6c:	08007dfd 	.word	0x08007dfd
 8007e70:	08007dfd 	.word	0x08007dfd
 8007e74:	08007dfd 	.word	0x08007dfd
 8007e78:	08007dfd 	.word	0x08007dfd
 8007e7c:	08007f5b 	.word	0x08007f5b
 8007e80:	08007f2d 	.word	0x08007f2d
 8007e84:	08007ecf 	.word	0x08007ecf
 8007e88:	08007dfd 	.word	0x08007dfd
 8007e8c:	08007dfd 	.word	0x08007dfd
 8007e90:	08007f57 	.word	0x08007f57
 8007e94:	08007dfd 	.word	0x08007dfd
 8007e98:	08007f21 	.word	0x08007f21
 8007e9c:	08007dfd 	.word	0x08007dfd
 8007ea0:	08007dfd 	.word	0x08007dfd
 8007ea4:	08007ed7 	.word	0x08007ed7
 8007ea8:	3b45      	subs	r3, #69	; 0x45
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d8a6      	bhi.n	8007dfc <__ssvfiscanf_r+0xf0>
 8007eae:	2305      	movs	r3, #5
 8007eb0:	e01b      	b.n	8007eea <__ssvfiscanf_r+0x1de>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007eb8:	4798      	blx	r3
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f43f af65 	beq.w	8007d8a <__ssvfiscanf_r+0x7e>
 8007ec0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f040 808d 	bne.w	8007fe2 <__ssvfiscanf_r+0x2d6>
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e08f      	b.n	8007fee <__ssvfiscanf_r+0x2e2>
 8007ece:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ed0:	f042 0220 	orr.w	r2, r2, #32
 8007ed4:	9241      	str	r2, [sp, #260]	; 0x104
 8007ed6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007edc:	9241      	str	r2, [sp, #260]	; 0x104
 8007ede:	2210      	movs	r2, #16
 8007ee0:	2b6f      	cmp	r3, #111	; 0x6f
 8007ee2:	bf34      	ite	cc
 8007ee4:	2303      	movcc	r3, #3
 8007ee6:	2304      	movcs	r3, #4
 8007ee8:	9242      	str	r2, [sp, #264]	; 0x108
 8007eea:	9347      	str	r3, [sp, #284]	; 0x11c
 8007eec:	6863      	ldr	r3, [r4, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd42      	ble.n	8007f78 <__ssvfiscanf_r+0x26c>
 8007ef2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ef4:	0659      	lsls	r1, r3, #25
 8007ef6:	d404      	bmi.n	8007f02 <__ssvfiscanf_r+0x1f6>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	5cba      	ldrb	r2, [r7, r2]
 8007efe:	0712      	lsls	r2, r2, #28
 8007f00:	d441      	bmi.n	8007f86 <__ssvfiscanf_r+0x27a>
 8007f02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	dc50      	bgt.n	8007faa <__ssvfiscanf_r+0x29e>
 8007f08:	466b      	mov	r3, sp
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	a941      	add	r1, sp, #260	; 0x104
 8007f10:	f000 f876 	bl	8008000 <_scanf_chars>
 8007f14:	2801      	cmp	r0, #1
 8007f16:	d06e      	beq.n	8007ff6 <__ssvfiscanf_r+0x2ea>
 8007f18:	2802      	cmp	r0, #2
 8007f1a:	f47f af1d 	bne.w	8007d58 <__ssvfiscanf_r+0x4c>
 8007f1e:	e7cf      	b.n	8007ec0 <__ssvfiscanf_r+0x1b4>
 8007f20:	220a      	movs	r2, #10
 8007f22:	e7dd      	b.n	8007ee0 <__ssvfiscanf_r+0x1d4>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9342      	str	r3, [sp, #264]	; 0x108
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e7de      	b.n	8007eea <__ssvfiscanf_r+0x1de>
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	9342      	str	r3, [sp, #264]	; 0x108
 8007f30:	2304      	movs	r3, #4
 8007f32:	e7da      	b.n	8007eea <__ssvfiscanf_r+0x1de>
 8007f34:	4629      	mov	r1, r5
 8007f36:	4640      	mov	r0, r8
 8007f38:	f000 f9c6 	bl	80082c8 <__sccl>
 8007f3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f3e:	4605      	mov	r5, r0
 8007f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f44:	9341      	str	r3, [sp, #260]	; 0x104
 8007f46:	2301      	movs	r3, #1
 8007f48:	e7cf      	b.n	8007eea <__ssvfiscanf_r+0x1de>
 8007f4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f50:	9341      	str	r3, [sp, #260]	; 0x104
 8007f52:	2300      	movs	r3, #0
 8007f54:	e7c9      	b.n	8007eea <__ssvfiscanf_r+0x1de>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e7c7      	b.n	8007eea <__ssvfiscanf_r+0x1de>
 8007f5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007f5c:	06c3      	lsls	r3, r0, #27
 8007f5e:	f53f aefb 	bmi.w	8007d58 <__ssvfiscanf_r+0x4c>
 8007f62:	9b00      	ldr	r3, [sp, #0]
 8007f64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f66:	1d19      	adds	r1, r3, #4
 8007f68:	9100      	str	r1, [sp, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f010 0f01 	tst.w	r0, #1
 8007f70:	bf14      	ite	ne
 8007f72:	801a      	strhne	r2, [r3, #0]
 8007f74:	601a      	streq	r2, [r3, #0]
 8007f76:	e6ef      	b.n	8007d58 <__ssvfiscanf_r+0x4c>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f7e:	4798      	blx	r3
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d0b6      	beq.n	8007ef2 <__ssvfiscanf_r+0x1e6>
 8007f84:	e79c      	b.n	8007ec0 <__ssvfiscanf_r+0x1b4>
 8007f86:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f88:	3201      	adds	r2, #1
 8007f8a:	9245      	str	r2, [sp, #276]	; 0x114
 8007f8c:	6862      	ldr	r2, [r4, #4]
 8007f8e:	3a01      	subs	r2, #1
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	6062      	str	r2, [r4, #4]
 8007f94:	dd02      	ble.n	8007f9c <__ssvfiscanf_r+0x290>
 8007f96:	3301      	adds	r3, #1
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	e7ad      	b.n	8007ef8 <__ssvfiscanf_r+0x1ec>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007fa2:	4798      	blx	r3
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0a7      	beq.n	8007ef8 <__ssvfiscanf_r+0x1ec>
 8007fa8:	e78a      	b.n	8007ec0 <__ssvfiscanf_r+0x1b4>
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	dc0e      	bgt.n	8007fcc <__ssvfiscanf_r+0x2c0>
 8007fae:	466b      	mov	r3, sp
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	a941      	add	r1, sp, #260	; 0x104
 8007fb6:	f000 f87d 	bl	80080b4 <_scanf_i>
 8007fba:	e7ab      	b.n	8007f14 <__ssvfiscanf_r+0x208>
 8007fbc:	08007c57 	.word	0x08007c57
 8007fc0:	08007cd1 	.word	0x08007cd1
 8007fc4:	08008a30 	.word	0x08008a30
 8007fc8:	08008b36 	.word	0x08008b36
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <__ssvfiscanf_r+0x2f0>)
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f43f aec2 	beq.w	8007d58 <__ssvfiscanf_r+0x4c>
 8007fd4:	466b      	mov	r3, sp
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4630      	mov	r0, r6
 8007fda:	a941      	add	r1, sp, #260	; 0x104
 8007fdc:	f3af 8000 	nop.w
 8007fe0:	e798      	b.n	8007f14 <__ssvfiscanf_r+0x208>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007fe8:	bf18      	it	ne
 8007fea:	f04f 30ff 	movne.w	r0, #4294967295
 8007fee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ff8:	e7f9      	b.n	8007fee <__ssvfiscanf_r+0x2e2>
 8007ffa:	bf00      	nop
 8007ffc:	00000000 	.word	0x00000000

08008000 <_scanf_chars>:
 8008000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008004:	4615      	mov	r5, r2
 8008006:	688a      	ldr	r2, [r1, #8]
 8008008:	4680      	mov	r8, r0
 800800a:	460c      	mov	r4, r1
 800800c:	b932      	cbnz	r2, 800801c <_scanf_chars+0x1c>
 800800e:	698a      	ldr	r2, [r1, #24]
 8008010:	2a00      	cmp	r2, #0
 8008012:	bf0c      	ite	eq
 8008014:	2201      	moveq	r2, #1
 8008016:	f04f 32ff 	movne.w	r2, #4294967295
 800801a:	608a      	str	r2, [r1, #8]
 800801c:	2700      	movs	r7, #0
 800801e:	6822      	ldr	r2, [r4, #0]
 8008020:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80080b0 <_scanf_chars+0xb0>
 8008024:	06d1      	lsls	r1, r2, #27
 8008026:	bf5f      	itttt	pl
 8008028:	681a      	ldrpl	r2, [r3, #0]
 800802a:	1d11      	addpl	r1, r2, #4
 800802c:	6019      	strpl	r1, [r3, #0]
 800802e:	6816      	ldrpl	r6, [r2, #0]
 8008030:	69a0      	ldr	r0, [r4, #24]
 8008032:	b188      	cbz	r0, 8008058 <_scanf_chars+0x58>
 8008034:	2801      	cmp	r0, #1
 8008036:	d107      	bne.n	8008048 <_scanf_chars+0x48>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	6963      	ldr	r3, [r4, #20]
 800803e:	5c9b      	ldrb	r3, [r3, r2]
 8008040:	b953      	cbnz	r3, 8008058 <_scanf_chars+0x58>
 8008042:	2f00      	cmp	r7, #0
 8008044:	d031      	beq.n	80080aa <_scanf_chars+0xaa>
 8008046:	e022      	b.n	800808e <_scanf_chars+0x8e>
 8008048:	2802      	cmp	r0, #2
 800804a:	d120      	bne.n	800808e <_scanf_chars+0x8e>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008054:	071b      	lsls	r3, r3, #28
 8008056:	d41a      	bmi.n	800808e <_scanf_chars+0x8e>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	3701      	adds	r7, #1
 800805c:	06da      	lsls	r2, r3, #27
 800805e:	bf5e      	ittt	pl
 8008060:	682b      	ldrpl	r3, [r5, #0]
 8008062:	781b      	ldrbpl	r3, [r3, #0]
 8008064:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008068:	682a      	ldr	r2, [r5, #0]
 800806a:	686b      	ldr	r3, [r5, #4]
 800806c:	3201      	adds	r2, #1
 800806e:	602a      	str	r2, [r5, #0]
 8008070:	68a2      	ldr	r2, [r4, #8]
 8008072:	3b01      	subs	r3, #1
 8008074:	3a01      	subs	r2, #1
 8008076:	606b      	str	r3, [r5, #4]
 8008078:	60a2      	str	r2, [r4, #8]
 800807a:	b142      	cbz	r2, 800808e <_scanf_chars+0x8e>
 800807c:	2b00      	cmp	r3, #0
 800807e:	dcd7      	bgt.n	8008030 <_scanf_chars+0x30>
 8008080:	4629      	mov	r1, r5
 8008082:	4640      	mov	r0, r8
 8008084:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008088:	4798      	blx	r3
 800808a:	2800      	cmp	r0, #0
 800808c:	d0d0      	beq.n	8008030 <_scanf_chars+0x30>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f013 0310 	ands.w	r3, r3, #16
 8008094:	d105      	bne.n	80080a2 <_scanf_chars+0xa2>
 8008096:	68e2      	ldr	r2, [r4, #12]
 8008098:	3201      	adds	r2, #1
 800809a:	60e2      	str	r2, [r4, #12]
 800809c:	69a2      	ldr	r2, [r4, #24]
 800809e:	b102      	cbz	r2, 80080a2 <_scanf_chars+0xa2>
 80080a0:	7033      	strb	r3, [r6, #0]
 80080a2:	2000      	movs	r0, #0
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	443b      	add	r3, r7
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ae:	bf00      	nop
 80080b0:	08008a30 	.word	0x08008a30

080080b4 <_scanf_i>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	460c      	mov	r4, r1
 80080ba:	4698      	mov	r8, r3
 80080bc:	4b75      	ldr	r3, [pc, #468]	; (8008294 <_scanf_i+0x1e0>)
 80080be:	b087      	sub	sp, #28
 80080c0:	4682      	mov	sl, r0
 80080c2:	4616      	mov	r6, r2
 80080c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080c8:	ab03      	add	r3, sp, #12
 80080ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80080ce:	4b72      	ldr	r3, [pc, #456]	; (8008298 <_scanf_i+0x1e4>)
 80080d0:	69a1      	ldr	r1, [r4, #24]
 80080d2:	4a72      	ldr	r2, [pc, #456]	; (800829c <_scanf_i+0x1e8>)
 80080d4:	4627      	mov	r7, r4
 80080d6:	2903      	cmp	r1, #3
 80080d8:	bf18      	it	ne
 80080da:	461a      	movne	r2, r3
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	9201      	str	r2, [sp, #4]
 80080e0:	1e5a      	subs	r2, r3, #1
 80080e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80080e6:	bf81      	itttt	hi
 80080e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80080ec:	eb03 0905 	addhi.w	r9, r3, r5
 80080f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80080f4:	60a3      	strhi	r3, [r4, #8]
 80080f6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80080fa:	bf98      	it	ls
 80080fc:	f04f 0900 	movls.w	r9, #0
 8008100:	463d      	mov	r5, r7
 8008102:	f04f 0b00 	mov.w	fp, #0
 8008106:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	6831      	ldr	r1, [r6, #0]
 800810e:	ab03      	add	r3, sp, #12
 8008110:	2202      	movs	r2, #2
 8008112:	7809      	ldrb	r1, [r1, #0]
 8008114:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008118:	f7ff fd46 	bl	8007ba8 <memchr>
 800811c:	b328      	cbz	r0, 800816a <_scanf_i+0xb6>
 800811e:	f1bb 0f01 	cmp.w	fp, #1
 8008122:	d159      	bne.n	80081d8 <_scanf_i+0x124>
 8008124:	6862      	ldr	r2, [r4, #4]
 8008126:	b92a      	cbnz	r2, 8008134 <_scanf_i+0x80>
 8008128:	2308      	movs	r3, #8
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	6063      	str	r3, [r4, #4]
 800812e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	68a2      	ldr	r2, [r4, #8]
 800813e:	1e51      	subs	r1, r2, #1
 8008140:	60a1      	str	r1, [r4, #8]
 8008142:	b192      	cbz	r2, 800816a <_scanf_i+0xb6>
 8008144:	6832      	ldr	r2, [r6, #0]
 8008146:	1c51      	adds	r1, r2, #1
 8008148:	6031      	str	r1, [r6, #0]
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	f805 2b01 	strb.w	r2, [r5], #1
 8008150:	6872      	ldr	r2, [r6, #4]
 8008152:	3a01      	subs	r2, #1
 8008154:	2a00      	cmp	r2, #0
 8008156:	6072      	str	r2, [r6, #4]
 8008158:	dc07      	bgt.n	800816a <_scanf_i+0xb6>
 800815a:	4631      	mov	r1, r6
 800815c:	4650      	mov	r0, sl
 800815e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008162:	4790      	blx	r2
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 8085 	bne.w	8008274 <_scanf_i+0x1c0>
 800816a:	f10b 0b01 	add.w	fp, fp, #1
 800816e:	f1bb 0f03 	cmp.w	fp, #3
 8008172:	d1cb      	bne.n	800810c <_scanf_i+0x58>
 8008174:	6863      	ldr	r3, [r4, #4]
 8008176:	b90b      	cbnz	r3, 800817c <_scanf_i+0xc8>
 8008178:	230a      	movs	r3, #10
 800817a:	6063      	str	r3, [r4, #4]
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	4948      	ldr	r1, [pc, #288]	; (80082a0 <_scanf_i+0x1ec>)
 8008180:	6960      	ldr	r0, [r4, #20]
 8008182:	1ac9      	subs	r1, r1, r3
 8008184:	f000 f8a0 	bl	80082c8 <__sccl>
 8008188:	f04f 0b00 	mov.w	fp, #0
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d03d      	beq.n	8008210 <_scanf_i+0x15c>
 8008194:	6831      	ldr	r1, [r6, #0]
 8008196:	6960      	ldr	r0, [r4, #20]
 8008198:	f891 c000 	ldrb.w	ip, [r1]
 800819c:	f810 000c 	ldrb.w	r0, [r0, ip]
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d035      	beq.n	8008210 <_scanf_i+0x15c>
 80081a4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80081a8:	d124      	bne.n	80081f4 <_scanf_i+0x140>
 80081aa:	0510      	lsls	r0, r2, #20
 80081ac:	d522      	bpl.n	80081f4 <_scanf_i+0x140>
 80081ae:	f10b 0b01 	add.w	fp, fp, #1
 80081b2:	f1b9 0f00 	cmp.w	r9, #0
 80081b6:	d003      	beq.n	80081c0 <_scanf_i+0x10c>
 80081b8:	3301      	adds	r3, #1
 80081ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80081be:	60a3      	str	r3, [r4, #8]
 80081c0:	6873      	ldr	r3, [r6, #4]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	6073      	str	r3, [r6, #4]
 80081c8:	dd1b      	ble.n	8008202 <_scanf_i+0x14e>
 80081ca:	6833      	ldr	r3, [r6, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	68a3      	ldr	r3, [r4, #8]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	e7d9      	b.n	800818c <_scanf_i+0xd8>
 80081d8:	f1bb 0f02 	cmp.w	fp, #2
 80081dc:	d1ae      	bne.n	800813c <_scanf_i+0x88>
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80081e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80081e8:	d1bf      	bne.n	800816a <_scanf_i+0xb6>
 80081ea:	2310      	movs	r3, #16
 80081ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	e7a2      	b.n	800813a <_scanf_i+0x86>
 80081f4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	780b      	ldrb	r3, [r1, #0]
 80081fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008200:	e7de      	b.n	80081c0 <_scanf_i+0x10c>
 8008202:	4631      	mov	r1, r6
 8008204:	4650      	mov	r0, sl
 8008206:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800820a:	4798      	blx	r3
 800820c:	2800      	cmp	r0, #0
 800820e:	d0df      	beq.n	80081d0 <_scanf_i+0x11c>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	05db      	lsls	r3, r3, #23
 8008214:	d50d      	bpl.n	8008232 <_scanf_i+0x17e>
 8008216:	42bd      	cmp	r5, r7
 8008218:	d909      	bls.n	800822e <_scanf_i+0x17a>
 800821a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800821e:	4632      	mov	r2, r6
 8008220:	4650      	mov	r0, sl
 8008222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008226:	f105 39ff 	add.w	r9, r5, #4294967295
 800822a:	4798      	blx	r3
 800822c:	464d      	mov	r5, r9
 800822e:	42bd      	cmp	r5, r7
 8008230:	d02d      	beq.n	800828e <_scanf_i+0x1da>
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	f012 0210 	ands.w	r2, r2, #16
 8008238:	d113      	bne.n	8008262 <_scanf_i+0x1ae>
 800823a:	702a      	strb	r2, [r5, #0]
 800823c:	4639      	mov	r1, r7
 800823e:	6863      	ldr	r3, [r4, #4]
 8008240:	4650      	mov	r0, sl
 8008242:	9e01      	ldr	r6, [sp, #4]
 8008244:	47b0      	blx	r6
 8008246:	6821      	ldr	r1, [r4, #0]
 8008248:	f8d8 3000 	ldr.w	r3, [r8]
 800824c:	f011 0f20 	tst.w	r1, #32
 8008250:	d013      	beq.n	800827a <_scanf_i+0x1c6>
 8008252:	1d1a      	adds	r2, r3, #4
 8008254:	f8c8 2000 	str.w	r2, [r8]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6018      	str	r0, [r3, #0]
 800825c:	68e3      	ldr	r3, [r4, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	60e3      	str	r3, [r4, #12]
 8008262:	2000      	movs	r0, #0
 8008264:	1bed      	subs	r5, r5, r7
 8008266:	44ab      	add	fp, r5
 8008268:	6925      	ldr	r5, [r4, #16]
 800826a:	445d      	add	r5, fp
 800826c:	6125      	str	r5, [r4, #16]
 800826e:	b007      	add	sp, #28
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	f04f 0b00 	mov.w	fp, #0
 8008278:	e7ca      	b.n	8008210 <_scanf_i+0x15c>
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	f8c8 2000 	str.w	r2, [r8]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f011 0f01 	tst.w	r1, #1
 8008286:	bf14      	ite	ne
 8008288:	8018      	strhne	r0, [r3, #0]
 800828a:	6018      	streq	r0, [r3, #0]
 800828c:	e7e6      	b.n	800825c <_scanf_i+0x1a8>
 800828e:	2001      	movs	r0, #1
 8008290:	e7ed      	b.n	800826e <_scanf_i+0x1ba>
 8008292:	bf00      	nop
 8008294:	08008860 	.word	0x08008860
 8008298:	0800754d 	.word	0x0800754d
 800829c:	080063b9 	.word	0x080063b9
 80082a0:	08008bdd 	.word	0x08008bdd

080082a4 <_read_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4604      	mov	r4, r0
 80082a8:	4608      	mov	r0, r1
 80082aa:	4611      	mov	r1, r2
 80082ac:	2200      	movs	r2, #0
 80082ae:	4d05      	ldr	r5, [pc, #20]	; (80082c4 <_read_r+0x20>)
 80082b0:	602a      	str	r2, [r5, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f7fa f81d 	bl	80022f2 <_read>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_read_r+0x1e>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_read_r+0x1e>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20000528 	.word	0x20000528

080082c8 <__sccl>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	780b      	ldrb	r3, [r1, #0]
 80082cc:	4604      	mov	r4, r0
 80082ce:	2b5e      	cmp	r3, #94	; 0x5e
 80082d0:	bf13      	iteet	ne
 80082d2:	2200      	movne	r2, #0
 80082d4:	2201      	moveq	r2, #1
 80082d6:	784b      	ldrbeq	r3, [r1, #1]
 80082d8:	1c48      	addne	r0, r1, #1
 80082da:	bf08      	it	eq
 80082dc:	1c88      	addeq	r0, r1, #2
 80082de:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80082e2:	1e61      	subs	r1, r4, #1
 80082e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80082e8:	42a9      	cmp	r1, r5
 80082ea:	d1fb      	bne.n	80082e4 <__sccl+0x1c>
 80082ec:	b90b      	cbnz	r3, 80082f2 <__sccl+0x2a>
 80082ee:	3801      	subs	r0, #1
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	f082 0201 	eor.w	r2, r2, #1
 80082f6:	4605      	mov	r5, r0
 80082f8:	54e2      	strb	r2, [r4, r3]
 80082fa:	4628      	mov	r0, r5
 80082fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008300:	292d      	cmp	r1, #45	; 0x2d
 8008302:	d006      	beq.n	8008312 <__sccl+0x4a>
 8008304:	295d      	cmp	r1, #93	; 0x5d
 8008306:	d0f3      	beq.n	80082f0 <__sccl+0x28>
 8008308:	b909      	cbnz	r1, 800830e <__sccl+0x46>
 800830a:	4628      	mov	r0, r5
 800830c:	e7f0      	b.n	80082f0 <__sccl+0x28>
 800830e:	460b      	mov	r3, r1
 8008310:	e7f1      	b.n	80082f6 <__sccl+0x2e>
 8008312:	786e      	ldrb	r6, [r5, #1]
 8008314:	2e5d      	cmp	r6, #93	; 0x5d
 8008316:	d0fa      	beq.n	800830e <__sccl+0x46>
 8008318:	42b3      	cmp	r3, r6
 800831a:	dcf8      	bgt.n	800830e <__sccl+0x46>
 800831c:	4619      	mov	r1, r3
 800831e:	3502      	adds	r5, #2
 8008320:	3101      	adds	r1, #1
 8008322:	428e      	cmp	r6, r1
 8008324:	5462      	strb	r2, [r4, r1]
 8008326:	dcfb      	bgt.n	8008320 <__sccl+0x58>
 8008328:	1af1      	subs	r1, r6, r3
 800832a:	3901      	subs	r1, #1
 800832c:	42b3      	cmp	r3, r6
 800832e:	bfa8      	it	ge
 8008330:	2100      	movge	r1, #0
 8008332:	1c58      	adds	r0, r3, #1
 8008334:	1843      	adds	r3, r0, r1
 8008336:	e7e0      	b.n	80082fa <__sccl+0x32>

08008338 <_raise_r>:
 8008338:	291f      	cmp	r1, #31
 800833a:	b538      	push	{r3, r4, r5, lr}
 800833c:	4604      	mov	r4, r0
 800833e:	460d      	mov	r5, r1
 8008340:	d904      	bls.n	800834c <_raise_r+0x14>
 8008342:	2316      	movs	r3, #22
 8008344:	6003      	str	r3, [r0, #0]
 8008346:	f04f 30ff 	mov.w	r0, #4294967295
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800834e:	b112      	cbz	r2, 8008356 <_raise_r+0x1e>
 8008350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008354:	b94b      	cbnz	r3, 800836a <_raise_r+0x32>
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f830 	bl	80083bc <_getpid_r>
 800835c:	462a      	mov	r2, r5
 800835e:	4601      	mov	r1, r0
 8008360:	4620      	mov	r0, r4
 8008362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008366:	f000 b817 	b.w	8008398 <_kill_r>
 800836a:	2b01      	cmp	r3, #1
 800836c:	d00a      	beq.n	8008384 <_raise_r+0x4c>
 800836e:	1c59      	adds	r1, r3, #1
 8008370:	d103      	bne.n	800837a <_raise_r+0x42>
 8008372:	2316      	movs	r3, #22
 8008374:	6003      	str	r3, [r0, #0]
 8008376:	2001      	movs	r0, #1
 8008378:	e7e7      	b.n	800834a <_raise_r+0x12>
 800837a:	2400      	movs	r4, #0
 800837c:	4628      	mov	r0, r5
 800837e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008382:	4798      	blx	r3
 8008384:	2000      	movs	r0, #0
 8008386:	e7e0      	b.n	800834a <_raise_r+0x12>

08008388 <raise>:
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <raise+0xc>)
 800838a:	4601      	mov	r1, r0
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	f7ff bfd3 	b.w	8008338 <_raise_r>
 8008392:	bf00      	nop
 8008394:	2000002c 	.word	0x2000002c

08008398 <_kill_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	2300      	movs	r3, #0
 800839c:	4d06      	ldr	r5, [pc, #24]	; (80083b8 <_kill_r+0x20>)
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	602b      	str	r3, [r5, #0]
 80083a6:	f7f9 ff8a 	bl	80022be <_kill>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	d102      	bne.n	80083b4 <_kill_r+0x1c>
 80083ae:	682b      	ldr	r3, [r5, #0]
 80083b0:	b103      	cbz	r3, 80083b4 <_kill_r+0x1c>
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	bd38      	pop	{r3, r4, r5, pc}
 80083b6:	bf00      	nop
 80083b8:	20000528 	.word	0x20000528

080083bc <_getpid_r>:
 80083bc:	f7f9 bf78 	b.w	80022b0 <_getpid>

080083c0 <__submore>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	460c      	mov	r4, r1
 80083c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80083c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083cc:	4299      	cmp	r1, r3
 80083ce:	d11b      	bne.n	8008408 <__submore+0x48>
 80083d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083d4:	f7fd fe72 	bl	80060bc <_malloc_r>
 80083d8:	b918      	cbnz	r0, 80083e2 <__submore+0x22>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80083e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80083ec:	6360      	str	r0, [r4, #52]	; 0x34
 80083ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80083f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80083f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80083fa:	7043      	strb	r3, [r0, #1]
 80083fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008400:	7003      	strb	r3, [r0, #0]
 8008402:	6020      	str	r0, [r4, #0]
 8008404:	2000      	movs	r0, #0
 8008406:	e7ea      	b.n	80083de <__submore+0x1e>
 8008408:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800840a:	0077      	lsls	r7, r6, #1
 800840c:	463a      	mov	r2, r7
 800840e:	f7ff fbf3 	bl	8007bf8 <_realloc_r>
 8008412:	4605      	mov	r5, r0
 8008414:	2800      	cmp	r0, #0
 8008416:	d0e0      	beq.n	80083da <__submore+0x1a>
 8008418:	eb00 0806 	add.w	r8, r0, r6
 800841c:	4601      	mov	r1, r0
 800841e:	4632      	mov	r2, r6
 8008420:	4640      	mov	r0, r8
 8008422:	f7fd fdcd 	bl	8005fc0 <memcpy>
 8008426:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800842a:	f8c4 8000 	str.w	r8, [r4]
 800842e:	e7e9      	b.n	8008404 <__submore+0x44>

08008430 <_fstat_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d06      	ldr	r5, [pc, #24]	; (8008450 <_fstat_r+0x20>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	4611      	mov	r1, r2
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	f7f9 ff9c 	bl	800237a <_fstat>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d102      	bne.n	800844c <_fstat_r+0x1c>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	b103      	cbz	r3, 800844c <_fstat_r+0x1c>
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	bd38      	pop	{r3, r4, r5, pc}
 800844e:	bf00      	nop
 8008450:	20000528 	.word	0x20000528

08008454 <_isatty_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	2300      	movs	r3, #0
 8008458:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_isatty_r+0x1c>)
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	f7f9 ff9a 	bl	8002398 <_isatty>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_isatty_r+0x1a>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_isatty_r+0x1a>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000528 	.word	0x20000528

08008474 <_malloc_usable_size_r>:
 8008474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008478:	1f18      	subs	r0, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfbc      	itt	lt
 800847e:	580b      	ldrlt	r3, [r1, r0]
 8008480:	18c0      	addlt	r0, r0, r3
 8008482:	4770      	bx	lr

08008484 <_init>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr

08008490 <_fini>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr
